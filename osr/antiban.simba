{$DEFINE WL_ANTIBAN_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

const
mouseAB = true;
cameraAB = true;
tabsAB = true;
chatAB = true;
bankAB = true;

var
  BioHash: Double;
  Endurance: Double; //Unused for now.
  Patience: Double;  //Unused for now.


// POV antibans
procedure TAntiban.RandomPOVTask;
begin
if (cameraAB) then
  case Random(6) of
    0:    Self.AdjustZoom;
    1..5: Self.RandomRotate;
  end;
end;

// Mouse antibans
procedure TAntiban.SmallRandomMouse; override;
var
  B: TBox;
  P: TPoint;
begin
  Self.DebugLn('Random Mouse (Small)');

  B := Box(Mouse.Position(), 350, 350);
  repeat
    P := SRL.RandomPoint(B);
  until P.DistanceTo(B.Middle) < 50; // Make sure we move at least 50 distance

  ASyncMouse.Move(P);
end;

procedure TAntiban.RandomRightClick; override;
begin
  Self.DebugLn('Random Right Click');

  Mouse.Move(GetClientBounds(), True, MOUSE_DISTRIBUTION_RANDOM);

  if ChooseOption.Open() then
  begin
    if Random() < 0.50 then
      Mouse.Move(ChooseOption.Bounds);

    if not SRL.Dice(60 * BioHash) or not ChooseOption.Select('Examine') then
    begin
      Wait(100 * BioHash, 8000 * BioHash, wdLeft);
      ChooseOption.Close();
    end;
  end;
end;

procedure TAntiban.RandomMouseTask;
begin
if (mouseAB) then
  case Random(9) of
    0, 1: Self.RandomRightClick;
    2, 4: Self.RandomMouse;
    5..9: Self.SmallRandomMouse;
  end;
end;

// GameTabs antibans
procedure TAntiban.RandomTab; override;
begin
  Self.DebugLn('Random Tab');

  if Random() < 0.80 then
  begin
    if Random() < 0.50 then
    begin
      GameTabs.Open(ERSGameTab(SRL.NormalRange(Ord(ERSGameTab.COMBAT), Ord(ERSGameTab.MAGIC), 6.0)));

      Wait(400, 3000, wdLeft);
    end;

    GameTabs.Open(ERSGameTab(Random(Ord(ERSGameTab.COMBAT), Ord(ERSGameTab.MAGIC))));
  end else
  begin
    if Random() < 0.50 then
    begin
      GameTabs.Open(ERSGameTab.FRIENDS);

      Wait(750, 2500, wdLeft);
    end;

    GameTabs.Open(ERSGameTab.FRIENDS);
  end;
end;

procedure TAntiban.ToggleTab;
var
  CurrentTab: ERSGameTab := GameTabs.GetCurrentTab;
begin
  Self.DebugLn('Toggling game tabs');
  Self.RandomTab;
  Wait(100 * BioHash, 7000 * BioHash, wdLeft);
  GameTabs.Open(CurrentTab);
end;

procedure TAntiban.CheckCharges;
const
  ITEM_LIST: TRSItemArray = [
    'Infernal axe', 'Crystal axe', 'Infernal harpoon', 'Crystal harpoon',
    'Infernal pickaxe', 'Crystal pickaxe', 'Bryophyta''s staff',
    'Ring of endurance', 'Ring of suffering (ri)', 'Ring of suffering (r)',
    'Amulet of blood fury', 'Dodgy necklace', 'Tome of fire',
    'Bonecrusher necklace', 'Amulet of chemistry', 'Celestial ring', 'Celestial signet'
  ];
var
  EquippedArray: TRSItemArray;
  Item: TRSItem;
begin
  if not Equipment.Open then
    Exit;

  for Item in ITEM_LIST do
    if Equipment.FindItem(Item) then
      EquippedArray += Item;

  if EquippedArray = [] then
    Exit;

  Item := EquippedArray[Random(0, High(EquippedArray))];

  Self.DebugLn('Checking ' + ToStr(Item) + ' charges');

  Equipment.ClickItem(Item, 'Check');
end;


procedure TAntiban.RandomGameTabTask;
begin
if (tabsAB) then
  case Random(10) of
    0, 3: Self.RandomTab;
    4..9: Self.ToggleTab;
    10:   Self.CheckCharges;
  end;
end;





// Toggling random stuff antibans
procedure TAntiban.ToggleRun();
begin
  Self.DebugLn('Toggling run');
  if Minimap.isRunEnabled then
  begin
    Minimap.DisableRun;
    Wait(1000 * Biohash, 4000 * Biohash);
    Minimap.EnableRun;
  end
  else
  begin
    Minimap.EnableRun;
    Wait(1000 * Biohash, 4000 * Biohash);
    Minimap.DisableRun;
  end;
end;

procedure TAntiban.ToggleQPray();
begin
  Self.DebugLn('Toggling quick pray');
  if Minimap.isRunEnabled then
  begin
    Minimap.DisablePrayer;
    Wait(1000 * Biohash, 4000 * Biohash);
    Minimap.EnablePrayer;
  end
  else
  begin
    Minimap.EnablePrayer;
    Wait(1000 * Biohash, 4000 * Biohash);
    Minimap.DisablePrayer;
  end;
end;


// Chatbox antibans
procedure TAntiban.ChatScrolling;
begin
  Self.DebugLn('[RND] Random scrolling on chat');
  //Chatbox.RandomScroll();
end;

procedure TAntiban.RandomChatButton;
var
  ChatButton: ERSChatButton := ERSChatButton(Random(0, (Length(ERSChatButton) - 2)));
begin
  Self.DebugLn('[RND] Opening ' + ToStr(ChatButton) + ' chat button');

  ChatButtons.Open(ChatButton);
end;

procedure TAntiban.ToggleChatButton;
var
  CurrentButton: ERSChatButton := ChatButtons.GetActive;
begin
  Self.DebugLn('[RND] Toggling chat buttons');
  Self.RandomChatButton;
  Wait(3000 * BioHash, 5000 * BioHash);
  ChatButtons.Open(CurrentButton);
end;

procedure TAntiban.RandomChatButtonState;
var
  RandomButton: ERSChatButton := ERSChatButton(Random(2, (Length(ERSChatButton) - 2)));
  RandomState: ERSChatButtonState;
begin
  case RandomButton of
    ERSChatButton.GAME_CHAT:    RandomState := ERSChatButtonState.FILTERED;
    ERSChatButton.PUBLIC_CHAT:  RandomState := ERSChatButtonState(Random(1, Length(ERSChatButtonState)));
    ERSChatButton.PRIVATE_CHAT: RandomState := ERSChatButtonState(Random(1, 3));
    ERSChatButton.CHANNEL_CHAT: RandomState := ERSChatButtonState(Random(1, 3));
    ERSChatButton.CLAN_CHAT:    RandomState := ERSChatButtonState(Random(1, 3));
    ERSChatButton.TRADE_CHAT:   RandomState := ERSChatButtonState(Random(1, 3));
  end;

  Self.DebugLn('[RND] Changing ' + ToStr(RandomButton) + ' state to ' + ToStr(RandomState));
  ChatButtons.ChangeState(RandomButton, RandomState);
end;

procedure TAntiban.RandomChatTask;
begin
if (chatAB) then
  case Random(20) of
    0..5: Self.RandomChatButton;
    6..17: Self.ToggleChatButton;
    18..19:     Self.RandomChatButtonState;
  end;
end;


// Bank antibans
procedure TAntiban.BankScrolling;
begin
  if not Bank.IsOpen then
    Exit;

  Self.DebugLn('[RND] Random scrolling on bank');
  //Chatbox.RandomScroll();
end;

procedure TAntiban.RandomBankTab;
var
  HighTab: Int32;
  BankTab: Int32;
begin
  if not Bank.IsOpen then
    Exit;

  HighTab := Bank.CountTabs();
  BankTab := Random(0, HighTab);
  Self.DebugLn('[RND] Opening bank tab ' + ToStr(BankTab));
  Bank.OpenTab(BankTab);
end;

procedure TAntiban.ToggleBankTab;
var
  CurrentTab: Int32;
begin
  if not Bank.IsOpen then
    Exit;

  Self.DebugLn('[RND] Toggling bank tabs');
  CurrentTab := Bank.GetCurrentTab();
  Self.RandomBankTab;
  Wait(3000 * Biohash, 5000 * Biohash);
  Bank.OpenTab(CurrentTab);
end;

procedure TAntiban.RandomBankButton;
var
  RandomButton: ERSBankButton;
  BankButton: TRSButton;
begin
  if not Bank.IsOpen then
    Exit;

  RandomButton := ERSBankButton(Random(2, 10));
  BankButton := Bank.GetButton(RandomButton);
  Self.DebugLn('[RND] Clicking ' + ToStr(RandomButton) + ' bank button');
  BankButton.Enable;
end;

procedure TAntiban.RandomBankTask;
begin
if (bankAB) then
  case Random(0, 9) of
    0..2: Self.RandomBankTab;
    1..8: Self.ToggleBankTab;
    9: ;
  end;
end;


// This biometrics "system" are straight out of older SRL versions.
procedure TAntiban.SetupBiometrics;
var
  h, i: UInt32;
  k: String;
begin
  if (Length(Login.Players) = 0) or (BioHash <> 0) then
    Exit;

  k := Login.GetPlayer.User;
  h := $811C9DC5;
  for i:=1 to Length(k) do
    h := (h * $1000193) xor Ord(k[i]);

  BioHash   := h / $FFFFFFFF;
  Endurance := Cos(BioHash*PI/2);
  Patience  := Sin(BioHash*PI/1);
end;

procedure TAntiban.SetupTasks;
begin
  if Self.Tasks <> [] then
    Exit;

  Self.AddTask(5  * ONE_MINUTE, @Self.RandomPOVTask);
  Self.AddTask(8  * ONE_MINUTE, @Self.RandomMouseTask);
  Self.AddTask(9  * ONE_MINUTE, @Self.RandomChatTask);
  Self.AddTask(10 * ONE_MINUTE, @Self.LoseFocus);
  Self.AddTask(12 * ONE_MINUTE, @Self.RandomGameTabTask);
  Self.AddTask(18 * ONE_MINUTE, @Self.HoverSkills);
end;

procedure TAntiban.SetupBreaks;
begin
  if Self.Breaks <> [] then
    Exit;

  Self.AddBreak(30  * ONE_MINUTE,  2  * ONE_MINUTE, 0.33, 0.01);
  Self.AddBreak(45  * ONE_MINUTE,  5  * ONE_MINUTE, 0.33, 0.15);
  Self.AddBreak(60  * ONE_MINUTE,  10 * ONE_MINUTE, 0.33, 0.2 + BioHash);
  Self.AddBreak(120 * ONE_MINUTE,  30 * ONE_MINUTE, 0.33, 0.5 + BioHash);
end;

procedure TAntiban.SetupSleep;
var
  Sleep: UInt64;
begin
  if Self.Sleeps <> [] then
    Exit;

  Sleep := (
    ((22 + Round(5 * BioHash)) * ONE_HOUR) +
    (Round(59 * BioHash) * ONE_MINUTE)
  );
  if Sleep > ONE_DAY then
    Sleep -= ONE_DAY;

  Self.AddSleep(
    SRL.MsToTime(Sleep, Time_Bare),
    (5 * ONE_HOUR) + ((200 * ONE_MINUTE) * BioHash),
    0.1,
    (0.8 + BioHash)
  );
end;

// Antiban tasks that can be performed while using walker.
procedure TAntiban.WalkerTasks();
begin
  case Random(0, 15) of
    0:          Self.RandomChatTask();
    1..5:       Self.RandomMouseTask();
    6, 7:       Self.RandomGameTabTask();
    8, 9:       Self.HoverSkills();
    else ; //does nothing.
  end;
end;

procedure TAntiban.Setup; //override me to add stuff!
begin
  Self.SetupBiometrics;
  if AntibanEnabled then
    Self.SetupTasks;

  if BreaksEnabled then
    Self.SetupBreaks;

  if SleepEnabled then
    Self.SetupSleep;

  //override me to add stuff!
end;
