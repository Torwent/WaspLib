(*
CombatHandler
=============
CombatHandler is a record made to handle combat.

This is not made to handle literally every scenario, specially bossing is not
recommended as custom made methods will probably perform much better, but for
for general purpose combat this should be enough!
*)

{$DEFINE WL_COMBATHANDLER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

const
  WEAPONS: TRSItemArray = [
    'Ghrazi rapier', 'Blade of saeldor (c)', 'Inquisitor''s mace',
    'Toktz-xil-ak', 'Abyssal whip', 'Abyssal bludgeon',
    'Abyssal dagger', 'Abyssal dagger (p++)', 'Saradomin sword',
    'Dragon scimitar', 'Dragon sword', 'Dragon longsword',
    'Dharok''s greataxe', 'Sarachnis cudgel', 'Dinh''s bulwark',
    'Dragon hunter lance', 'Abyssal tentacle', 'Granite hammer',
    'Bow of faerdhinen (c)',
    'Toxic blowpipe', 'Magic shortbow (i)', 'Armadyl crossbow',
    'Dragon hunter crossbow', 'Dragon crossbow', 'Rune crossbow',
    'Adamant dart', 'Mithril dart', 'Rune scimitar', 'Dorgeshuun crossbow',
    'Leaf-bladed sword', 'Null'
  ];

  SHIELDS: TRSItemArray = [
    'Avernic defender', 'Dragon defender', 'Rune defender',
    'Adamant defender', 'Mithril defender', 'Black defender',
    'Steel defender', 'Iron defender', 'Bronze defender',
    'Dragonfire shield', 'Toktz-ket-xil', 'Twisted buckler',
    'Dragonfire ward', 'Odium ward', 'Book of law',
    'Book of darkness', 'Unholy book', 'Book of war', 'Rune kiteshield',
    'Null'
  ];

  SPEC_WEAPONS: TRSItemArray = [
    'Dragon claws', '4153', '12848', 'Granite maul', 'Abyssal dagger',
    'Abyssal dagger (p++)', 'Dragon dagger', 'Dragon dagger(p++)',
    'Dragon sword', 'Dragon longsword', 'Dinh''s bulwark', 'Abyssal tentacle',
    'Saradomin godsword', 'Granite hammer',
    'Toxic blowpipe', 'Magic shortbow (i)', 'Armadyl crossbow',
    'Dragon crossbow',
    'Null'
  ];

  BRACELETS: TRSItemArray = [
    'Bracelet of slaughter',
    'Expeditious bracelet',
    'Null'
  ];

  DWARF_CANNON: TRSItemArray = [
    'Cannon base',
    'Cannon stand',
    'Cannon barrels',
    'Cannon furnace'
  ];

  CANNON_BALLS: TRSItemArray = [
    'Cannonball',
    'Granite cannonball'
  ];

  REMAINS: TRSItemArray = [
    'Bones', 'Wolf bones', 'Monkey bones', 'Bat bones', 'Big bones',
    'Jogre bones', 'Zogre bones', 'Babydragon bones', 'Wyrm bones',
    'Wyvern bones', 'Dragon bones', 'Drake bones', 'Lava dragon bones',
    'Hydra bones', 'Dagannoth bones', 'Superior dragon bones',
    'Fiendish ashes', 'Vile ashes', 'Malicious ashes',
    'Abyssal ashes', 'Infernal ashes'
  ];

type
  TCombatHandler = record(TSRLBaseRecord)
    State: String;
    Monster: TRSMonster;

    BraceletTimer: TCountDown;
    InCombatTimer: TCountDown;
    CombatStyle: TRSCombatStyle;

    ManageGear: Boolean;

    Weapon: TRSItem;
    Shield: TRSItem;
    SpecWeapon: TRSItem;
    Bracelet: TRSItem;

    MinHitPoints: Int32;
    MinPrayPoints: Int32;
    WeaponSpec: Int32;
    GearIsSetup: Boolean;
    AutoRetaliateEnabled: Boolean;

    QuickPrayerIsSetup: Boolean;

    HandleHealth: Boolean;
    HandlePrayer: Boolean;
    HandlePoison: Boolean;
    HandleVenom: Boolean;
    HandleAntifire: Boolean;
    HandleBoosts: Boolean;

    HandleCannon: Boolean;
    CannonIsSetup: Boolean;
    DoingSpec: Boolean;
    SlayerTaskFinishedVisible: Boolean;
    SlayerTaskFinished: Boolean;
    LootEnabled: Boolean;
    LootHandler: TRSLootHandler;
    AttackMonsterDelay: Int32;

    BuryBones: Boolean;
    IsSetup: Boolean;
  end;

procedure TCombatHandler.Setup(Timer: Int64 = 4000);
begin
  if Self.IsSetup then
    Exit;

  Self.Name :='CombatHandler';

  if Self.AttackMonsterDelay = 0 then
    Self.AttackMonsterDelay := 5000;

  Self.InCombatTimer.Setup(Timer);

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  ChatButtons.Open(ERSChatButton.GAME_CHAT);
  Self.SlayerTaskFinishedVisible := Chat.FindMessage('Slayer master', [CHAT_COLOR_RED]);

  if Self.HandleHealth := Inventory.ContainsAny(FOOD_ARRAY) then
  begin
    Self.DebugLn('Food detected and will be used.');
    FoodHandler.MinInvPoints := 1;
    FoodHandler.Setup(ERSConsumable.FOOD_CONSUMABLE);
  end;

  if Self.HandleBoosts := Inventory.ContainsAny(BOOST_ARRAY) then
  begin
    Self.DebugLn('Boost potions detected, they will be used.');
    BoostHandler.MinInvPoints := 1;
    BoostHandler.Setup(ERSConsumable.BOOST_CONSUMABLE);
  end;

  if Self.HandlePrayer := Inventory.ContainsAny(PRAYER_ARRAY) then
  begin
    Self.DebugLn('Prayer potions detected, prayer will be used.');
    PrayerHandler.MinInvPoints := 1;
    PrayerHandler.Setup(ERSConsumable.PRAYER_CONSUMABLE);
  end;

  if Self.HandlePoison := Inventory.ContainsAny(ANTI_POISON_ARRAY) then
  begin
    Self.DebugLn('Anti poison potions detected, they will be used.');
    PoisonHandler.MinInvPoints := 1;
    PoisonHandler.Setup(ERSConsumable.POISON_CONSUMABLE);
  end;

  if Self.HandleVenom := Inventory.ContainsAny(ANTI_VENOM_ARRAY) then
  begin
    Self.DebugLn('Anti venom potions detected, they will be used.');
    VenomHandler.MinInvPoints := 1;
    VenomHandler.Setup(ERSConsumable.VENOM_CONSUMABLE);
  end;

  if Self.HandleAntifire := Inventory.ContainsAny(ANTI_FIRE_ARRAY) then
  begin
    Self.DebugLn('Anti fire potions detected, they will be used.');
    AntifireHandler.MinInvPoints := 1;
    AntifireHandler.Setup(ERSConsumable.ANTI_FIRE_CONSUMABLE);
  end;

  Self.HandleCannon := Inventory.ContainsAll(DWARF_CANNON) and
                       Inventory.ContainsAny(CANNON_BALLS);

  if Self.HandleCannon then
    Self.DebugLn('Cannon and cannonballs detected. Cannon will be used.');

  Self.AutoRetaliateEnabled := Combat.GetAutoRetaliate();

  Self.IsSetup := True;
end;

procedure TCombatHandler.Setup(RSMonster: TRSMonster; Timer: Int64 = 4000); overload;
begin
  if Self.IsSetup then
    Exit;

  Self.Setup(Timer);

  Self.Monster := RSMonster;
end;


procedure TCombatHandler._SetupGear();
begin
  if Self.GearIsSetup then
    Exit;

  ItemFinder.AddItemName('Saradomin godsword', '20372');

  for Self.Weapon in WEAPONS do
  begin
    if (Self.Weapon = 'Null') then
      Break;
    if Equipment.ContainsItem(Self.Weapon) then
    begin
      Delete(AlchItemArray, AlchItemArray.Find(Self.Weapon), 1);
      Break;
    end;
  end;
  Self.DebugLn('Current weapon: ' + ToStr(Self.Weapon) + '.');

  for Self.Shield in SHIELDS do
  begin
    if (Self.Shield = 'Null') then
      Break;
    if Equipment.ContainsItem(Self.Shield) then
    begin
      Delete(AlchItemArray, AlchItemArray.Find(Self.Shield), 1);
      Break;
    end;
  end;
  Self.DebugLn('Current shield: ' + ToStr(Self.Shield) + '.');

  if Equipment.ContainsItem('Bonecrusher necklace') then
    Antiban.Skills += ERSSkill.PRAYER;

  for Self.SpecWeapon in SPEC_WEAPONS do
  begin
    if (Self.SpecWeapon = 'Null') then
      Break;
    if Inventory.ContainsItem(Self.SpecWeapon) then
    begin
      Delete(AlchItemArray, AlchItemArray.Find(Self.SpecWeapon), 1);
      Break;
    end;
  end;

  if Inventory.ContainsAny(['Bonecrusher', 'Bonecrusher necklace', 'Ash sanctifier']) then
    Antiban.Skills += ERSSkill.PRAYER;

  if Self.SpecWeapon <> 'Null' then
    Self.WeaponSpec := WeaponData.GetInt(ToStr(Self.SpecWeapon), 'special_attack')
  else
  begin
    if Self.Weapon <> 'Null' then
      Self.WeaponSpec := WeaponData.GetInt(Self.Weapon, 'special_attack');

    if (Self.WeaponSpec > 0) then
      Self.SpecWeapon := Self.Weapon;
  end;

  if Self.SpecWeapon <> 'Null' then
    Self.DebugLn('Current spec weapon: ' + ToStr(Self.SpecWeapon) +
                 '. With ' + ToStr(Self.WeaponSpec) + '% spec.');

  for Self.Bracelet in BRACELETS do
    if (Self.Bracelet = 'Null') or Inventory.ContainsItem(Self.Bracelet) then
      Break;

  if (Self.Bracelet <> 'Null') then
  begin
    Self.DebugLn('Current slayer bracelet: ' + ToStr(Self.Bracelet) + '.');
    Self.BraceletTimer.Setup(15 * ONE_MINUTE);
  end;

  Self.GearIsSetup := (Self.Weapon <> 'Null') or (Self.Shield <> 'Null') or
                 (Self.SpecWeapon <> 'Null') or (Self.Bracelet <> 'Null');
end;

procedure TCombatHandler.Setup(manage: Boolean; RSMonster: TRSMonster; lootValue: Int32 = 5000; timer: Int64 = 4000); overload;
begin
  if Self.IsSetup then
    Exit;

  Self.Setup(RSMonster, timer);

  if manage then
  begin
    Self.ManageGear := True;
    Self._SetupGear();
    Self.LootHandler.Setup(RSMonster, lootValue);
    Self.LootEnabled := Self.LootHandler.IsSetup;
  end;

  DebugMonsterArray += RSMonster;
end;


procedure TCombatHandler.MarkCurrentEnemy();
begin

end;


function TCombatHandler.AttackMonster(): Boolean;
begin
  if Self.Monster.SelectOption(['Attack'], 3) then
  begin
    Minimap.WaitMoving();
    Result := MainScreen.WaitInCombat(Self.AttackMonsterDelay);
  end;

  if Result then
  begin
    if Self.DoingSpec then
      Self.DoingSpec := False;
    Self.InCombatTimer.Restart(Random(0, 2000));
  end;
end;

function TCombatHandler.WalkAttackMonster(): Boolean;
begin
  if Self.Monster.WalkSelectOption(['Attack'], 3) then
  begin
    Minimap.WaitMoving();
    Result := MainScreen.WaitInCombat(Self.AttackMonsterDelay);
  end;

  if Result then
  begin
    if Self.DoingSpec then
      Self.DoingSpec := False;
    Self.InCombatTimer.Restart(Random(0, 2000));
  end;
end;


function TCombatHandler.Loot(): Boolean;
begin
  if Result := Self.LootHandler.CheckLoot() then
  begin
    Wait(400, 600);
    if Inventory.ContainsAny(RSAction.AlchItemArray) and
       RSAction.AlchItems(RSAction.AlchItemArray) then
      Wait(600, 800);
    if not Self.AutoRetaliateEnabled then
      Self.InCombatTimer.Timeout := GetTickCount();
  end;
end;



function TCombatHandler.CheckBracelet(): Boolean;
begin
  if not Self.ManageGear then
    Exit;

  if not Self.GearIsSetup then
  begin
    Self._SetupGear;
    Self.ManageGear := Self.GearIsSetup;
    if not Self.GearIsSetup then
      Exit;
  end;

  Result := (Self.Bracelet <> 'Null') and Equipment.ContainsItem(Self.Bracelet);

  if Result then
    Self.BraceletTimer.Restart(Random((-2 * ONE_MINUTE), (2 * ONE_MINUTE)));
end;

function TCombatHandler.NeedBracelet(): Boolean;
begin
  if not Self.ManageGear or not Self.GearIsSetup then
    Exit;

  Result := (Self.Bracelet <> 'Null') and Self.BraceletTimer.IsFinished() and
            Inventory.ContainsItem(Self.Bracelet) and not Self.CheckBracelet();
end;

function TCombatHandler.EquipBracelet(): Boolean;
begin
  if not Self.ManageGear or not Self.GearIsSetup or (Self.Bracelet = 'Null') then
    Exit;

  Result := Inventory.ClickItem(Self.Bracelet);

  if Result then
  begin
    Self.BraceletTimer.Restart();
    if not Self.AutoRetaliateEnabled then
      Self.InCombatTimer.Timeout := GetTickCount();
  end;
end;


function TCombatHandler.NeedRegear(): Boolean;
begin
  if not Self.ManageGear then
    Exit;

  if not Self.GearIsSetup then
  begin
    Self._SetupGear();
    Self.ManageGear := Self.GearIsSetup;
    if not Self.GearIsSetup then
      Exit;
  end;

  Result := ((Self.Weapon <> 'Null') and Inventory.ContainsItem(Self.Weapon)) or
            ((Self.Shield <> 'Null') and Inventory.ContainsItem(Self.Shield));

  Self.DoingSpec := not Result;
end;

function TCombatHandler.ReGear(): Boolean;
begin
  if not Self.ManageGear or not Self.GearIsSetup then
    Exit;

  repeat
    if (Self.Weapon <> 'Null') then
      begin Inventory.ClickItem(Self.Weapon); Wait(600, 800); end;
    if (Self.Shield <> 'Null') then
      begin Inventory.ClickItem(Self.Shield); Wait(600, 800); end;

    Result := WaitUntil(not Self.NeedRegear(), 100, 3000);
  until Result;

  if not Self.AutoRetaliateEnabled then
    Self.InCombatTimer.Timeout := GetTickCount();
end;


function TCombatHandler.CanSpec(): Boolean;
begin
  if not Self.ManageGear then
    Exit;

  if not Self.GearIsSetup then
  begin
    Self._SetupGear();
    Self.ManageGear := Self.GearIsSetup;
    if not Self.GearIsSetup then
      Exit;
  end;

  if (Self.WeaponSpec = 0) then
    Exit;

  if (Self.SpecWeapon = 'Null') or (Self.Weapon = 'Null') then
    Exit;

  Result := (Minimap.GetSpecLevel() >= Self.WeaponSpec) and
            ((Self.SpecWeapon = Self.Weapon) or Inventory.ContainsItem(Self.Weapon) or
            (Inventory.ContainsItem(Self.SpecWeapon) and Inventory.HasSpace(1)));
  Self.DoingSpec := Result;
end;

function TCombatHandler.DoSpec(): Boolean;
begin
  if Self.ManageGear and not Self.GearIsSetup then
  begin
    Self._SetupGear();
    Self.ManageGear := Self.GearIsSetup;
    if not Self.GearIsSetup then
      Exit;
  end;

  if (Self.SpecWeapon <> Self.Weapon) and Inventory.ClickItem(Self.SpecWeapon) then
    if not WaitUntil(Inventory.ContainsItem(Self.Weapon), 100, 4000) then
      Exit;

  Self.InCombatTimer.Timeout := GetTickCount();
  Result := Self.DoingSpec := Minimap.EnableSpec(Self.WeaponSpec);

  case Self.SpecWeapon of
    'Granite maul', '4153', '12848':
      begin
        Result := Self.DoingSpec := True;
        Wait(50, 100);
      end;
    else
      Wait(300, 400);
  end;

  if Result and (Minimap.GetSpecLevel() < Self.WeaponSpec) then
    Self.Regear();
end;


function TCombatHandler.DoBuryBones(): Boolean;
var
  slots: TIntegerArray;
  slot: Int32;
begin
  slots := Inventory.FindItems(REMAINS);
  if slots = [] then
    Exit;

  slot := slots[0];

  Inventory.ClickSlot(slot);
  Inventory.WaitItemFade(slot);
  Result := WaitUntil(not Inventory.IsSlotUsed(slot), 100, 2000);
end;


function TCombatHandler.NeedAntiPoison(): Boolean;
begin
  if not Self.HandlePoison and not Self.HandleVenom then
    Exit;

  Result := PoisonHandler.NeedToConsume() or VenomHandler.NeedToConsume() or
            Minimap.IsPoisoned() or Minimap.IsEnvenomed();
end;

function TCombatHandler.NeedAntifire(): Boolean;
begin
  Result := Self.HandleAntifire and AntifireHandler.NeedToConsume();
end;

function TCombatHandler.NeedBoost(): Boolean;
begin
  Result := Self.HandleBoosts and BoostHandler.NeedToConsume();
end;


function TCombatHandler.Terminate(): Boolean;
begin
  if not MainScreen.FindGrave() then
  begin
    Magic.CastSpell(ERSSpell.VARROCK_TELEPORT);
    Wait(10000);
  end;

  Result := Logout.ClickLogout();
  Self.Fatal('Last state: ' + Self.State);
end;


procedure TCombatHandler.CheckSlayerTask();
begin
  if not Self.SlayerTaskFinishedVisible and Self.SlayerTaskFinished then
    Exit;

  if Self.SlayerTaskFinishedVisible then
    Self.SlayerTaskFinishedVisible := Chat.FindMessage('Slayer master', [CHAT_COLOR_RED])
  else
    Self.SlayerTaskFinished := Chat.FindMessage('Slayer master', [CHAT_COLOR_RED]);
end;

//Check for pending action combat handler is taking care of.
function TCombatHandler.GetState(): String;
var
  PrayCache: Int32;
begin
  if (Minimap.GetHPLevel() <= Self.MinHitPoints) then
  begin
    if Self.HandleHealth then
    begin
      Exit('EAT_FOOD');
    end;

    Exit('LOW_HEALTH');
  end;

  if Self.HandlePrayer then
  begin
    PrayCache := Minimap.GetPrayerLevel();

    if (PrayCache > 0) and not Minimap.IsPrayerEnabled() then
    begin
      Exit('ENABLE_QPRAY');
    end;

    if (PrayCache <= Self.MinPrayPoints) then
    begin
      if Inventory.ContainsConsumable(ERSConsumable.PRAYER_CONSUMABLE) then
      begin
        Exit('DRINK_PRAYER');
      end;

      Exit('LOW_PRAYER');
    end;
  end;

  if Self.NeedAntifire() then
  begin
    if Inventory.ContainsConsumable(ERSConsumable.ANTI_FIRE_CONSUMABLE) then
    begin
      Exit('DRINK_ANTIFIRE');
    end;

    Exit('NO_ANTIFIRE');
  end;

  if Self.NeedAntiPoison() then
  begin
    if Self.HandleVenom and Inventory.ContainsConsumable(ERSConsumable.VENOM_CONSUMABLE) then
    begin
      Exit('DRINK_ANTIVENOM');
    end;

    if Self.HandlePoison and Inventory.ContainsConsumable(ERSConsumable.POISON_CONSUMABLE) then
    begin
      Exit('DRINK_ANTIPOISON');
    end;
  end;

  if MainScreen.FindGrave() then
    Exit('PLAYER_DEAD');

  Self.CheckSlayerTask();

  if Self.NeedBracelet() then
    Exit('NEED_BRACELET');

  if Self.NeedBoost() then
  begin
    Exit('DRINK_BOOST');
  end;

  if Self.DoingSpec and Self.CanSpec() then
  begin
    Exit('SPEC_MONSTER');
  end;

  if Self.CanSpec() then
  begin
    Exit('USE_SPECIAL_ATT');
  end;

  if Self.NeedRegear() then
  begin
    Exit('REEQUIP_GEAR');
  end;

  if Self.BuryBones and Inventory.ContainsAny(REMAINS) then
  begin
    Exit('BURY_BONES');
  end;

  if not MainScreen.InCombat() then
  begin
    Exit('ATTACK_MONSTER');
  end;

  Result := 'WAIT_IN_COMBAT';
end;


//Check for pending action combat handler is taking care of and do them.
procedure TCombatHandler.DoActions(HandlerState: String = '');
begin
  if HandlerState = '' then
    HandlerState := Self.GetState();
  Self.State := HandlerState;

  case HandlerState of
    'EAT_FOOD':         Inventory.Consume(ERSConsumable.FOOD_CONSUMABLE);
    'DRINK_PRAYER':     Inventory.Consume(ERSConsumable.PRAYER_CONSUMABLE);
    'DRINK_ANTIFIRE':   Inventory.Consume(ERSConsumable.ANTI_FIRE_CONSUMABLE);
    'DRINK_ANTIVENOM':  Inventory.Consume(ERSConsumable.VENOM_CONSUMABLE);
    'DRINK_ANTIPOISON': Inventory.Consume(ERSConsumable.POISON_CONSUMABLE);
    'DRINK_BOOST':      Inventory.Consume(ERSConsumable.BOOST_CONSUMABLE);
    'ENABLE_QPRAY':     Minimap.EnablePrayer();
    'NEED_BRACELET':    Self.EquipBracelet();
    'SPEC_MONSTER':     Self.WalkAttackMonster();
    'USE_SPECIAL_ATT':  Self.DoSpec();
    'REEQUIP_GEAR':     Self.ReGear();
    'BURY_BONES':       Self.DoBuryBones();
    'ATTACK_MONSTER':   Self.WalkAttackMonster();
    'WAIT_IN_COMBAT':   MainScreen.WaitInCombat(Self.InCombatTimer.Length);
    'LOW_HEALTH', 'LOW_PRAYER', 'NO_ANTIFIRE', 'PLAYER_DEAD':
      Self.Terminate;
  else
    raise 'TCombatHandler.DoActions received non-registered HandlerState: ' + HandlerState;
  end;

  if Self.LootEnabled and not Self.DoingSpec then
    case HandlerState of
      'EAT_FOOD', 'DRINK_PRAYER', 'DRINK_ANTIFIRE', 'DRINK_ANTIVENOM',
      'DRINK_ANTIPOISON', 'DRINK_BOOST', 'ENABLE_QPRAY', 'NEED_BRACELET',
      'BURY_BONES', 'ATTACK_MONSTER', 'WAIT_IN_COMBAT':
      Self.Loot();
    end;
end;

var
  CombatHandler: TCombatHandler;

function TRSXPBar.EarnedXP(currentXP: Int32): Boolean; override;
begin
  Result := inherited;

  if CombatHandler.IsSetup and Result then
    CombatHandler.InCombatTimer.Restart(Random(0, 3000));
end;


function TRSMainScreen.FindHitsplats(): TRSHitsplatArray; override;
begin
  Result := inherited;

  if CombatHandler.IsSetup and (Result <> []) then
    CombatHandler.InCombatTimer.Restart(Random(0, 3000));
end;

function TRSMainScreen.FindDepletedHPBar(): Boolean;
var
  Bar: TRSHPBar;
begin
  for Bar in Self.FindHPBars do
    if Bar.Percent = 0 then
      Exit(True);
end;

function TRSMainScreen.InCombat(): Boolean; override;
begin
  Result := (CombatHandler.IsSetup and not CombatHandler.InCombatTimer.IsFinished())
            or XPBar.EarnedXP or (Self.FindHitsplats <> []);
end;
