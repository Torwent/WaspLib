(*
Anvil
==========
Methods to interact with the Anvil.
*)

{$DEFINE WL_ANVIL_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  ERSAnvilType = (
    RUSTED,
    STANDARD
  );

  ERSAnvilButton = (
    QUANTITY_ONE,
    QUANTITY_FIVE,
    QUANTITY_TEN,
    QUANTITY_X,
    QUANTITY_UNSET,
    QUANTITY_ALL,
    QUANTITY_CUSTOM
  );

  TRSAnvil = record(TRSTitledInteface)
    FINDER_UPTEXT: TStringArray;
    FINDER_OPTION: TStringArray;
  end;


function TRSAnvil.GetButtons: TRSButtonArray;
begin
  Result := FindButtons([[37, 37]]);
end;


function TRSAnvil.GetButton(Button: ERSAnvilButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetButtons();
  B: TRSButton;
  TextArray: TStringArray := ['1', '5', '10', 'X', '?', 'All'];
  FoundString: String;
begin
  if Button <> ERSAnvilButton.QUANTITY_CUSTOM then
  begin
    for B in Buttons do
      if B.FindText(TextArray[Ord(Button)], RS_FONT_PLAIN_11) then
        Exit(B);
  end
  else
  begin
    B := Buttons[High(Buttons)];
    if not B.FindText([], RS_FONT_PLAIN_11, FoundString) then
      Exit(B);
  end;
end;

(*
  TRSAnvil.GetSlots

  I though of doing something similar to Bank.FindItemBoundaries but I think
  this is better since I don't get duplicate boxes overlapping.

  The only static coordinates in the anvil menu are the Item name and bar amount.
  This uses the item name to figure out the slots boxes.

  Te actual slots width is 79 but the last column can overlap the previous one
  if it exists so I use a width of 50 instead to not overcomplicate things.
  This could be changed to every column having width of 70 except the last 2 but
  this as is works in every scenario without overcomplicate things.
*)
function TRSAnvil.GetSlots: TBoxArray;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  Area: TBox;
  i: Int32;
begin
  Area := Self.Bounds();
  Area.Y1 += 30;           //Excludes the title bar
  Area.X2 := Area.X2 - 50; //Excludes the quantity buttons


  if SRL.FindColors(TPA, CTS0(65280), Area) then
    ATPA += TPA;
  if SRL.FindColors(TPA, CTS0(2070783), Area) then
    ATPA += TPA;

  TPA := ATPA.Merge;

  if TPA = [] then
    Exit;

  Result := TPA.Cluster(10).ToTBA();
  for i := 0 to High(Result) do
  begin
    Result[i].X1 += 2;
    Result[i].Y1 -= 44;
    Result[i].X2 := Result[i].X1 + 34;
    Result[i].Y2 -= 20;
  end;

  Result.SortByXY;
end;

function TRSAnvil.GetSlot(Slot: Int32): TBox;
var
  Slots: TBoxArray := Self.GetSlots();
begin
  if Slot <= Length(Slots) then
    Result := Slots[Slot];
end;



function TRSAnvil.IsOpen: Boolean; overload;
begin
  Result := MainScreen.IsClassicOpen and
            (SRL.CountColor(CTS0(65280, 0), Self.Bounds) >= 300);
end;

function TRSAnvil.IsOpen(WaitTime: Int32; Interval: Int32 = -1): Boolean; overload;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 1500);

  Result := WaitUntil(Self.IsOpen(), Interval, WaitTime);
end;


(*
Anvil.Close
~~~~~~~~~~
.. pascal:: function TRSAnvil.Close(PressEscape: Boolean = False): Boolean;

Closes the anvil, Depending on `PressEscape` the function will either click the button
or press backspace.

Example
-------

 WriteLn Anvil.Close();
*)
function TRSAnvil.Close(PressEscape: Boolean = False): Boolean;
begin
  if not Self.IsOpen then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

procedure TRSAnvil.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen then
    Exit;

  inherited;

  Bitmap.DrawButtons(Self.GetButtons);
  Bitmap.DrawBoxes(Self.GetSlots, $00FFFF);
end;



(*
Anvil.Setup
~~~~~~~~~~~~~~~~
.. pascal:: procedure Anvil.Setup;

Initializes Anvil variables.

.. note:: This is automatically called on the **Anvil** variable.
*)
procedure TRSAnvil.Setup; override;
begin
  inherited;

  Self.Name := 'Anvil';

  Self.ButtonColors := [CTS1(1052431, 26)];
  Self.ButtonEnabledColors := [CTS1(16777215, 0)];
  Self.FINDER_UPTEXT := ['Smith Anvil', 'Smith Rusted anvil'];
  Self.FINDER_OPTION := ['Smith Anvil', 'Smith Rusted anvil'];
end;

procedure TRSAnvil.SetupAlignment(Mode: ERSClientMode); override;
begin
  Self.Mode := Mode;

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, 2];
        Self.Alignment.Bottom := [@InterfaceArea.Y2, -1];
        Self.Alignment.Center.MaxWidth := 500;
        Self.Alignment.Center.MaxHeight := 320;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, 2];
        Self.Alignment.Bottom := [@InterfaceArea.Y2, -2];
        Self.Alignment.Center.MaxWidth := 500;
        Self.Alignment.Center.MaxHeight := 320;
      end;
  end;
end;

function TRSAnvil.ClickSlot(Slot: Int32; ForceClick: Boolean = False): Boolean;
const
  AVAILABLE = $FFFFFF;
begin
  if not Self.IsOpen then
    Exit;

  if ForceClick or (CountColor(AVAILABLE, Self.GetSlot(Slot)) > 0) then
  begin
    Mouse.Click(Self.GetSlot(Slot), MOUSE_LEFT);
    Result := WaitUntil(not Self.IsOpen, SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
  end;
end;


function TRSAnvil.SmithSlot(Slot: Int32; Quantity: ERSAnvilButton): Boolean;
begin
  Result := Self.GetButton(Quantity).Enable and Self.ClickSlot(Slot);
end;

function TRSAnvil.FindItem(Item: TRSItem; out Slot: Int32): Boolean;
var
  Slots: TIntegerArray;
begin
  Slots := ItemFinder.Find(Item, Self.GetSlots(), 1);

  if Slots = [] then
    Exit(False);

  Slot := Slots[0];

  Result := True;
end;

function TRSAnvil.SmithItem(Item: TRSItem; Quantity: ERSAnvilButton): Boolean;
var
  Slot: Int32;
begin
  if not Self.FindItem(Item, Slot) then
    Exit;

  Result := Self.SmithSlot(Slot, Quantity)
end;


function TRSAnvil._FindAnvil(Color: TCTS2Color): T2DPointArray;
var
  Finder: TRSObjectFinder;
begin
  Finder.Colors += Color;

  Finder.ClusterDistance := 30;  // Distance is 30 so MaxLongSide filters
  Finder.Grow := 3;              // Tin rock clusters and furnaces...
  Finder.Erode := 3;             // E.G. tutorial island

  Finder.MinShortSide := 8;
  Finder.MaxLongSide := 55;

  Result := MainScreen.FindObject(Finder);
  if Length(Result) = 0 then
    Exit;

  Result.SortByMiddle(MainScreen.GetPlayerBox.Middle);
end;


function TRSAnvil.Hover(AnvilType: ERSAnvilType; RightClick: Boolean = False): Boolean;
var
  ATPA: T2DPointArray;
  TPA: TPointArray;
  P: TPoint;
begin
  if ChooseOption.IsOpen() or MainScreen.IsUpText(Self.FINDER_UPTEXT) then
    Exit(True);

  case AnvilType of
    ERSAnvilType.RUSTED:   ATPA := Self._FindAnvil(CTS2(2371906, 13, 0.10, 0.18));
    ERSAnvilType.STANDARD: ATPA := Self._FindAnvil(CTS2(3881791, 15, 0.20, 0.12));
  end;

  for TPA in ATPA do
  begin
    P := TPA[Random(Length(TPA))];
    P.X += Random(-2, 2);
    P.Y += Random(-2, 2);

    Mouse.Move(P);
    if MainScreen.IsUpText(Self.FINDER_UPTEXT) then
    begin
      if RightClick then
        ChooseOption.Hover(Self.FINDER_OPTION);

      Exit(True);
   end;
  end;
end;

function TRSAnvil.Open(P: TPoint): Boolean;
begin
  Mouse.Move(P);

  Result := ChooseOption.IsOpen() and ChooseOption.Select(Self.FINDER_OPTION);

  if not Result then
  begin
    if MainScreen.IsUpText(Self.FINDER_UPTEXT) then
    begin
      if SRL.Dice(10) then
        Result := ChooseOption.Select(Self.FINDER_OPTION)
      else
      begin
        Mouse.Click(MOUSE_LEFT);

        Result := MainScreen.DidRedClick();
      end;
    end;
  end;

  if Result then
  begin
    if Minimap.HasFlag(Random(200, 400)) then
      Minimap.WaitFlag();

    Result := Self.IsOpen(Random(3000, 4000));
  end;
end;

function TRSAnvil.Open(AnvilType: ERSAnvilType): Boolean; overload;
var
  Attempt: Int32;
begin
  if Self.IsOpen() or Self.Open(Mouse.Position()) then
    Exit(True);

  for Attempt := 1 to 3 do
  begin
    if Attempt = 2 then
    begin
      Self.DebugLn('Anvil not found, rotating...');

      if SRL.Dice(50) then
        Minimap.SetCompassAngle(Minimap.GetCompassAngle() + Random(100, 200))
      else
        Minimap.SetCompassAngle(Minimap.GetCompassAngle() - Random(100, 200));
    end;

    if Self.Hover(AnvilType, SRL.Dice(10)) then
      Exit(Self.Open(Mouse.Position()));
  end;
end;


(*
var Anvil
~~~~~~~~~~~~~~
  Global Anvil variable.
*)
var
  Anvil: TRSAnvil;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  Anvil.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  Anvil.Setup;
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Anvil.Draw(Bitmap);
end;
