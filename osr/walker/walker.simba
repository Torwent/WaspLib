(*
# Walker
Extensions to SRL's TRSWalker.
*)

{$DEFINE WL_WALKER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

var
  ScriptWalker: PRSWalker;

(*
## type TRSHeightMap
```pascal
type
TRSHeightMap = record
  Disabled: Boolean;
  Map: TMufasaBitmap;
  MaxHeight: Double;
  MathCache: Double;
end;
```
TRSHeightMap is the type responsible for handling heights with walker when using WaspLib.
This type does not need to be initiated as a variable and it's meant to be used directly with it's static methods.

**Enabled** is used to toggle the TRSHeightMap on/off. By default it will always be on unless there's not a heightmap available for the map you load into walker.
the heightmap MUST be named the same as the map you load with an "h" prepended. E.G.: hWorld.png

**Map** there's not much to talk about this one, it's simply the TMufasaBitmap loaded in the record.

**MaxHeight** This is what will be considered the max height possible in the calculations made by TRSHeightMap.
There's no way to accurately know what this should be, you should debug heights and set a value that looks good to you.
Values might also vary between regions but I find **30** to be a fine value that works well in a lot of places if not all.

**MathCache**, not very important, simply a cache variable so we don't repeat calculations when it's not required.
*)
type
  TRSHeightMap = record
    Disabled: Boolean;
    Map: TMufasaBitmap;
    MaxHeight: Double;
    MathCache: Double;
  end;

(*
## TRSHeightMap.GetColor
```pascal
function TRSHeightMap.GetColor(p: TPoint): Int64;
```

Returns the color of the heightmap at the specified point.

Example:
```pascal
WriteLn TRSHeightMap.GetColor([100, 100]);
```
*)
function TRSHeightMap.GetColor(p: TPoint): Int64;
begin
  if Self.Disabled then
    Exit;

  if not InRange(p.X, 0, Self.Map.getWidth() - 1) then
    Exit;

  if not InRange(p.Y, 0, Self.Map.getHeight() - 1) then
    Exit;

  Result := Self.Map.GetPixel(p.X, p.Y);
end;

(*
## TRSHeightMap.DebugPosition
```pascal
procedure TRSHeightMap.DebugPosition(p: TPoint);
```

Debug a point in the loaded heightmap.

Example:
```pascal
TRSHeightMap.DebugPosition(RSW.GetMyPos());
```
*)
procedure TRSHeightMap.DebugPosition(p: TPoint);
var
  hMap: TMufasaBitmap;
begin
  hMap := Self.Map.Copy();

  WriteLn('Height value: ', Self.GetColor(p) * Self.MathCache);

  hMap.DrawCross(p, 4, $00FFFF);
  hMap.Debug();
  hMap.Free();
end;

var
  RSHeightMap: TRSHeightMap;

(*
## TRSWalkerMap.Load
```pascal
procedure TRSWalkerMap.Load(fileName: String; Scaling: Integer); override;
procedure TRSWalkerMap.Load(fileName: String; aRegions: TBoxArray; Scaling: Integer; Padding: Integer = 50); override;
procedure TRSWalkerMap.Load(fileName: String; aRegion: TBox; scaling: Integer; padding: Integer = 50); override;
procedure TRSWalkerMap.Load(fileName: String; start: TPoint; scaling: Int32; out aRegion: TBox; padding: Int32 = 50); override;
```
Overrides SRL's TRSWalkerMap.Load() so it loads the respective heightmap if it exists.
This is an internal Walker method, you probably don't need to call it.
*)
procedure TRSWalkerMap.Load(fileName: String; scaling: Integer); override;
var
  hFileName: String;
begin
  hFileName := ExtractFilePath(fileName) + 'h' + ExtractFileName(fileName);
  RSHeightMap.Disabled := RSHeightMap.Disabled or (RSHeightMap.MaxHeight = 0) or not FileExists(hFileName);

  Self.Map := Self.InternalLoadMap(fileName);
  if not RSHeightMap.Disabled then
  begin
    RSHeightMap.Map := Self.InternalLoadMap(hFileName);
    RSHeightMap.Disabled := (Self.Map.getWidth() <> RSHeightMap.Map.getWidth())
                       or (Self.Map.getHeight() <> RSHeightMap.Map.getHeight());


    if RSHeightMap.Disabled then
      RSHeightMap.Map.Free()
    else
      AddOnTerminate(@RSHeightMap.Map.Free);
  end;

  Self.ScaledMap.Init();
  AddOnTerminate(@Self.Free);
  Self.Map.Downsample(scaling, Self.ScaledMap);

  Self.Regions := [[0, 0, Self.Map.getWidth()-1, Self.Map.getHeight()-1]];
  Self.RegionOffsets := [[0, 0]];
end;

procedure TRSWalkerMap.Load(fileName: String; aRegions: TBoxArray; scaling: Integer; padding: Integer = 50); override;
var
  bitmaps, hBitmaps: TMufasaBitmapArray;
  I: Integer;
  hFileName: String;
begin
  hFileName := ExtractFilePath(FileName) + 'h' + ExtractFileName(fileName);
  RSHeightMap.Disabled := RSHeightMap.Disabled or
                         (RSHeightMap.MaxHeight = 0) or not FileExists(hFileName);

  SetLength(Self.Regions, Length(aRegions));
  SetLength(Self.RegionOffsets, Length(aRegions));

  SetLength(bitmaps, Length(Self.Regions));
  SetLength(hBitmaps, Length(Self.Regions));
  for I := 0 to High(bitmaps) do
  begin
    Self.RegionOffsets[I] := Point(aRegions[I].X1, aRegions[I].Y1);

    bitmaps[I] := Self.InternalLoadMap(FileName, aRegions[I]);
    if not RSHeightMap.Disabled then
      hBitmaps[I] := Self.InternalLoadMap(hFileName, aRegions[I]);

    if (aRegions[I] <> RSWalkerRegions.WORLD) then
    begin
      Self.RegionOffsets[I].X -= padding;
      Self.RegionOffsets[I].Y -= padding;

      Bitmaps[I].Pad(padding);
      if not RSHeightMap.Disabled then
        hBitmaps[I].Pad(padding);
    end;

    Self.Regions[I] := Box(0, 0, bitmaps[I].GetWidth(), bitmaps[I].GetHeight());
  end;

  Self.Regions := Self.Regions.Pack();
  Self.Map.Init();
  Self.Map.SetSize(Self.Regions.Merge.Width(), Self.Regions.Merge.Height());
  Self.Map.SetName('Walker.Map');
  AddOnTerminate(@Self.Map.Free);

  if not RSHeightMap.Disabled then
  begin
    RSHeightMap.Map.Init();
    RSHeightMap.Map.SetSize(Self.Regions.Merge.Width(), Self.Regions.Merge.Height());
    RSHeightMap.Map.SetName('Heightmap');
    AddOnTerminate(@RSHeightMap.Map.Free);
  end;

  for I := 0 to High(Self.Regions) do
  begin
    Self.Map.DrawBitmap(bitmaps[I], Point(Self.Regions[I].X1, Self.Regions[I].Y1));
    if not RSHeightMap.Disabled then
      RSHeightMap.Map.DrawBitmap(hBitmaps[I], Point(Self.Regions[I].X1, Self.Regions[I].Y1));
  end;

  Self.ScaledMap.Init();
  AddOnTerminate(@Self.ScaledMap.Free);
  Self.ScaledMap.SetName('Walker.ScaledMap');
  Self.Map.Downsample(Scaling, Self.ScaledMap);

  for I := 0 to High(bitmaps) do
    bitmaps[I].Free();

  if not RSHeightMap.Disabled then
    for I := 0 to High(hBitmaps) do
      hBitmaps[I].Free();
end;

procedure TRSWalkerMap.Load(fileName: String; aRegion: TBox; scaling: Integer; padding: Integer = 50); override;
var
  bitmaps, hBitmaps: TMufasaBitmapArray;
  bitmap, hBitmap: TMufasaBitmap;
  i, hi: Int32;
  hFileName: String;
begin
  for i := 0 to High(Self.Regions) do
  begin
    bitmaps += Self.Map.Copy(Self.Regions[i].X1, Self.Regions[i].Y1, Self.Regions[i].X2, Self.Regions[i].Y2);
    if not RSHeightMap.Disabled then
      hBitmaps += RSHeightMap.Map.Copy(Self.Regions[i].X1, Self.Regions[i].Y1, Self.Regions[i].X2, Self.Regions[i].Y2);
  end;

  Self.Map.Clear();
  if not RSHeightMap.Disabled then
    RSHeightMap.Map.Clear();

  hFileName := ExtractFilePath(fileName) + 'h' + ExtractFileName(fileName);
  RSHeightMap.Disabled := RSHeightMap.Disabled or
                         (RSHeightMap.MaxHeight = 0) or not FileExists(hFileName);

  SetLength(Self.Regions, Length(Self.Regions) + 1);
  SetLength(Self.RegionOffsets, Length(Self.Regions));

  hi := High(Self.Regions);

  Self.RegionOffsets[hi] := Point(aRegion.X1, aRegion.Y1);

  bitmap := Self.InternalLoadMap(fileName, aRegion);
  if not RSHeightMap.Disabled then
    hBitmap := Self.InternalLoadMap(hFileName, aRegion);

  if (aRegion <> RSWalkerRegions.WORLD) then
  begin
    Self.RegionOffsets[hi].X -= padding;
    Self.RegionOffsets[hi].Y -= padding;

    bitmap.Pad(padding);
    if not RSHeightMap.Disabled then
      hBitmap.Pad(padding);
  end;

  Self.Regions[hi] := Box(0, 0, bitmap.GetWidth(), bitmap.GetHeight());
  bitmaps += bitmap;
  if not RSHeightMap.Disabled then
    hBitmaps += hBitmap;

  Self.Regions := Self.Regions.Pack();
  Self.Map.SetSize(Self.Regions.Merge.Width(), Self.Regions.Merge.Height());

  if not RSHeightMap.Disabled then
    RSHeightMap.Map.SetSize(Self.Regions.Merge.Width(), Self.Regions.Merge.Height());

  for I := 0 to High(Self.Regions) do
  begin
    Self.Map.DrawBitmap(bitmaps[I], Point(Self.Regions[I].X1, Self.Regions[I].Y1));
    if not RSHeightMap.Disabled then
      RSHeightMap.Map.DrawBitmap(hBitmaps[I], Point(Self.Regions[I].X1, Self.Regions[I].Y1));
  end;

  Self.ScaledMap.Clear();
  Self.Map.Downsample(Scaling, Self.ScaledMap);

  for I := 0 to High(bitmaps) do
    bitmaps[I].Free();

  if not RSHeightMap.Disabled then
    for I := 0 to High(hBitmaps) do
      hBitmaps[I].Free();
end;

procedure TRSWalkerMap.Load(fileName: String; start: TPoint; scaling: Int32; out aRegion: TBox; padding: Int32 = 50); override;
var
  bitmaps, hBitmaps: TMufasaBitmapArray;
  bitmap, hBitmap: TMufasaBitmap;
  i, hi: Int32;
  hFileName: String;
begin
  for i := 0 to High(Self.Regions) do
  begin
    bitmaps += Self.Map.Copy(Self.Regions[i].X1, Self.Regions[i].Y1, Self.Regions[i].X2, Self.Regions[i].Y2);
    if not RSHeightMap.Disabled then
      hBitmaps += RSHeightMap.Map.Copy(Self.Regions[i].X1, Self.Regions[i].Y1, Self.Regions[i].X2, Self.Regions[i].Y2);
  end;

  Self.Map.Clear();
  if not RSHeightMap.Disabled then
    RSHeightMap.Map.Clear();

  hFileName := ExtractFilePath(fileName) + 'h' + ExtractFileName(fileName);


  SetLength(Self.Regions, Length(Self.Regions) + 1);
  SetLength(Self.RegionOffsets, Length(Self.Regions));

  hi := High(Self.Regions);

  Self.RegionOffsets[hi] := start;

  bitmap := Self.InternalLoadMap(fileName);
  if not RSHeightMap.Disabled and FileExists(hFileName) then
    hBitmap := Self.InternalLoadMap(hFileName);

  aRegion := [start.X, start.Y, bitmap.getWidth()-1, bitmap.getHeight()-1];

  Self.RegionOffsets[hi].X -= padding;
  Self.RegionOffsets[hi].Y -= padding;

  bitmap.Pad(padding);
  if not RSHeightMap.Disabled then
    hBitmap.Pad(padding);

  Self.Regions[hi] := Box(0, 0, bitmap.GetWidth(), bitmap.GetHeight());
  bitmaps += bitmap;
  if not RSHeightMap.Disabled then
    hBitmaps += hBitmap;

  Self.Regions := Self.Regions.Pack();
  Self.Map.SetSize(Self.Regions.Merge.Width(), Self.Regions.Merge.Height());

  if not RSHeightMap.Disabled then
    RSHeightMap.Map.SetSize(Self.Regions.Merge.Width(), Self.Regions.Merge.Height());

  for I := 0 to High(Self.Regions) do
  begin
    Self.Map.DrawBitmap(bitmaps[I], Point(Self.Regions[I].X1, Self.Regions[I].Y1));
    if not RSHeightMap.Disabled then
      RSHeightMap.Map.DrawBitmap(hBitmaps[I], Point(Self.Regions[I].X1, Self.Regions[I].Y1));
  end;

  Self.ScaledMap.Clear();
  Self.Map.Downsample(Scaling, Self.ScaledMap);

  for I := 0 to High(bitmaps) do
    bitmaps[I].Free();

  if not RSHeightMap.Disabled then
    for I := 0 to High(hBitmaps) do
      hBitmaps[I].Free();
end;


(*
## Walker.InternalSetup
```pascal
procedure TRSWalker.InternalSetup(); override;
```
Overrides SRL's Walker.InternalSetup() so it uses WaspWeb as the walker webgraph and so it uses ScreenWalk by default.
This is an internal Walker method, you probably don't need to call it.
It also sets up the ScriptWalker pointer which is used for several things in WaspLib like TRSWalkerObjects and Skunk's transport system.
*)
procedure TRSWalker.InternalSetup(); override;
begin
  inherited;
  Self.ClickRandomness := 6;
  Self.WebGraph := WaspWeb;
  Self.ScreenWalk := True;
  ScriptWalker := @Self;
end;

(*
## Walker.SetupNamedRegion
```pascal
procedure TRSWalker.SetupNamedRegion(region: TRSBankRegion = []); overload;
```

Use this if you want to setup a walker with whatever the user has setup in WLSettings.BankLocation.
You can optionally pass in your own **region** but it's really meant to use the default.

Example:
```pascal
WLSettings.BankLocation := EWLBankLocation.CASTLE_WARS_BANK;
Walker.SetupNamedRegion();
Walker.Map.Map.Debug();
```
*)
procedure TRSWalker.SetupNamedRegion(region: TRSNamedRegion = []); overload;
begin
  if Self.Map.Map <> nil then
    Exit;

  if region = [] then
    region := RSBankRegions[WLSettings.BankLocation];

  Self.SetupRegion(region.Bounds);
end;


(*
## Walker.GetHeight
```pascal
function TRSWalker.GetHeight(p: TPoint = []; global: Boolean = True): Double;
```

Returns the height of the player at the specified coordinate with the help of TRSHeightMap.
If p is [], which is the default then we will use our current position.
global decides wether the coordinate is converted to global coordinates or internal walker coordinates (read about walker regions for more info).

Example:
```pascal
WriteLn rsw.GetHeight();
```
*)
function TRSWalker.GetHeight(p: TPoint = []; global: Boolean = True): Double;
begin
  if RSHeightMap.Disabled then
    Exit;

  if p = [] then
  begin
    global := True;
    p := Self.GetMyPos();
  end;

  if global then
    p := Self.Map.GlobalToRegion(Self.RegionIndex, p);

  if RSHeightMap.MathCache = 0 then
    RSHeightMap.MathCache := RSHeightMap.MaxHeight / $FFFFFF;
  Result := RSHeightMap.GetColor(p) * RSHeightMap.MathCache;
end;


(*
## Walker.DebugHeightTiles
```pascal
procedure TRSWalker.DebugHeightTiles(angle: Double = -1);
```

Displays a debug image of the tiles visible on the mainscreen with their height adjusted according to the TRSHeightMap.
This is very useful if you need to adjust TRSHeightMap.MaxHeight.

Example:
```pascal
rsw.DebugHeightTiles();
```
*)
procedure TRSWalker.DebugHeightTiles(angle: Double = -1);
var
  position: TPoint;
  tempTile: TPoint;
  currentHeight, tileHeight, heightDiff: Double;

  bitmap: TMufasaBitmap;
  x, y: Int32;
  tile: Vector3;
  tpa: TPointArray;
begin
  if RSHeightMap.Disabled then
    Exit;

  if angle = -1 then
    angle := Minimap.GetCompassAngle(False);

  position := Self.GetMyPos();
  currentHeight := Self.GetHeight(position);

  bitmap.FromClient();

  for x := Minimap.Center().X - 25 * 4 to Minimap.Center().X + 25 * 4 with 4 do
    for y := Minimap.Center().Y - 25 * 4 to Minimap.Center().Y + 25 * 4 with 4 do
    begin

      tempTile := position + ([x, y] - Minimap.Center());
      tempTile := tempTile.Rotate(-angle, position);
      tileHeight := Self.GetHeight(tempTile);
      heightDiff := currentHeight-tileHeight;

      tile := Vec3(x, y, heightDiff).RotateXY(angle, Minimap.Center().X, Minimap.Center().Y);
      tpa := Minimap.VectorToMSRect(tile, 1, 1, angle).ToTPA().Connect();

      if MainScreen.IsVisible(tpa) then
      begin
        tpa := MainScreen.Filter(tpa);
        bitmap.DrawTPA(tpa, Round(tileHeight * ($00ff00 + $00ff00)/ RSHeightMap.MaxHeight));
      end;
    end;

  bitmap.Debug();
  bitmap.Free();
end;

(*
## Walker.GetMyPos
```pascal
function TRSWalker.GetMyPos(out height: Double): TPoint; overload;
```
Overload that also returns the player height.

Example:
```pascal
WriteLn RSW.GetMyPos(height);
WriteLn height;
```
*)
function TRSWalker.GetMyPos(out height: Double): TPoint; overload;
const
  SAMPLES = 3;
var
  bitmap: TMufasaBitmap;
  tpa: TPointArray;
  i: Int32;
  hit: TPoint;
  match: Single;
begin
  Self.RegionIndex := -1;
  Self.Region := [];
  Self.Similarity := 0;

  bitmap := Self.GetCleanMinimap();

  tpa := Self.ScaledSearch(bitmap, SAMPLES);
  for i := 0 to High(tpa) do
  begin
    hit := Self.FullSearch(bitmap, Self.Map.Map, tpa[i], match);

    if match > Self.Similarity then
    begin
      Self.Similarity := match;

      Result := hit;
    end;
  end;

  Self.RegionIndex := Self.Map.RegionIndexFromPoint(Result);
  if Self.RegionIndex > -1 then
  begin
    Self.Region := Self.Map.Regions[Self.RegionIndex];
    height := Self.GetHeight(Result, False);
    Result := Self.Map.RegionToGlobal(Result);
  end;

  bitmap.Free();
end;

(*
## Walker.GetHeightDiff
```pascal
function TRSWalker.GetHeightDiff(p: TPoint): Double;
function TRSWalker.GetHeightDiff(p, q: TPoint): Double; overload;
```

Returns the height difference between 2 points. If only one point is passed, the player position is used as one of them.

Example:
```pascal
WriteLn RSW.GetMyPos(RSW.GetMyPos(), [100, 100]);
```
*)
function TRSWalker.GetHeightDiff(p: TPoint): Double;
var
  h: Double;
begin
  if RSHeightMap.Disabled then
    Exit;

  Self.GetMyPos(h);
  Result := h - Self.GetHeight(p);
end;

function TRSWalker.GetHeightDiff(p, q: TPoint): Double; overload;
begin
  if RSHeightMap.Disabled then
    Exit;

  Result := Self.GetHeight(p) - Self.GetHeight(q);
end;


procedure TRSWalker.Draw(Bitmap: TMufasaBitmap);
var
  X1, Y1, X2, Y2, X, Y, w, h: Int32;
  P: TPoint;
  WorldBitmap, MinimapBitmap: TMufasaBitmap;
  Position: TPoint;
begin
  Position := Self.GetMyPos();
  if Self.RegionIndex > -1 then
    Position := Self.Map.GlobalToRegion(Self.RegionIndex, Position);

  w := Round(Minimap.Bounds().Width()/2);
  h := Round(Minimap.Bounds().Height()/2);
  X1 := Position.X - w;
  Y1 := Position.Y - h;
  X2 := Position.X + w;
  Y2 := Position.Y + h;

  X := Position.X - X1;
  Y := Position.Y - Y1;

  WorldBitmap := Self.Map.Map.Copy(X1, Y1, X2, Y2);
  WorldBitmap.LineTo(Point(0, Y), Point(X2 - X1, Y), $00FF00);
  WorldBitmap.LineTo(Point(X, 0), Point(X, Y2 - Y1), $00FF00);
  WorldBitmap.DrawBox([X - 2, Y - 2, X + 2, Y + 2], $FFFFFF);

  MinimapBitmap := Self.ScaleMinimap(Self.GetCleanMinimap(), 1);

  P := MinimapBitmap.GetCenter();
  if RSClient.Mode = ERSClientMode.FIXED then
    P := P.Offset(0, 8).Rotate(-Minimap.GetCompassAngle(False), P);

  MinimapBitmap.DrawBoxFilled([P.X - 1, P.Y - 1, P.X + 1, P.Y + 1], False, $FFFFFF);

  WorldBitmap.DrawTransparent(Minimap.Bounds().X1 - (w * 2), Minimap.Bounds().Y1, Bitmap);
  WorldBitmap.Free();

  MinimapBitmap.DrawTransparent(Minimap.Bounds().X1 - (w * 4), Minimap.Bounds().Y1, Bitmap);
  MinimapBitmap.Free();
  Bitmap.setFontSize(15);
  Bitmap.DrawText('Position: x' + ToStr(Position.X) + 'y' + ToStr(Position.Y), [0,5], $FFFFFF);
  Bitmap.DrawText('Region: ' + ToStr(Self.RegionIndex), [0,30], $00FFFF);
end;

(*
## TRSWalker.AtTile
```pascal
function TRSWalker.AtTile(worldPoint: TPoint; Distance: Int32 = 4): Boolean;
function TRSWalker.AtTile(worldPointArray: TPointArray; Distance: Int32 = 4): Boolean; overload;
```

method used to quickly check if we are within distance of a certain **worldPoint**. This distance is measure in pixels and in a radial way.
You can optionally pass in a TPA to check if the closest point is within distance.

This is a TRSWalker method so it will exist both on TRSWalker and TRSWalker.
*)
function TRSWalker.AtTile(worldPoint: TPoint; distance: Int32 = 4): Boolean;
var
  p: TPoint;
begin
  p := Self.GetMyPos();
  Result := p.WithinDistance(worldPoint, distance);
end;

function TRSWalker.AtTile(worldPointArray: TPointArray; distance: Int32 = 4): Boolean; overload;
var
  p: TPoint;
begin
  p := Self.GetMyPos();
  Result := p.WithinDistance(worldPointArray, distance);
end;



(*
## TRSWalker.GetClosestPoint
```pascal
function TRSWalker.GetClosestPoint(worldPointArray: TPointArray): TPoint;
```

method used to get the closest Point to the Player out of a TPA.

This is a TRSWalker method so it will exist both on TRSWalker and TRSWalker.
*)
function TRSWalker.GetClosestPoint(destinations: TPointArray): TPoint;
var
  paths, shortPaths: T2DPointArray;
  path: TPointArray;
  shortest: Int32;
  me, destination: TPoint;
begin
  me := Self.GetMyPos();
  for destination in destinations do
  begin
    path := [];

    try
      path := Self.WebGraph.PathBetween(me, destination, 0);
    except
    end;

    if (path <> []) and not paths.Contains(path) then
      paths += path;
  end;

  if paths = [] then
    Exit(destinations.NearestPoint(me));

  shortest := Round(paths.ShortestDistance());

  for path in paths do
    if InRange(path.TotalDistance(), shortest-15, shortest+15) then
      shortPaths += path;

  Result := shortPaths.RandomValue().Last();
end;

(*
## TRSWalker.WebWalk
```pascal
function TRSWalker.WebWalk(destinations: TPointArray; waitUntilDistance: Int32 = 0; pathRandomness: Double = 0): Boolean; overload;
```

method used to webwalk to the closest Point to the player.
An example use case is for example, if you have sevel bank booths you can use, those would be your **Destination** TPA.
You will likely want to use the closest bank booth to you, so you use this.

This is a TRSWalker method so it will exist both on TRSWalker and TRSWalker.
*)
function TRSWalker.WebWalk(destinations: TPointArray; waitUntilDistance: Int32 = 0; pathRandomness: Double = 0): Boolean; overload;
var
  destination: TPoint;
begin
  destination := Self.GetClosestPoint(destinations);
  Result := Self.WebWalk(destination, waitUntilDistance, pathRandomness);
end;


(*
## TRSWalker.WorldToMM
```pascal
function TRSWalker.WorldToMM(me: TPoint; tpa: TPointArray; radians: Double): TPointArray; overload;
function TRSWalker.WorldToMM(tpa: TPointArray): TPointArray; overload;
function TRSWalker.WorldToMM(me: TPoint; atpa: T2DPointArray; radians: Double): T2DPointArray; overload;
function TRSWalker.WorldToMM(atpa: T2DPointArray): TPointArray; overload;
function TRSWalker.WorldToMM(me: TPoint; dotFilter: TRSDotFilter; roll: Double = $FFFF): TRSDotFilter; overload;
function TRSWalker.WorldToMM(dotFilterArray: TRSDotFilterArray; roll: Double = $FFFF): TRSDotFilterArray; overload;
```

Overloaded methods required for ATPAs and TRSDotFilters. For more information on TRSDotFilter check their documentation.

This is a TRSWalker method so it will exist both on TRSWalker and TRSWalker.
*)
function TRSWalker.WorldToMM(me: TPoint; tpa: TPointArray; radians: Double): TPointArray; overload;
var
  p: TPoint;
begin
  for p in tpa do
    Result += Self.WorldToMM(me, p, radians);
end;

function TRSWalker.WorldToMM(tpa: TPointArray): TPointArray; overload;
begin
  Result := Self.WorldToMM(Self.GetMyPos(), tpa, Minimap.GetCompassAngle(False));
end;


function TRSWalker.WorldToMM(me: TPoint; atpa: T2DPointArray; radians: Double): T2DPointArray; overload;
var
  tpa: TPointArray;
begin
  for tpa in atpa do
    Result += Self.WorldToMM(me, tpa, radians);
end;

function TRSWalker.WorldToMM(atpa: T2DPointArray): T2DPointArray; overload;
begin
  Result := Self.WorldToMM(Self.GetMyPos(), atpa, Minimap.GetCompassAngle(False));
end;


function TRSWalker.WorldToMM(me: TPoint; dotFilter: TRSDotFilter; roll: Double = $FFFF): TRSDotFilter; overload;
var
  p: TPoint;
begin
  if (roll = $FFFF) then
    roll := Minimap.GetCompassAngle(False);

  if dotFilter.Circle <> [] then
  begin
    P := Self.WorldToMM(dotFilter.Circle.mean());
    Result.Circle := [P.X, P.Y, dotFilter.Circle.Radius];
  end;

  Result.TPA      := Self.WorldToMM(me, dotFilter.TPA, roll);
  Result.Inside   := dotFilter.Inside;
  Result.HasTimer := dotFilter.HasTimer;
  Result.Timer    := dotFilter.Timer;
end;

function TRSWalker.WorldToMM(dotFilter: TRSDotFilter; roll: Double = $FFFF): TRSDotFilter; overload;
begin
  Result := Self.WorldToMM(Self.GetMyPos(), dotFilter, roll);
end;

function TRSWalker.WorldToMM(me: TPoint; DotFilterArray: TRSDotFilterArray; roll: Double = $FFFF): TRSDotFilterArray; overload;
var
  i: Int32;
begin
  if (roll = $FFFF) then
    roll := Minimap.GetCompassAngle(False);

  for i := 0 to High(dotFilterArray) do
  begin
    if dotFilterArray[i].IsExpired() then
    begin
      Delete(dotFilterArray, i, 1);
      i -= 1;
      Continue;
    end;

    Result += Self.WorldToMM(me, dotFilterArray[i], roll);
  end;
end;

function TRSWalker.WorldToMM(dotFilterArray: TRSDotFilterArray; roll: Double = $FFFF): TRSDotFilterArray; overload;
var
  i: Int32;
begin
  for i := 0 to High(dotFilterArray) do
  begin
     if dotFilterArray[i].IsExpired() then
    begin
      Delete(dotFilterArray, i, 1);
      i -= 1;
      Continue;
    end;

    Result += Self.WorldToMM(Self.GetMyPos(), dotFilterArray[i], roll);
  end;
end;


(*
## TRSWalker.MakePointVisible
```pascal
function TRSWalker.MakePointVisible(p: TPoint): Boolean;
function TRSWalker.MakePointVisible(tpa: TPointArray): Boolean; overload;
```

Wrapper function used to attempt to make a Point visible on the MainScreen.

This are TRSWalker methods so they will exist both on TRSWalker and TRSWalker.
*)
function TRSWalker.MakePointVisible(p: TPoint): Boolean;
begin
  Result := Minimap.MakePointVisible(Self.WorldToMM(p));
end;

function TRSWalker.MakePointVisible(tpa: TPointArray): Boolean; overload;
begin
  Result := Minimap.MakePointVisible(Self.WorldToMM(Self.GetClosestPoint(tpa)));
end;

(*
## TRSWalker.GetCuboidMS
```pascal
function TRSWalker.GetCuboidMS(me, loc: TPoint; tile: Vector3 = [1, 1, 4]; Offset: Vector2 = [0, 0]): TPointArray;
function TRSWalker.GetCuboidMS(loc: TPoint; tile: Vector3 = [1, 1, 4]; Offset: Vector2 = [0, 0]): TPointArray; overload;
```

This are TRSWalker methods so they will exist both on TRSWalker and TRSWalker.

To understand what this does, you should read about **TRSMinimap.GetTileMS()** and **TPointArray.ConvexHull()** and understand what they do.
This calls **TRSMinimap.GetCuboidMS()** internally which in turn will use both methods above.

To put it simply, this will will first calculate a floor rectangle with **tile.Z**, or **height** if you prefer
of 0 and then calculate the top rectangle of the **tile.Z** you specified.

After this 2 rectangles are calculated a polygon is then made out of the two, resulting in a ConvexHull which is returned.

This is perfect to to get an accurate bounding polygon of objects and NPCs which you can use to accurately color search after.

The example below will show you how it could be used to retrieve an accurate player bounding polygon:

Example:
```pascal
Debug(RSW.GetCuboidMS([100, 100], [1, 1, 4], Offset));     //This will draw a polygon around the coordinate [100, 100].
```
*)
function TRSWalker.GetCuboidMS(me, loc: TPoint; shape: TRSMainScreenShape; offset: Vector2 = [0, 0]): TCuboidEx;
var
  angle: Double;
begin
  angle := Minimap.GetCompassAngle(False);
  loc   := Self.WorldToMM(me, loc, Angle);
  if not RSHeightMap.Disabled then
    shape.Tile.Z -= Self.GetHeightDiff(me, loc);
  Result := Minimap.GetCuboidMS(loc, shape, offset, angle);
end;

function TRSWalker.GetCuboidMS(loc: TPoint; shape: TRSMainScreenShape; offset: Vector2 = [0, 0]): TCuboidEx; overload;
begin
  Result := Self.GetCuboidMS(Self.GetMyPos(), loc, shape, offset);
end;

function TRSWalker.GetCuboidMS(me, loc: TPoint; tile: Vector3 = [1, 1, 4]; offset: Vector2 = [0, 0]): TCuboidEx; overload;
var
  Angle: Double;
begin
  Angle := Minimap.GetCompassAngle(False);
  loc   := Self.WorldToMM(me, loc, Angle);

  Result := Minimap.GetCuboidMS(loc, tile, Offset, Angle);
end;

function TRSWalker.GetCuboidMS(loc: TPoint; tile: Vector3 = [1, 1, 4]; offset: Vector2 = [0, 0]): TCuboidEx; overload;
begin
  Result := Self.GetCuboidMS(Self.GetMyPos(), loc, tile, Offset);
end;


(*
## TRSWalker.GetTileArrayMS
```pascal
function TRSWalker.GetTileArrayMS(me: TPoint; locArray: TPointArray; tile: Vector3 = [1, 1, 0]; Offset: Vector2 = [0, 0]): TRectArray;
function TRSWalker.GetTileArrayMS(locArray: TPointArray; tile: Vector3 = [1, 1, 0]; Offset: Vector2 = [0, 0]): TRectArray; overload;
```

This are wrapper functions to retrieve multiple tiles. Refer to SRL's TRSWalker.GetTileMSEx() and TRSWalker.GetTileMS() for more information.

This are TRSWalker methods so they will exist both on TRSWalker and TRSWalker.
*)
function TRSWalker.GetTileArrayMS(me: TPoint; locArray: TPointArray; shapeArray: TRSMainScreenShapeArray; offset: Vector2 = [0, 0]): TRectArray;
var
  angle, meHeight: Double;
  i: Int32;
  tmpShapes: TRSMainScreenShapeArray;
begin
  locArray := locArray.SortFrom(me);
  angle := Minimap.GetCompassAngle(False);
  SetLength(tmpShapes, Length(shapeArray));

  if not RSHeightMap.Disabled then
    meHeight := Self.GetHeight(me);

  tmpShapes := Copy(shapeArray);

  for i := 0 to High(locArray) do
  begin
    if not RSHeightMap.Disabled then
      tmpShapes[i].Tile.Z -= meHeight - Self.GetHeight(locArray[i]);

    locArray[i] := Self.WorldToMM(me, locArray[i], angle);

    Result += Minimap.GetTileMS(locArray[i], tmpShapes[i].Tile, offset, angle + tmpShapes[i].Angle);
  end;
end;

function TRSWalker.GetTileArrayMS(me: TPoint; locArray: TPointArray; shape: TRSMainScreenShape; offset: Vector2 = [0, 0]): TRectArray; overload;
var
  angle, meHeight: Double;
  i: Int32;
begin
  locArray := locArray.SortFrom(me);
  angle := Minimap.GetCompassAngle(False);
  if not RSHeightMap.Disabled then
    meHeight := Self.GetHeight(me);

  for i := 0 to High(locArray) do
  begin
    if not RSHeightMap.Disabled then
     shape.Tile.Z -= Self.GetHeightDiff(locArray[i]);
    locArray[i] := Self.WorldToMM(me, locArray[i], angle);

    Result += Minimap.GetTileMS(locArray[i], shape.Tile, offset, angle + shape.Angle);
  end;
end;

function TRSWalker.GetTileArrayMS(me: TPoint; locArray: TPointArray; tile: Vector3; offset: Vector2 = [0, 0]): TRectArray; overload;
var
  angle, meHeight: Double;
  i: Int32;
begin
  locArray := locArray.SortFrom(me);
  angle := Minimap.GetCompassAngle(False);
  if not RSHeightMap.Disabled then
    meHeight := Self.GetHeight(me);

  for i := 0 to High(locArray) do
  begin
    if not RSHeightMap.Disabled then
      tile.Z -= Self.GetHeightDiff(locArray[i]);
    locArray[i] := Self.WorldToMM(me, locArray[i], angle);

    Result += Minimap.GetTileMS(locArray[i], tile, offset, angle);
  end;
end;

function TRSWalker.GetTileArrayMS(locArray: TPointArray; tile: Vector3 = [1, 1, 0]; offset: Vector2 = [0, 0]): TRectArray; overload;
begin
  Result := Self.GetTileArrayMS(Self.GetMyPos(), locArray, tile, offset);
end;


(*
## TRSWalker.GetCuboidArrayMS
```pascal
function TRSWalker.GetCuboidArrayMS(me: TPoint; locArray: TPointArray; tile: Vector3 = [1, 1, 4]; Offset: Vector2 = [0, 0]): T2DPointArray;
function TRSWalker.GetCuboidArrayMS(locArray: TPointArray; tile: Vector3 = [1, 1, 4]; Offset: Vector2 = [0, 0]): T2DPointArray;
```

Gives you an array of mainscreen polygons. Read **Minimap.GetCuboidMS** for more information.

This are TRSWalker methods so they will exist both on TRSWalker and TRSWalker.

Example:
```pascal
TPA := Minimap.GetDots(ERSMinimapDot.Player);   //find all player dots and returns their coodinates.
Debug(Minimap.GetCuboidArrayMS(TPA, [2, 3, 5], [2, 2])); //This will draw a polygon that is 2 by 3 tiles and height 5 in the mainscreen where each NPC is.
```
*)
function TRSWalker.GetCuboidArrayMS(me: TPoint; locArray: TPointArray; shapeArray: TRSMainScreenShapeArray; Offset: Vector2 = [0, 0]): TCuboidExArray;
var
  angle, meHeight: Double;
  i: Int32;
  tmpArray: TPointArray;
  heightArray: TDoubleArray;
begin
  angle := Minimap.GetCompassAngle(False);
  tmpArray := Copy(locArray);
  SetLength(heightArray, Length(shapeArray));

  if not RSHeightMap.Disabled then
    meHeight := Self.GetHeight(me);

  for i := 0 to High(tmpArray) do
  begin
    if not RSHeightMap.Disabled then
      heightArray[i] -= meHeight - Self.GetHeight(locArray[i])
    else
      heightArray[i] := 0;
    tmpArray[i] := Self.WorldToMM(me, locArray[i], angle);
  end;

  Result := Minimap.GetCuboidArrayMSEx(tmpArray, shapeArray, heightArray, offset, angle);
end;

function TRSWalker.GetCuboidArrayMS(me: TPoint; locArray: TPointArray; shape: TRSMainScreenShape; offset: Vector2 = [0, 0]): TCuboidExArray; overload;
var
  angle, meHeight: Double;
  i: Int32;
  tmpArray: TPointArray;
  shapeArray: TRSMainScreenShapeArray;
  heightArray: TDoubleArray;
begin
  angle := Minimap.GetCompassAngle(False);
  tmpArray := Copy(locArray);

  if not RSHeightMap.Disabled then
    meHeight := Self.GetHeight(me);

  for i := 0 to High(tmpArray) do
  begin
    shapeArray += shape;
    if not RSHeightMap.Disabled then
      heightArray[i] := meHeight - Self.GetHeight(locArray[i])
    else
      heightArray[i] := 0;
    tmpArray[i] := Self.WorldToMM(me, locArray[i], angle);
  end;

  Result := Minimap.GetCuboidArrayMSEx(tmpArray, shapeArray, heightArray, offset, angle);
end;

function TRSWalker.GetCuboidArrayMS(me: TPoint; locArray: TPointArray; tile: Vector3 = [1, 1, 4]; Offset: Vector2 = [0, 0]): TCuboidExArray; overload;
var
  shape: TRSMainScreenShape;
begin
  shape := [tile, 0];
  Result := Self.GetCuboidArrayMS(me, locArray, shape, offset);
end;

function TRSWalker.GetCuboidArrayMS(locArray: TPointArray; tile: Vector3 = [1, 1, 4]; Offset: Vector2 = [0, 0]): TCuboidExArray; overload;
begin
  Result := Self.GetCuboidArrayMS(Self.GetMyPos(), locArray, tile, Offset);
end;


(*
## TRSWalker.GetMSPolygon
```pascal
function TRSWalker.GetMSPolygon(tpa: TPointArray): TPointArray;
function TRSWalker.GetMSPolygonArray(atpa: T2DPointArray): T2DPointArray;
```
This function converts a list of points to their respective points in the minimap.
This is extremely useful if you want to be sure you are within an area.
To make a polygon or a polygon array easily you can use Simba/Includes/WaspLib/tools/walkerpolygon.simba.

This are TRSWalker methods so they will exist both on TRSWalker and TRSWalker.

Example:
```pascal
Debug(RSW.GetMMPoly(TPA).Connect());    //This will draw your TPA on the minimap.
```
*)
function TRSWalker.GetMSPolygon(tpa: TPointArray): TPointArray;
begin
  Result := Minimap.PointsToMS(Self.WorldToMM(tpa));
end;

function TRSWalker.GetMSPolygonArray(atpa: T2DPointArray): T2DPointArray;
var
  angle: Double;
begin
  angle := Minimap.GetCompassAngle(False);
  atpa := Self.WorldToMM(Self.GetMyPos(), atpa, angle);
  Result := Minimap.ATPAToMS(atpa, angle);
end;

(*
## TRSWalker.InPoly
```pascal
function TRSWalker.InPoly(locArray: TPointArray): Boolean;
```

Checks if you are inside a polygon. If you need to debug the polygon check the example in TRSWalker.GetMMPoly.

This are TRSWalker methods so they will exist both on TRSWalker and TRSWalker.

*)
function TRSWalker.InPoly(locArray: TPointArray): Boolean;
begin
  Result := SRL.PointInPoly(Self.GetMyPos(), locArray);
end;


procedure TSRL.Setup(); override;
begin
  inherited;

  WALKER_DIR  := {$MACRO CURRENT_DIRECTORY};
  WALKER_MAP  := {$MACRO CURRENT_DIRECTORY} + 'map.png';
  WALKER_MAPS := {$MACRO CURRENT_DIRECTORY} + 'maps' + DirectorySeparator;
end;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;

  case Self.Mode of
    ERSClientMode.FIXED: RSHeightMap.MaxHeight := 70;
    else RSHeightMap.MaxHeight := 60;
  end;
end;
