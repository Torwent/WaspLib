(*
RSCacheParser
=============

RSCacheParser as the name implies is a record made to parse information from certain files that are part of the OSRS cache.

 - preferences.dat is where most client settings are stored.
 - preferences2.dat I have no idea? some values in address 00000020 seem to change after some times has passed randomly. (related to 6h log maybe!?!?)
 - random.dat in the user home directory seems to be a random identifier generated the first time you open a client if it doesn't exist.
    while it exists, it seems to never change unless the user deletes it.


.. Note:: For more information check this file: https://github.com/open-osrs/runelite/blob/dd4478eff7d90fcb3e85584171d5836809eb150a/runescape-client/src/main/java/ClientPreferences.java
*)

{$DEFINE WL_CACHEPARSER_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

(*
RSCacheParser
~~~~~~~~~~~~~
.. pascal::
  type RSCacheParser = record(TSRLBaseRecord) class var
    Disabled: Boolean;
    Directory: String;
    Preferences: String;
    Preferences2: String;
  end;

Type responsible for handling osrs cache parsing.
*)
type RSCacheParser = record(TSRLBaseRecord) class var
    Disabled: Boolean;
    Directory: String;
    Preferences: String;
    Preferences2: String;
  end;

(*
RSCacheParser.Setup
~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure RSCacheParser.Setup(); static;

Internal method called automatically simply by including WaspLib.
*)
procedure RSCacheParser.Setup(); static;
var
  dir: String;
  {$IFDEF WINDOWS}
  winDirs: TStringArray;
  {$ENDIF}
begin
  {$IFDEF WINDOWS}
  winDirs := [
    GetEnvironmentVariable('ONEDRIVE'),
    GetEnvironmentVariable('USERPROFILE'),
    GetEnvironmentVariable('HOMEPATH')
    ];

  for dir in winDirs do
  begin
    dir += DirectorySeparator + 'jagexcache' + DirectorySeparator;
    dir += 'oldschool' + DirectorySeparator + 'LIVE' + DirectorySeparator;
    if DirectoryExists(dir) then
      Break;
  end;
  {$ELSE}
    dir := GetEnvironmentVariable('HOME');
    dir += DirectorySeparator + 'jagexcache' + DirectorySeparator;
    dir += 'oldschool' + DirectorySeparator + 'LIVE' + DirectorySeparator;
  {$ENDIF}

  if DirectoryExists(dir) then
    RSCacheParser.Directory := dir
  else
    RSCacheParser.Disabled := True;
end;

(*
RSCacheParser.GetPreference
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.GetPreference(prefNumber: Int32 = 1): String; static;

Read the preference file specified.
*)
function RSCacheParser.GetPreference(prefNumber: Int32 = 1): String; static;
begin
  case prefNumber of
    1: Result := ReadFileContents(RSCacheParser.Directory + 'preferences.dat');
    2: Result := ReadFileContents(RSCacheParser.Directory + 'preferences2.dat');
  end;

  if Result = '' then
    RSCacheParser.Disabled := True;
end;

(*
RSCacheParser.Update
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.Update(): Boolean; static;

Method to check if the cache files were updated.
*)
function RSCacheParser.Update(prefNumber: Int32 = 0): Boolean; static;
var
  tmp1, tmp2: String;
begin
  case prefNumber of
    1:
    begin
      tmp1 := RSCacheParser.GetPreference(1);
      Result := RSCacheParser.Preferences <> tmp1;
    end;
    2:
    begin
      tmp2 := RSCacheParser.GetPreference(2);
      Result := RSCacheParser.Preferences2 <> tmp2;
    end;
    0:
    begin
      tmp1 := RSCacheParser.GetPreference(1);
      tmp2 := RSCacheParser.GetPreference(2);
      Result := (RSCacheParser.Preferences <> tmp1) or
                (RSCacheParser.Preferences2 <> tmp2);
    end;
  end;

  if Result then
  begin
    case prefNumber of
      1: RSCacheParser.Preferences := tmp1;
      2: RSCacheParser.Preferences2 := tmp2;
      0:
      begin
        RSCacheParser.Preferences := tmp1;
        RSCacheParser.Preferences2 := tmp2;
      end;
    end;
  end;
end;

(*
RSCacheParser.GetHexString
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.GetHexString(prefNumber: Int32 = 1): String; static;

Print the cache files as a hex string.

Example
-------

  WriteLn RSCacheParser.GetHexString(1);
*)
function RSCacheParser.GetHexString(prefNumber: Int32 = 1): String; static;
var
  pref, final, tmp: String;
  i: Int32;
begin
  RSCacheParser.Update();

  case prefNumber of
    1: pref := RSCacheParser.Preferences;
    2: pref := RSCacheParser.Preferences2;
    else Exit;
  end;

  for i := 1 to High(pref) do
  begin
    tmp := IntToHex(Byte(pref[i]));

    if Length(tmp) = 1 then
      tmp := '0' + tmp;

    final += tmp + ' ';
  end;

  Result := final;
end;

(*
RSCacheParser.Print
~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure RSCacheParser.Print(prefNumber: Int32 = 0); static;

Print the cache files as strings. This is only useful for debugging purposes.

Example
-------

  RSCacheParser.Print();
*)
procedure RSCacheParser.Print(prefNumber: Int32 = 0); static;
begin
  RSCacheParser.Update();

  if prefNumber = 0 then
  begin
    WriteLn RSCacheParser.GetHexString(1);
    WriteLn RSCacheParser.GetHexString(2);
  end
  else
    WriteLn RSCacheParser.GetHexString(prefNumber);
end;

(*
RSCacheParser.GetOptionsAmount
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.GetOptionsAmount(): Int32; static;

Returns the number of options saved in the cache. This is not very useful, AFAIK there's only 2 possible values for this: 0 and 10.
0 is only if you haven't accepted the EULA in the client.

Example
-------

  WriteLn RSCacheParser.GetOptionsAmount();
*)
function RSCacheParser.GetOptionsAmount(): Int32; static;
begin
  RSCacheParser.Update();

  if Length(RSCacheParser.Preferences) >= 1 then
    Result := Int32(RSCacheParser.Preferences[1]);
end;

(*
RSCacheParser.RoofsHidden
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.RoofsHidden(): Boolean; static;

Checks if the roofs are hidden.

Example
-------

  WriteLn RSCacheParser.RoofsHidden();
*)
function RSCacheParser.RoofsHidden(): Boolean; static;
begin
  RSCacheParser.Update();
  if Length(RSCacheParser.Preferences) >= 2 then
    Result := Boolean(RSCacheParser.Preferences[2]);
end;

(*
RSCacheParser.TitleMusicDisabled
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.TitleMusicDisabled(): Boolean; static;

Checks if the music is enabled in the login screen.

Example
-------

  WriteLn RSCacheParser.TitleMusicDisabled();
*)
function RSCacheParser.TitleMusicDisabled(): Boolean; static;
begin
  RSCacheParser.Update();
  if Length(RSCacheParser.Preferences) >= 3 then
    Result := Boolean(RSCacheParser.Preferences[3]);
end;

(*
RSCacheParser.WindowMode
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.WindowMode(): Int32; static;

Returns 1 for fixed mode and 2 for resizable mode. Resizable modern and resizable classic make no difference here.

Example
-------

  WriteLn RSCacheParser.WindowMode();
*)
function RSCacheParser.WindowMode(): Int32; static;
begin
  RSCacheParser.Update();
  if Length(RSCacheParser.Preferences) >= 4 then
    Result := Int32(RSCacheParser.Preferences[4]);
end;

(*
RSCacheParser.GetAuthenticatorAmount
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.GetAuthenticatorAmount(): Int32; static;

Returns the number of authenticators saved for the next 30 days. If this is more than 0, you will have 8 bytes for each of the saved authenticators.
This is important to know so we know where the saved username starts if we have saved authenticators.

Example
-------

  WriteLn RSCacheParser.GetAuthenticatorAmount();
*)
function RSCacheParser.GetAuthenticatorAmount(): Int32; static;
begin
  RSCacheParser.Update();
  if Length(RSCacheParser.Preferences) >= 5 then
    Result := Int32(RSCacheParser.Preferences[5]);
end;

(*
RSCacheParser.GetAuthenticators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.GetAuthenticators(): TStringArray; static;

Returns each authenticator saved in a TStringArray. Each string is 8 bytes like mentioned in RSCacheParser.GetAuthenticatorAmount() documentation.

Example
-------

  WriteLn RSCacheParser.GetAuthenticators();
*)
function RSCacheParser.GetAuthenticators(): TStringArray; static;
var
  i, j, savedAuths: Int32;
  str: String;
begin
  RSCacheParser.Update();
  savedAuths := RSCacheParser.GetAuthenticatorAmount();
  if savedAuths = 0 then
    Exit;

  for i := 0 to savedAuths - 1 do
  begin
    if Length(RSCacheParser.Preferences) >= (13 + i * 8) then
    begin
      for j := (6 + i * 8) to (13 + i * 8) do
        str += RSCacheParser.Preferences[j];
      Result += str;
      str := '';
    end;
  end;
end;

(*
RSCacheParser.GetUsernameIndex
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.GetUsernameIndex(): Int32; static;

Internal function that returns byte index where the username starts.
This is required because depending on wether we have authenticators saved or not, the bytes shift.
*)
function RSCacheParser.GetUsernameIndex(): Int32; static;
begin
  Result := 6 + RSCacheParser.GetAuthenticatorAmount() * 8;
end;

(*
RSCacheParser.GetUsername
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.GetUsername(): String; static;

Returns the saved username in the osrs cache. This is the username you clicked to save on the client when logging in.

Example
-------

  WriteLn RSCacheParser.GetUsername();
*)
function RSCacheParser.GetUsername(): String; static;
var
  i: Int32;
begin
  for i := RSCacheParser.GetUsernameIndex() to Length(RSCacheParser.Preferences) do
  begin
    if Byte(RSCacheParser.Preferences[i]) = 0 then
      Break;
    Result += RSCacheParser.Preferences[i];
  end;
end;

(*
RSCacheParser.UsernameEndIndex
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.UsernameEndIndex(): Int32; static;

Internal function used to get the index of the byte of where the username ends.
*)
function RSCacheParser.UsernameEndIndex(): Int32; static;
var
  i: Int32;
begin
  for i := RSCacheParser.GetUsernameIndex() to Length(RSCacheParser.Preferences) do
  begin
    if Byte(RSCacheParser.Preferences[i]) = 0 then
      Break;
  end;
  Result := i + 1;
end;

(*
RSCacheParser.HideUsername
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.HideUsername(): Boolean; static;

Returns true or false if we have the username hidden.

Example
-------

  WriteLn RSCacheParser.HideUsername();
*)
function RSCacheParser.HideUsername(): Boolean; static;
begin
  Result := Boolean(RSCacheParser.Preferences[RSCacheParser.UsernameEndIndex()]);
end;

(*
RSCacheParser.Brightness
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.Brightness(): Int32; static;

Returns the brightness value converted to a 0-100 value.

Example
-------

  WriteLn RSCacheParser.Brightness();
*)
function RSCacheParser.Brightness(): Int32; static;
var
  i: Int32;
begin
  i := RSCacheParser.UsernameEndIndex() + 1;
  if Length(RSCacheParser.Preferences) >= i then
    Result := (Int32(RSCacheParser.Preferences[i]) - 100) * -2;
end;

(*
RSCacheParser.MusicVolume
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.MusicVolume(): Int32; static;

Returns the music volume value converted to a 0-100 value.

Example
-------

  WriteLn RSCacheParser.MusicVolume();
*)
function RSCacheParser.MusicVolume(): Int32; static;
var
  i: Int32;
begin
  i := RSCacheParser.UsernameEndIndex() + 2;
  if Length(RSCacheParser.Preferences) >= i then
    Result := Round(Int32(RSCacheParser.Preferences[i]) / 2.55);
end;

(*
RSCacheParser.SoundEffectsVolume
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.SoundEffectsVolume(): Int32; static;

Returns the sound effects volume value converted to a 0-100 value.

Example
-------

  WriteLn RSCacheParser.SoundEffectsVolume();
*)
function RSCacheParser.SoundEffectsVolume(): Int32; static;
var
  i: Int32;
begin
  i := RSCacheParser.UsernameEndIndex() + 3;
  if Length(RSCacheParser.Preferences) >= i then
    Result := Round(Int32(RSCacheParser.Preferences[i]) / 1.27);
end;

(*
RSCacheParser.AreaSoundVolume
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.AreaSoundVolume(): Int32; static;

Returns the area sound volume value converted to a 0-100 value.

Example
-------

  WriteLn RSCacheParser.AreaSoundVolume();
*)
function RSCacheParser.AreaSoundVolume(): Int32; static;
var
  i: Int32;
begin
  i := RSCacheParser.UsernameEndIndex() + 4;
  if Length(RSCacheParser.Preferences) >= i then
    Result := Round(Int32(RSCacheParser.Preferences[i]) / 1.27);
end;

(*
RSCacheParser.Field1247
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.Field1247(): Int32; static;

I have absolutely no idea what this is. It's supposedly something, but AFAIK it's always 0.

Example
-------

  WriteLn RSCacheParser.Field1247();
*)
function RSCacheParser.Field1247(): Int32; static;
var
  i: Int32;
begin
  i := RSCacheParser.UsernameEndIndex() + 5;
  if Length(RSCacheParser.Preferences) >= i then
    Result := Int32(RSCacheParser.Preferences[i]);
end;

(*
RSCacheParser.DisplayFPS
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.DisplayFPS(): Boolean; static;

Returns true/false if we have Display FPS enabled.
Display FPS can be enabled by typing ::displayfps in game.

Example
-------

  WriteLn RSCacheParser.DisplayFPS();
*)
function RSCacheParser.DisplayFPS(): Boolean; static;
var
  i: Int32;
begin
  i := RSCacheParser.UsernameEndIndex() + 6;
  if Length(RSCacheParser.Preferences) >= i then
    Result := Boolean(RSCacheParser.Preferences[i]);
end;

(*
RSCacheParser.Field1238
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSCacheParser.Field1238(): Int32; static;

I have absolutely no idea what this is. It's supposedly something, but AFAIK it's always 0.

Example
-------

  WriteLn RSCacheParser.Field1238();
*)
function RSCacheParser.Field1238(): Int32; static;
var
  i: Int32;
begin
  i := RSCacheParser.UsernameEndIndex() + 7;
  if Length(RSCacheParser.Preferences) >= i then
    Result := Int32(RSCacheParser.Preferences[i]);
end;

begin
  RSCacheParser.Setup();
end;
