(*
ScriptForm
==========
This file is responsible for creating and managing WaspLib's forms.
*)
{$DEFINE WL_SCRIPTFORM_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

{$IFHASFILE credentials.simba}{$I credentials.simba}{$ENDIF}

const
  CREDENTIALS_FILE = AppPath + 'credentials.simba';

(*
RewriteCredentials
~~~~~~~~~~~~~~~~~~
.. pascal:: procedure RewriteCredentials();

Internal method used to rewrite the credentials.simba file.
This will use whatever is stored at the moment in **Login.Players**
*)
procedure RewriteCredentials();
  function _FilterDuplicatePlayers(players: array of TRSLoginPlayer): array of TRSLoginPlayer;
  var
    i, j: Int32;
    match: Boolean;
  begin
    for i := 0 to High(players) do
    begin
      for j := 0 to High(Result) do
      begin
        match := LowerCase(players[i].User) = LowerCase(Result[j].User);
        if match then
          Break;
      end;

      if not match then
        Result += players[i];
    end;

    if match then
      Login.PlayerIndex := j;
  end;

  function _BuildCredentials(): String;
  var
    player: TRSLoginPlayer;
    world: Int32;
  begin
    Result := 'begin'#13#10'';
    for player in Login.Players do
    begin
      Result += '  Login.AddPlayer(''' +
                  player.User + ''', ''' + player.Password + ''', ''' + player.Pin + ''', [';

      for world in player.Worlds do
      begin
        Result += ToStr(world);
        if world <> player.Worlds[High(player.Worlds)] then
          Result += ', ';
      end;

      Result += ']);'#13#10'';
    end;
    Result += 'end;';
  end;

begin
  Login.Players := _FilterDuplicatePlayers(Login.Players);

  try
    WriteFileContents(CREDENTIALS_FILE, _BuildCredentials());
  except
    WriteLn GetExceptionMessage();
    WriteLn 'It''s possible you lost your saved accounts!';
    WriteLn 'If you have issues with the Account Manager delete the following file:';
  end;
end;



type
  TScriptForm = record
    DPI: Int32;
    Size: TPoint;
    Form: TForm;
    PageControl: TPageControl;
    Tabs: array of TTabSheet;
    Start: TButton;
  end;

procedure TScriptForm.AddTab(caption: String);
var
  tab: TTabSheet;
begin
  if Self.PageControl = nil then
    Exit;

  tab.Create(Self.PageControl);

  tab.setCaption(caption);
  tab.SetTooltip(caption + ' settings.');

  caption := LowerCase(StringReplace(caption, ' ', '_', [rfReplaceAll]));

  tab.setName(caption);

  Self.Tabs += tab;
end;

procedure TScriptForm.AddTab(tab: TTabSheet); overload;
begin
  if Self.PageControl = nil then
    Exit;

  tab.setParent(Self.PageControl);
  Self.PageControl.InsertComponent(tab);

  Self.Tabs += tab;
end;


procedure TScriptForm.AddTabArray(captions: TStringArray);
var
  caption: String;
begin
  for caption in captions do
    Self.AddTab(caption);
end;


procedure TScriptForm.InsertTab(caption: String; index: Int32 = 0);
var
  tab: TTabSheet;
begin
  if Self.PageControl = nil then
    Exit;

  tab.Create(Self.PageControl);
  tab.setName(caption);
  tab.setCaption(caption);

  tab.SetTooltip(caption + ' settings.');

  Insert(tab, Self.Tabs, index);
end;

procedure TScriptForm.InsertTab(tab: TTabSheet; index: Int32 = 0); overload;
begin
  if Self.PageControl = nil then
    Exit;

  tab.setParent(Self.PageControl);
  Self.PageControl.InsertComponent(tab);

  Insert(tab, Self.Tabs, index);
end;


function TScriptForm.GetTab(index: Int32): TTabSheet;
begin
  Result := Self.Tabs[index];
end;

function TScriptForm.GetTab(caption: String; ignoreCase: Boolean = False): TTabSheet; overload;
var
  i: Int32;
begin
  if ignoreCase then
  begin
    caption := LowerCase(caption);

    for i := 0 to High(Self.Tabs) do
      if LowerCase(Self.Tabs[i].getCaption()) = caption then
        Exit(Self.Tabs[i]);

    Exit;
  end;

  for i := 0 to High(Self.Tabs) do
    if Self.Tabs[i].getCaption() = caption then
      Exit(Self.Tabs[i]);
end;


procedure TScriptForm.CreateAPISettings();
  type TScriptForm = TScriptForm;
  procedure TScriptForm._NewUUIDOnChange(sender: TObject);
  var
    newEdit, oldEdit: TEdit;
    font: TFont;
    new, old: String;
  begin
    newEdit := sender;
    oldEdit := Self.Form.GetChild('api_uuid_edit');
    font := newEdit.getFont();
    new := Trim(newEdit.getText());
    old := Trim(oldEdit.getText());

    if new = old then
      font.setColor($0088AA)
    else if ValidUUIDV4(new) then
      font.setColor($007F3F)
    else
      font.setColor($0000BF);

    newEdit.SetFont(font);
  end;

  procedure TScriptForm._CopyToClipboard(sender: TObject);
  var
    parent: TPanel;
    edit: TEdit;
    text: String;
  begin
    edit := sender;
    text := Trim(edit.getText());
    SetClipBoard(text);
    parent := edit.getParent();
    parent.SetFocus();
  end;

  procedure TScriptForm._UpdateUUID({$H-}sender: TObject);{$H+}
  var
    oldUUIDEdit, newUUIDEdit, oldPassEdit, newPassEdit: TEdit;
    new: String;
    password: String;
    success: Boolean;
    settings: TStringArray;
  begin
    newUUIDEdit := Self.Form.GetChild('api_new_uuid_edit');
    oldUUIDEdit := Self.Form.GetChild('api_uuid_edit');
    new := Trim(newUUIDEdit.getText());

    if new = Trim(oldUUIDEdit.getText()) then
      Exit;

    if not ValidUUIDV4(new) then
      Exit;

    if not InputQuery('Update UUID', 'Please enter the password of this UUID:', password) then
      Exit;

    StatsPayload.Setup('tmp');
    success := APIClient.CheckPassword(new, password);
    StatsPayload.Setup('');

    if MessageDlg('Update UUID', 'Are you sure?' + LINEENDING +
                  'This can''t be reversed!'     + LINEENDING +
                  'Backup your current UUID and PASSWORD if you are not sure!',
                  mtConfirmation, [mbYes, mbCancel]) = mrCancel then
      Exit;


    newPassEdit := Self.Form.GetChild('api_new_pass_edit');
    oldPassEdit := Self.Form.GetChild('api_pass_edit');

    APIClient.UUID := new;
    StatsPayload.Password := password;
    settings += 'APIClient.UUID := ''' + APIClient.UUID + ''';';
    settings += 'StatsPayload.Password := ''' + StatsPayload.Password + ''';';
    WriteConfigFile('uuid', settings);

    oldUUIDEdit.setCaption(new);
    oldPassEdit.setCaption(password);
    newUUIDEdit.Clear();
    newPassEdit.Clear();
  end;

  procedure TScriptForm._UpdatePassword({$H-}sender: TObject);{$H+}
  var
    oldEdit, newEdit: TEdit;
    new: String;
    success: Boolean;
  begin
    oldEdit := Self.Form.GetChild('api_pass_edit');
    newEdit := Self.Form.GetChild('api_new_pass_edit');
    new := Trim(newEdit.getText());

    if new = '' then
      Exit;

    StatsPayload.Setup('tmp');
    success := APIClient.UpdatePassword(APIClient.GetUUID(), StatsPayload.Password, new);
    StatsPayload.Setup('');

    if not success then
    begin
      newEdit.setCaption('Failed!');
      Exit;
    end;

    oldEdit.setCaption(new);
    newEdit.Clear();
  end;

  procedure TScriptForm._UserOnDone(sender: TObject);
  var
    user: TEdit;
  begin
    user := sender;
    StatsPayload.SetUsername(Trim(user.getText()));
  end;

var
  tab: TTabSheet;
  info, website: TLabel;
  uuid, newUUID, user, pass, newPass: TLabeledEdit;
  updateUUID, updatePass: TButton;
  fullWidth, w, space, y: Int32;
begin
  Self.AddTab('API Settings');
  tab := Self.Tabs[High(Self.Tabs)];

  fullWidth := Floor(Self.Size.X/10);
  space := Floor(fullWidth * 0.1);
  w := Floor(fullWidth * 3.7);
  y := Floor(Self.Size.Y/10);

  with info do
  begin
    Create(tab);
    SetCaption('Check live stats at: ');
    SetName('api_info_label');
    SetLeft(space);
    SetTop(y);
    SetWidth(GetTrueWidth());
  end;

  with website do
  begin
    Create(tab);
    SetCaption('https://waspscripts.com/stats');
    SetName('api_website_label');
    SetLeft(info.GetRight());
    SetTop(info.GetTop());
    SetWidth(GetTrueWidth());
    setOnClick(@OpenLink);
    setCursor(crHandPoint);
  end;

  with uuid do
  begin
    Create(tab);
    SetCaption('WaspStats UUID:');
    SetName('api_uuid');
    SetLeft(space);
    SetTop(y + Caption.AdjustToDPI(50));
    SetWidth(w);
    SetText(APIClient.UUID);
    Edit.SetOnClick(@Self._CopyToClipboard);
    Edit.SetCursor(crHandPoint);
    Edit.setReadOnly(True);
    SetTooltip('You WaspStats UUID. This is your identifier.' + LINEENDING + 'If you change it and lose it, you will lose access to this WaspStats account.' + LINEENDING + LINEENDING + 'Click to copy to clipboard!');
  end;

  with newUUID do
  begin
    Create(tab);
    SetCaption('WaspStats new UUID (restore old UUID):');
    SetName('api_new_uuid');

    SetTooltip('You should not change this if you don''t know what it is.'
    + LINEENDING + 'Use it to restore an old Stats account.' + LINEENDING
    + LINEENDING + 'Only valid UUID v4 are accepted.');

    SetLeft(w + space * 2);
    SetTop(uuid.GetTop());
    SetWidth(w);
    SetMaxLength(36);
    Edit.setOnChange(@Self._NewUUIDOnChange);
  end;

  with updateUUID do
  begin
    Create(tab);
    SetCaption('Update UUID');
    SetName('update_uuid_button');
    SetLeft(w * 2 + space * 3);
    SetTop(uuid.GetBottom() - GetHeight());
    setWidth(fullWidth * 2);
    setOnClick(@Self._UpdateUUID);
  end;

  with pass do
  begin
    Create(tab);
    SetCaption('WaspStats Password:');
    SetName('api_pass');
    SetLeft(uuid.getLeft());
    SetTop(uuid.GetBottom());
    SetWidth(w);
    SetText(StatsPayload.Password);
    Edit.SetOnClick(@Self._CopyToClipboard);
    Edit.SetCursor(crHandPoint);
    Edit.setReadOnly(True);
    SetTooltip('You WaspStats UUID. This is your identifier.' + LINEENDING + 'If you change it and lose it, you will lose access to this WaspStats account.' + LINEENDING + LINEENDING + 'Click to copy to clipboard!');
  end;

  with newPass do
  begin
    Create(tab);
    SetCaption('WaspStats New Password:');
    SetName('api_new_pass');
    SetLeft(newUUID.getLeft());
    SetTop(pass.GetTop());
    SetWidth(w);
  end;

  with updatePass do
  begin
    Create(tab);
    SetCaption('Update Password');
    SetName('update_pass_button');
    SetLeft(w * 2 + space * 3);
    SetTop(pass.GetBottom() - GetHeight());
    setWidth(fullWidth * 2);
    setOnClick(@Self._UpdatePassword);
  end;

  with user do
  begin
    Create(tab);
    SetCaption('WaspStats Username:');
    SetName('api_user');
    SetLeft(uuid.getLeft());
    SetTop(pass.GetBottom());
    SetWidth(w);
    SetText(StatsPayload.Username);
    SetTooltip('Your WaspStats displayed username.');
    Edit.setOnEditingDone(@Self._UserOnDone);
  end;
end;

procedure TScriptForm.CreateAccountManager();
  type TScriptForm = TScriptForm;
   //This doesn't have to clutter things outside.

  procedure TScriptForm._ClearInputs({$H-}sender: TObject);{$H+}
  var
    edit: TCustomEdit;
  begin
    edit := Self.Form.GetChild('am_user_edit');
    edit.Clear();

    edit := Self.Form.GetChild('am_pass_edit');
    edit.Clear();

    edit := Self.Form.GetChild('am_pin_edit');
    edit.Clear();

    edit := Self.Form.GetChild('am_worlds_memo');
    edit.Clear();
  end;

  procedure TScriptForm._FillInputs({$H-}sender: TObject);{$H+}
  var
    idx, i: Int32;
    worldsStr: String;
    user, pass, pin: TEdit;
    worlds: TMemo;
  begin
    idx := Login.PlayerIndex;

    user := Self.Form.GetChild('am_user_edit');
    pass := Self.Form.GetChild('am_pass_edit');
    pin := Self.Form.GetChild('am_pin_edit');
    worlds := Self.Form.GetChild('am_worlds_memo');

    user.SetText(Login.Players[idx].User);
    pass.setText(Login.Players[idx].Password);
    pin.setText(Login.Players[idx].Pin);

    for i := 0 to High(Login.Players[idx].Worlds) do
    begin
      worldsStr += ToStr(Login.Players[idx].Worlds[i]);
      if i < High(Login.Players[idx].Worlds) then
        worldsStr += ', ';
    end;

    worlds.SetText(worldsStr);
  end;

  procedure TScriptForm._ReloadSelector({$H-}sender: TObject);{$H+}
  var
    selector: TComboBox;
    hasPlayers: Boolean;
    save, delete: TButton;
    player: TRSLoginPlayer;
  begin
    selector := Self.Form.GetChild('am_selector_combobox');
    selector.Clear();

    hasPlayers := Login.Players <> [];
    selector.SetEnabled(hasPlayers);
    save := Self.Form.GetChild('am_save_button');
    delete := Self.Form.GetChild('am_delete_button');

    save.SetEnabled(hasPlayers);
    delete.SetEnabled(hasPlayers);

    for player in Login.Players do
      selector.getItems().Add(player.User);

    if hasPlayers then
      selector.SetItemIndex(Login.PlayerIndex);
  end;


  procedure TScriptForm._SelectorOnChange(sender: TObject);
  var
    i: Int32;
    selector: TComboBox;
    edit, sleepHour, sleepLength: TEdit;
    trackbar: TTrackBar;
  begin
    selector := Self.Form.GetChild('am_selector_combobox');
    edit := Self.Form.GetChild('ab_biohash_edit');
    if edit = nil then
      Exit;
    trackbar := Self.Form.GetChild('ab_biohash_trackbar');
    sleepHour   := Self.Form.GetChild('ab_sleep_hour_edit');
    sleepLength := Self.Form.GetChild('ab_sleep_length_edit');

    i := selector.GetItemIndex();
    if i = -1 then
    begin
      Login.PlayerIndex := 0;
      Self._ClearInputs(sender);
    end
    else if (i > High(Login.Players)) then
    begin
      Login.PlayerIndex := i;
      Self._ClearInputs(sender);
    end
    else
    begin
      Login.PlayerIndex := i;
      Self._FillInputs(sender);
    end;

    BioHash := 0;
    Antiban.SetupBiometrics();

    edit.setText(FormatFloat('0.000000000000000', BioHash));

    Antiban.SetSleepHour();
    Antiban.SetSleepLength();

    sleepHour.SetText(WLSettings.Sleep.Hour);
    sleepLength.SetText(ToStr(WLSettings.Sleep.Length / ONE_HOUR));
  end;

  procedure TScriptForm._OnAddClick(sender: TObject);
  var
    user, pass, pin: TEdit;
    worlds: TMemo;
    worldsArray: TIntegerArray;
  begin
    user := Self.Form.GetChild('am_user_edit');
    pass := Self.Form.GetChild('am_pass_edit');
    pin  := Self.Form.GetChild('am_pin_edit');
    worlds := Self.Form.GetChild('am_worlds_memo');

    if user.IsEmpty() then
    begin
      Self._ClearInputs(sender);
      Exit;
    end;

    worldsArray := worlds.GetIntegerArray(301, 600);

    Login.Players += [user.GetText(), pass.GetText(), pin.GetText(), worldsArray];
    Login.PlayerIndex := High(Login.Players);

    RewriteCredentials();
    Self._ReloadSelector(sender);
    Self._SelectorOnChange(sender);
  end;

  procedure TScriptForm._OnSaveClick(sender: TObject);
  var
    selector: TComboBox;
    user, pass, pin: TEdit;
    worlds: TMemo;
    worldsArray: TIntegerArray;
    i: Int32;
    player: TRSLoginPlayer;
  begin
    selector := Self.Form.GetChild('am_selector_combobox');
    user := Self.Form.GetChild('am_user_edit');
    pass := Self.Form.GetChild('am_pass_edit');
    pin  := Self.Form.GetChild('am_pin_edit');
    worlds := Self.Form.GetChild('am_worlds_memo');

    if user.IsEmpty() then
    begin
      Self._ClearInputs(sender);
      Exit;
    end;

    i := selector.getItemIndex();
    if i > High(Login.Players) then
    begin
      Self._OnAddClick(sender);
      Exit;
    end;

    worldsArray := worlds.GetIntegerArray(301, 600);

    player := [user.GetText(), pass.GetText(), pin.GetText(), worldsArray];

    if i = -1 then
      Login.Players += player
    else
      Login.Players[i] := player;

    RewriteCredentials();
    Self._ReloadSelector(sender);
  end;

  procedure TScriptForm._OnDeleteClick(sender: TObject);
  var
    selector: TComboBox;
    i: Int32;
  begin
    selector := Self.Form.GetChild('am_selector_combobox');
    i := selector.getItemIndex();

    if i > High(Login.Players) then
      Exit;

    Delete(Login.Players, i, 1);
    Login.PlayerIndex -= 1;

    Self._ClearInputs(sender);

    RewriteCredentials();
    Self._ReloadSelector(sender);
    Self._SelectorOnChange(sender);
  end;

var
  tab: TTabSheet;
  selector: TLabeledCombobox;
  addButton, saveButton, deleteButton:  TButton;
  user, pass, pin: TLabeledEdit;
  worlds: TLabeledMemo;
  fullWidth, w, space, passW, pinW, y: Int32;
begin
  Self.AddTab('Account Manager');
  tab := Self.Tabs[High(Self.Tabs)];

  fullWidth := Floor(Self.Size.X/2);
  space := Floor(fullWidth * 0.1);
  w := fullWidth - (space * 2);

  passW := Floor(w * 0.6);
  pinW := Floor(w * 0.3);

  y := TControl.AdjustToDPI(5);

  with selector do
  begin
    Create(tab);
    SetCaption('Current account:');
    SetName('am_selector');
    SetLeft(space);
    SetTop(y);
    SetStyle(csDropDownList);
    SetWidth(w);
    ComboBox.setOnChange(@Self._SelectorOnChange);
  end;

  with user do
  begin
    Create(tab);
    SetCaption('Username:');
    SetName('am_user');
    SetLeft(space);
    SetTop(selector.GetBottom() + Round(2 * Self.DPI / 96));
    SetWidth(w);
  end;

  with pass do
  begin
    Create(tab);
    SetCaption('Password:');
    SetName('am_pass');
    SetLeft(space);
    SetTop(user.GetBottom() + Round(2 * Self.DPI / 96));
    SetWidth(passW);
    SetPasswordChar('*');
  end;

  with pin do
  begin
    Create(tab);
    SetCaption('Bank pin:');
    SetName('am_pin');
    SetLeft(selector.GetRight() - pinW);
    SetTop(pass.GetTop());
    SetWidth(pinW);
    SetPasswordChar('*');
    SetMaxLength(4);
    Edit.SetOnKeyPress(@Edit.NumberField);
  end;

  with worlds do
  begin
    Create(tab);
    SetCaption('Worlds (separated by commas):');
    SetName('am_worlds');
    SetLeft(fullWidth + space);
    SetTop(selector.GetTop());
    SetHeight(pass.GetBottom());
    SetWidth(w);
    Memo.setOnKeyPress(@Memo.NumberArrayField);
  end;

  fullWidth := Floor(Self.Size.X/5);
  space := Floor(fullWidth * 0.1);
  w := fullWidth - (space * 2);
  y := Size.Y - Floor(Self.Size.Y/2);

  with addButton do
  begin
    Create(tab);
    SetCaption('Add');
    SetName('am_add_button');
    SetLeft(fullWidth + space);
    SetTop(y);
    SetWidth(w);
    SetHeight(TControl.AdjustToDPI(25));
    setOnClick(@Self._OnAddClick);
  end;

  with saveButton do
  begin
    Create(tab);
    SetCaption('Save');
    SetName('am_save_button');
    SetLeft(fullWidth * 2 + space);
    SetTop(y);
    SetWidth(w);
    SetHeight(TControl.AdjustToDPI(25));
    setOnClick(@Self._OnSaveClick);
  end;

  with deleteButton do
  begin
    Create(tab);
    SetCaption('Delete');
    SetName('am_delete_button');
    SetLeft(fullWidth * 3 + space);
    SetTop(y);
    SetWidth(w);
    SetHeight(TControl.AdjustToDPI(25));
    setOnClick(@Self._OnDeleteClick);
  end;

  Self._ReloadSelector(selector.ComboBox);
  Self._SelectorOnChange(selector.ComboBox);
end;

procedure TScriptForm.CreateAntibanManager();
  type TScriptForm = TScriptForm;

  procedure TScriptForm._BioHashOnChange(sender: TObject);
  var
    bar: TTrackBar;
    edit: TEdit;
    value: Double;
    str: String;
  begin
    edit := sender;
    bar := Self.Form.GetChild('ab_biohash_trackbar');

    str := edit.getText();
    if not str.IsFloat() then
    begin
      BioHash := 0.000000000000001;
      edit.setText('0.000000000000001');
      bar.setPosition(0);
      Exit;
    end;

    value := StrToFloat(str);
    bar.setPosition(Trunc(value * 10));
    edit.SetText(str);
  end;

  procedure TScriptForm._BarOnChange(sender: TObject);
  var
    bar: TTrackBar;
    edit: TEdit;
    value: Double;
    str: String;
  begin
    bar := sender;
    edit := Self.Form.GetChild('ab_biohash_edit');

    value := bar.getPosition() * 0.111111111111111;
    if value = 0 then
      value += 0.000000000000001;

    if value = 1 then
      value -= 0.000000000000001;

    BioHash := value;
    str := FormatFloat('0.000000000000000', value);
    edit.SetText(str);
  end;

  procedure TScriptForm._ABOnChange(sender: TObject);
  var
    ab, camera, mouse, chat, gametabs, bank: TCheckBox;
    checked: Boolean;
  begin
    ab := sender;
    checked := ab.IsChecked();

    camera   := Self.Form.GetChild('camera_group_checkbox');
    mouse    := Self.Form.GetChild('mouse_group_checkbox');
    chat     := Self.Form.GetChild('chat_group_checkbox');
    gametabs := Self.Form.GetChild('gametabs_group_checkbox');
    bank     := Self.Form.GetChild('bank_group_checkbox');

    camera.setEnabled(checked);
    mouse.setEnabled(checked);
    chat.setEnabled(checked);
    gametabs.setEnabled(checked);
    bank.setEnabled(checked);

    if checked then
    begin
      WLSettings.Antiban.Camera   :=  camera.IsChecked();
      WLSettings.Antiban.Mouse    :=  mouse.IsChecked();
      WLSettings.Antiban.Chat     :=  chat.IsChecked();
      WLSettings.Antiban.GameTabs :=  gametabs.IsChecked();
      WLSettings.Antiban.Bank     :=  bank.IsChecked();
    end
    else
    begin
      WLSettings.Antiban.Camera   :=  False;
      WLSettings.Antiban.Mouse    :=  False;
      WLSettings.Antiban.Chat     :=  False;
      WLSettings.Antiban.GameTabs :=  False;
      WLSettings.Antiban.Bank     :=  False;
    end;
  end;

  procedure TScriptForm._GroupOnChange(sender: TObject);
  var
    checkbox: TCheckBox;
  begin
    checkbox := sender;
    case checkbox.getName() of
      'camera_group_checkbox': WLSettings.Antiban.Camera := checkbox.IsChecked();
      'mouse_group_checkbox': WLSettings.Antiban.Mouse := checkbox.IsChecked();
      'chat_group_checkbox': WLSettings.Antiban.Chat := checkbox.IsChecked();
      'gametabs_group_checkbox': WLSettings.Antiban.GameTabs := checkbox.IsChecked();
      'bank_group_checkbox': WLSettings.Antiban.Bank := checkbox.IsChecked();
    end;
  end;

  procedure TScriptForm._BreaksOnChange(sender: TObject);
  var
    breaks: TCheckBox;
    checked: Boolean;
  begin
    breaks := sender;
    checked := breaks.IsChecked();

    WLSettings.Breaks := checked;
  end;

  procedure TScriptForm._SleepsOnChange(sender: TObject);
  var
    sleeps: TCheckBox;
    sleepHour, sleepLength: TEdit;
    checked: Boolean;
  begin
    sleeps := sender;
    checked := sleeps.IsChecked();

    sleepHour   := Self.Form.GetChild('ab_sleep_hour_edit');
    sleepLength := Self.Form.GetChild('ab_sleep_length_edit');

    sleepHour.setEnabled(checked);
    sleepLength.setEnabled(checked);
    WLSettings.Sleep.Enabled := checked;
  end;

  procedure TScriptForm._SleepHourOnChange(sender: TObject);
  const
    REGEX = '(?:[01]\d|2[0-3])([:.\-_\ \''])?(?:[0-5]\d)([:.\-_\ \''])?(?:[0-5]\d)';
  var
    edit: TEdit;
    text: String;
  begin
    edit := sender;
    text := edit.GetText();

    if not ExecRegExpr(REGEX, text) then
    begin
      text := WLSettings.Sleep.HourOverride;
      edit.setText(text);
    end;

    WLSettings.Sleep.HourOverride := text;
    WLSettings.Sleep.Hour := WLSettings.Sleep.HourOverride;
  end;

  procedure TScriptForm._SleepLengthOnChange(sender: TObject);
  var
    edit: TEdit;
    len: Single;
  begin
    edit := sender;
    len := StrToFloat(edit.GetText());

    WLSettings.Sleep.Length := len;
    WLSettings.Sleep.LengthOverride := len;
  end;

var
  tab: TTabSheet;
  bioPanel: TPanel;
  fullWidth, w, space, y: Int32;
  bioEdit, sleepHour, sleepLength: TLabeledEdit;
  bar: TTrackBar;
  antibanGroup: TCheckCheckGroup;
  breaks, sleeps: TLabeledCheckBox;
  tmp: TCheckBox;
begin
  Self.AddTab('Antiban Manager');
  tab := Self.Tabs[High(Self.Tabs)];

  fullWidth := Self.Size.X;
  space := Floor(fullWidth * 0.1);
  w := fullWidth - (space * 2);
  y := Floor(Self.Size.Y/6);

  with bioPanel do
  begin
    Create(tab);
    SetName('ab_biohash_panel');
    SetTop(10);
    SetLeft(space);
    SetHeight(y);
    SetWidth(w);
    setCaption('');
    setBevelWidth(0);
  end;

  with bioEdit do
  begin
    Create(bioPanel);
    SetLeft(Round(w/3));
    SetWidth(Round(w/4));
    SetCaption('BioHash:');
    SetName('ab_biohash');
    SetMaxLength(17);
    Edit.setOnKeyPress(@Edit.NumberField);
    Edit.setOnChange(@Self._BioHashOnChange);
  end;

  with bar do
  begin
    Create(bioPanel);
    SetName('ab_biohash_trackbar');
    SetMin(0);
    SetMax(9);
    setAlign(alBottom);
    SetTooltip('You can adjust your biohash with this trackbar, however, the default is recommended.');
    setOnChange(@Self._BarOnChange);
  end;

  fullWidth := Floor(Self.Size.X / 3);
  space := Floor(fullWidth * 0.3);
  w := fullWidth - (space * 2);
  y := Floor(Self.Size.Y/6);

  with antibanGroup do
  begin
    Create(tab);
    SetCaption('Antiban');
    SetTooltip('Antiban settings.');
    SetTop(TControl.AdjustToDPI(100));
    SetLeft(space);
    AddItem('Camera');
    AddItem('Mouse');
    AddItem('Chat');
    AddItem('GameTabs');
    AddItem('Bank');

    SetCheckedChild(WLSettings.Antiban.Camera, 'camera_group');
    SetCheckedChild(WLSettings.Antiban.Mouse, 'mouse_group');
    SetCheckedChild(WLSettings.Antiban.Chat, 'chat_group');
    SetCheckedChild(WLSettings.Antiban.GameTabs, 'gametabs_group');
    SetCheckedChild(WLSettings.Antiban.Bank, 'bank_group');

    tmp := GetChildCheckBox('camera_group');
    tmp.setOnChange(@Self._GroupOnChange);
    tmp := GetChildCheckBox('mouse_group');
    tmp.setOnChange(@Self._GroupOnChange);
    tmp := GetChildCheckBox('chat_group');
    tmp.setOnChange(@Self._GroupOnChange);
    tmp := GetChildCheckBox('gametabs_group');
    tmp.setOnChange(@Self._GroupOnChange);
    tmp := GetChildCheckBox('bank_group');
    tmp.setOnChange(@Self._GroupOnChange);

    CheckBox.setOnChange(@Self._ABOnChange);
    SetChecked(WLSettings.Antiban.Enabled);
  end;

  with breaks do
  begin
    Create(tab);
    SetCaption('Short breaks');
    SetLeft(fullWidth + space);
    SetTop(antibanGroup.GetTop());
    SetChecked(WLSettings.Breaks);
    CheckBox.setOnChange(@Self._BreaksOnChange);
  end;

  with sleeps do
  begin
    Create(tab);
    SetCaption('Sleep breaks');
    SetLeft(fullWidth * 2 + space);
    SetTop(antibanGroup.GetTop());
    CheckBox.setOnChange(@Self._SleepsOnChange);
    SetChecked(WLSettings.Sleep.Enabled);
  end;

  with sleepHour do
  begin
    Create(tab);
    SetLeft(sleeps.GetLeft() + TControl.AdjustToDPI(5));
    SetWidth(w);
    SetTop(sleeps.GetBottom() + TControl.AdjustToDPI(5));
    SetCaption('Sleep hour:');
    SetName('ab_sleep_hour');
    SetMaxLength(8);
    //Edit.setOnKeyPress(@Edit.NumberField);
    Edit.setOnChange(@Self._SleepHourOnChange);
    SetText(WLSettings.Sleep.Hour);
  end;

  with sleepLength do
  begin
    Create(tab);
    SetLeft(sleepHour.GetLeft());
    SetWidth(w);
    SetTop(sleepHour.GetBottom() + TControl.AdjustToDPI(5));
    SetCaption('Sleep length (hours):');
    SetName('ab_sleep_length');
    Edit.setOnKeyPress(@Edit.NumberField);
    Edit.setOnChange(@Self._SleepLengthOnChange);
    SetText(ToStr(WLSettings.Sleep.Length / ONE_HOUR));
  end;
end;

procedure TScriptForm.CreateConsumableSettings(consumableType: ERSConsumable);
var
  typeStr: String;
  tab: TTabSheet;
  item: TRSItem;
  strArray: TStringArray;
  info: TLabel;
  minPoints, consumableAmount: TLabeledEdit;
  consumableSelector: TLabeledCombobox;
  fullWidth, w, space, y: Int32;
begin
  fullWidth := Floor(Self.Size.X/3);
  space := Floor(fullWidth * 0.1);
  w := Floor(fullWidth - space * 2);
  y := Floor(Self.Size.Y/2.5);

  case consumableType of
    FOOD_CONSUMABLE:
      begin
        typeStr := 'Food';
        for item in FOOD_ARRAY do
          strArray += ToStr(Item);
      end;

    PRAYER_CONSUMABLE:
      begin
        typeStr := 'Prayer';
        for Item in PRAYER_ARRAY do
          strArray += ToStr(Item);
      end;

    ENERGY_CONSUMABLE:
      begin
        typeStr := 'Energy';
        for Item in ENERGY_ARRAY do
          strArray += ToStr(Item);
      end;

    BOOST_CONSUMABLE:
      begin
        typeStr := 'Boost';
        for Item in BOOST_ARRAY do
          strArray += ToStr(Item);
      end;
  end;

  Self.AddTab(typeStr + ' Manager');
  tab := Self.Tabs[High(Self.Tabs)];

  with info do
  begin
    Create(tab);
    SetTop(TControl.AdjustToDPI(20));
    SetLeft(space);
    setCaption('Things to keep in mind about WaspLib''s ' + typeStr +
               ' Handler:' + LINEENDING + LINEENDING +
               '- Auto mode will use anythig it recognizes available. It only recognizes items in the list.' +
               LINEENDING +
               '- Auto mode has it''s own order of preference, which might not match yours. It''s the same order as the list.' +
               LINEENDING +
               '- Auto mode preference order can be overriden by starting with an item from the list in your inventory.' +
               LINEENDING +
               '- "Drink/Eat at" and "Withdraw ' + typeStr + ' amount" are dynamic and have some variance to it.' +
               LINEENDING +
               '    - This variance is not a flat rate, it varies both depending on input and your BioHash.' +
               LINEENDING +
               '    - For "Eat/Drink" you can expect it to:' +
               LINEENDING +
               '        - Vary aproximately between 20% and 40% on lower values, e.g. 10.' +
               LINEENDING +
               '        - Vary aproximately between 5% and 20% at higher values e.g. 80.'
    );
  end;

  with consumableSelector do
  begin
    Create(tab);
    SetCaption(typeStr + ' type: (empty=auto)');
    SetName('cm_' + typeStr  + '_selector');
    SetLeft(space);
    SetTop(y);
    SetWidth(w);
    SetStyle(csDropDownList);
    AddItemArray(strArray);
  end;

  with minPoints do
  begin
    Create(tab);
    if consumableType = BOOST_CONSUMABLE then
      SetCaption('Drink/Eat every (in minutes):')
    else
      SetCaption('Drink/Eat at:');
    SetName('cm_' + typeStr + '_minimum');
    SetLeft(fullWidth + space);
    SetTop(y);
    SetWidth(w);
    if consumableType = BOOST_CONSUMABLE then
      SetText('5')
    else
      SetText('50');
    Edit.setOnKeyPress(@Edit.NumberField);
  end;

  if Self.Form.GetChild('bank_settings') <> nil then
    with consumableAmount do
    begin
      Create(tab);
      SetCaption('Withdraw ' + LowerCase(typeStr) + ' amount:');
      SetName('cm_' + typeStr + '_amount');
      SetLeft(fullWidth * 2 + space);
      SetTop(y);
      SetWidth(w);
      SetText('8');
      Edit.setOnKeyPress(@Edit.NumberField);
    end;
end;

procedure TScriptForm.CreateBankSettings();
  type TScriptForm = TScriptForm;

  procedure TScriptForm._FormOnShow(sender: TObject);
  var
    form: TForm;
    combobox: TComboBox;
    imgBox: TSimbaImageBox;
  begin
    form := sender;
    combobox := form.GetChild('bank_selector_combobox');
    imgBox := form.GetChild('map_selector');
    imgBox.BackgroundChanged();

    imgBox.MoveTo(8100, 2500);
    imgBox.Update();
  end;

  procedure TScriptForm._BankOnChange(sender: TObject);
  var
    combobox: TComboBox;
  begin
    combobox := sender;
    WLSettings.BankLocation := EWLBankLocation(combobox.getItemIndex());
  end;

  procedure TScriptForm._ImgBoxOnClick(sender: TObject);
  var
    imgBox: TSimbaImageBox;
  begin
    imgBox := sender;

    imgBox.MoveTo(4000, 2000);
    imgBox.Update();

  end;

var
  tab: TTabSheet;
  bankSelector: TLabeledCombobox;
  path: String;
  bmp: TMufasaBitmap;
  imgBox: TSimbaImageBox;
  fullWidth, w, space, x, y: Int32;
begin
  Self.Form.setOnShow(@Self._FormOnShow);

  Self.AddTab('Bank Settings');
  tab := Self.Tabs[High(Self.Tabs)];

  x := Floor(Self.Size.X/2);

  fullWidth := Floor(Self.Size.X/3);
  space := Floor(fullWidth * 0.1);
  w := Floor(fullWidth - space * 2);
  y := Floor(Self.Size.Y * 0.03);

  with bankSelector do
  begin
    Create(tab);
    SetCaption('Select your bank: ');
    SetName('bank_selector');
    SetLeft(space);
    SetTop(y);
    SetWidth(w);
    SetStyle(csDropDownList);
    AddItemArray(EWLBankLocation.GetStrings());
    SetItemIndex(Ord(WLSettings.BankLocation));
    ComboBox.SetOnChange(@Self._BankOnChange);
  end;

  path := INCLUDEPATH + 'WaspLib' + DIRECTORYSEPARATOR + 'osr' +
          DIRECTORYSEPARATOR + 'walker' + DIRECTORYSEPARATOR + 'map.png';

  bmp := TRSWalkerMap.InternalLoadMap(path);

  with imgBox do
  begin
    Create(tab);
    SetName('map_selector');
    SetLeft(space);
    SetTooltip('Right Click + Drag to move');
    SetTop(y + TControl.AdjustToDPI(40));
    SetHeight(Round(Self.Size.Y * 0.77));
    SetWidth(fullWidth * 3 - space * 2);
    GetBackground().LoadFromMufasaBitmap(bmp);
    setOnClick(@Self._ImgBoxOnClick);
  end;

  bmp.Free();
end;



procedure TScriptForm.CreateLimitSettings(const owner: TControl);
  type TScriptForm = TScriptForm;

  procedure TScriptForm._ActionLimitOnDone(sender: TObject);
  var
    edit: TEdit;
    str: String;
  begin
    edit := sender;
    str := edit.getText();

    if str = '' then
      str := '-1';

    WLSettings.MaxActions := StrToInt(str);
    if WLSettings.MaxActions < -1 then
      WLSettings.MaxActions := -1;

    edit.setText(IntToStr(WLSettings.MaxActions));
  end;

  procedure TScriptForm._TimeLimitOnDone(sender: TObject);
  var
    edit: TEdit;
    str: String;
  begin
    edit := sender;
    str := edit.getText();

    if str = '' then
      str := '-1';

    WLSettings.MaxTime := StrToInt(str);
    if WLSettings.MaxTime < -1 then
      WLSettings.MaxTime := -1;

    edit.setText(IntToStr(WLSettings.MaxTime));
  end;

var
  limitPanel: TPanel;
  actionLimit, timeLimit: TLabeledEdit;
  fullWidth, w, space, y: Int32;
begin
  with limitPanel do
  begin
    Create(owner);
    setName('limit_panel');
    setCaption('');
    setBevelWidth(0);
    setHeight(Round(Self.Size.Y / 7));
    SetTooltip('WaspLib limit settings.');
  end;

  fullWidth := Floor(Self.Size.X/2);
  space := Floor(fullWidth * 0.1);
  w := Floor(fullWidth - space * 2);
  y := TControl.AdjustToDPI(20);

  with actionLimit do
  begin
    Create(limitPanel);
    SetCaption('Stop after (number of actions):');
    SetName('wl_action_limit');
    SetTooltip('Sets the script to stop after X amount of actions are performed.'
               + LINEENDING +
               '-1 = infinite.');
    SetLeft(space);
    SetTop(y);
    SetWidth(w);
    SetText(ToStr(WLSettings.MaxActions));
    Edit.setOnKeyPress(@Edit.NumberField);
    Edit.setOnEditingDone(@Self._ActionLimitOnDone);
  end;

  with timeLimit do
  begin
    Create(limitPanel);
    SetCaption('Stop after (time in minutes):');
    SetName('wl_time_limit');
    SetTooltip('Sets the script to stop after X amount of minutes have passed.'
               + LINEENDING +
               '-1 = infinite.');
    SetLeft(fullWidth + space);
    SetTop(y);
    SetWidth(w);
    SetText(ToStr(WLSettings.MaxTime));
    Edit.setOnKeyPress(@Edit.NumberField);
    Edit.setOnEditingDone(@Self._TimeLimitOnDone);
  end;
end;

procedure TScriptForm.CreateRemoteInputSettings(const owner: TControl);
  type TScriptForm = TScriptForm;
  //Self contained methods only related to the remote input settings.
  //This doesn't have to clutter things outside.
  procedure TScriptForm._EnabledOnChange(sender: TObject);
  var
    checked: Boolean;
    enabled, realInput, hud, riDebug: TCheckBox;
  begin
    enabled := sender;
    checked := enabled.IsChecked();

    realInput := Self.Form.GetChild('real_input_checkbox');
    hud       := Self.Form.GetChild('hud_checkbox');
    riDebug   := Self.Form.GetChild('ri_debug_checkbox');

    checked := enabled.IsChecked();
    realInput.SetEnabled(checked);
    hud.SetEnabled(checked);
    riDebug.SetEnabled(checked);

    WLSettings.RemoteInput.Enabled := checked;
    WLSettings.RemoteInput.BlockInput := not realInput.IsChecked();
    WLSettings.RemoteInput.HUDReport := hud.IsChecked();
    WLSettings.RemoteInput.ScriptDebug := riDebug.IsChecked();
  end;

  procedure TScriptForm._RealInputOnChange(sender: TObject);
  var
    realInput: TCheckBox;
  begin
    realInput := sender;
    WLSettings.RemoteInput.BlockInput := not realInput.IsChecked();
  end;

  procedure TScriptForm._HUDOnChange(sender: TObject);
  var
    checked: Boolean;
    hud, riDebug: TCheckBox;
  begin
    hud := sender;
    riDebug := Self.Form.GetChild('ri_debug_checkbox');

    checked := hud.IsChecked();
    if checked then
      riDebug.SetChecked(False);

    WLSettings.RemoteInput.HUDReport := checked;
    WLSettings.RemoteInput.ScriptDebug := not checked;
  end;

  procedure TScriptForm._DebugOnChange(sender: TObject);
  var
    checked: Boolean;
    hud, riDebug: TCheckBox;
  begin
    riDebug := sender;
    hud := Self.Form.GetChild('hud_checkbox');

    checked := riDebug.IsChecked();

    if checked then
      hud.SetChecked(False);

    WLSettings.RemoteInput.HUDReport := not checked;
    WLSettings.RemoteInput.ScriptDebug := checked;
  end;

var
  riPanel: TPanel;
  info: TLabel;
  fullWidth, width, space, y: Int32;
  enabled, realInput, hud, riDebug: TLabeledCheckbox;
begin
  with riPanel do
  begin
    Create(owner);
    SetName('ri_panel');
    setCaption('');
    setBevelWidth(0);
    setHeight(Round(Self.Size.Y / 5));
    SetTooltip('Remote Input settings.');
  end;

  fullWidth := Floor(Self.Size.X/4);
  space := Floor(fullWidth * 0.1);
  width := fullWidth - (space * 2);

  with enabled do
  begin
    Create(riPanel);
    SetCaption('Remote Input');
    SetName('ri_state');
    SetLeft(space);
    SetTop(TControl.AdjustToDPI(20));
    SetWidth(width);
    CheckBox.SetOnChange(@Self._EnabledOnChange);
    SetChecked(WLSettings.RemoteInput.Enabled);
    SetTooltip('Enable/Disable Remote Input.' + LineEnding +
            'Remote Input is a virtual mouse that allows you to bot while you use your real mouse.' +
            LineEnding + 'As far as we know this is not detected, but could be in the future.'+
            LineEnding + 'Use are your OWN RISK!');
    end;

  with realInput do
  begin
    Create(riPanel);
    SetCaption('Disable Input');
    SetName('real_input');
    SetLeft(space + TControl.AdjustToDPI(10));
    SetTop(enabled.GetBottom()+ TControl.AdjustToDPI(5));
    SetWidth(width);
    SetChecked(WLSettings.RemoteInput.BlockInput);
    CheckBox.setOnChange(@Self._RealInputOnChange);
    SetTooltip('Enable/Disable User Input.' + LineEnding +
               'This disables your input in the game until you' + LineEnding +
               'pause or terminate the script.');
  end;

  with hud do
  begin
    Create(riPanel);
    SetCaption('HUD report');
    SetName('hud');
    SetLeft(space + TControl.AdjustToDPI(10));
    SetTop(realInput.GetBottom()+ TControl.AdjustToDPI(5));
    SetWidth(width);
    SetChecked(WLSettings.RemoteInput.HUDReport);
    CheckBox.SetOnChange(@Self._HUDOnChange);
    SetTooltip('Enable/Disable the HUD report.' + LineEnding +
               'HUD report is the in-game progress report, also' + LineEnding +
               'called paint sometimes.');
  end;

  with riDebug do
  begin
    Create(riPanel);
    SetCaption('Debug script');
    SetName('ri_debug');
    SetLeft(space + TControl.AdjustToDPI(10));
    SetTop(hud.GetBottom()+ TControl.AdjustToDPI(5));
    SetWidth(width);
    SetChecked(WLSettings.RemoteInput.ScriptDebug);
    CheckBox.SetOnChange(@Self._DebugOnChange);
    SetTooltip('Enable/Disable the Script Debugging.' + LineEnding +
               'This will paint/draw on screen critical things' + LineEnding +
               'that Simba is looking for.');
  end;

  with info do
  begin
    Create(riPanel);
    SetTop(TControl.AdjustToDPI(20));
    SetLeft(fullWidth + space);
    SetCaption('Remote input is the tool used to allow simba to do virtual input on osrs.' +
    LINEENDING + 'This uses reflection to achieve input.');
    SetName('ri_info');
  end;

  Self._EnabledOnChange(enabled.CheckBox);
end;


procedure TScriptForm.CreateWaspLibSettings(limits: Boolean = True);
var
  tab: TTabSheet;
  riPanel, limitPanel: TPanel;
begin
  Self.AddTab('WaspLib Settings');
  tab := Self.Tabs[High(Self.Tabs)];

  Self.CreateRemoteInputSettings(tab);
  riPanel := Self.Form.GetChild('ri_panel');
  riPanel.setAlign(alTop);

  if limits then
  begin
    Self.CreateLimitSettings(tab);
    limitPanel := Self.Form.GetChild('limit_panel');
    limitPanel.setAlign(alTop);
  end;
end;



procedure TScriptForm.Setup(caption: String = 'Script Form'; size: TPoint = [750, 500]);
begin
  Self.DPI := TControl.GetScreenDPI();

  Self.Size.X := TControl.AdjustToDPI(size.X);
  Self.Size.Y := TControl.AdjustToDPI(size.Y);

  with Self.Form do
  begin
    Init(nil);
    setName(StringReplace(caption, ' ', '_', TReplaceFlags(0)));
    setCaption(caption);
    setWidth(Self.Size.X);
    setHeight(Self.Size.Y);
    setPosition(poScreenCenter);
  end;

  with Self.PageControl do
  begin
    Create(Self.Form);
    setName('PageControl');
    setAlign(alClient);
  end;

  with Self.Start do
  begin
    Create(Self.PageControl);
    setAlign(alBottom);
    SetCaption('Start!');
  end;

  Self.CreateWaspLibSettings();
  Self.CreateBankSettings();
  Self.CreateConsumableSettings(ERSConsumable.PRAYER_CONSUMABLE);
  Self.CreateAPISettings();
  Self.CreateAntibanManager();
  Self.CreateAccountManager();
end;


procedure TScriptForm.Run();
begin
  try
    Self.Form.ShowModal();
    Self.Form.Free();
  except
    Writeln(GetExceptionMessage());
  end;
end;

