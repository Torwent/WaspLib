(*
LootHandler
===========
LootHandler is a record made to handle looting.
*)

{$DEFINE WL_LOOTHANDLER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

{$IFNDEF WL_ALCH_HANDLER_INCLUDED}
  {$I WaspLib/osr/handlers/alchhandler.simba}
{$ENDIF}

type
  TRSLootHandler = record(TSRLBaseRecord)
    PriorityArray: TStringArray;
    Loot: TRSGroundItem;
    Drops: TRSMonsterDropArray;
    ValueThreshold: Int32;
    HasGemBag, HasHerbSack, HasSeedBox, HasSoulBearer,
    CheckedLoot, IsSetup: Boolean;
  end;

function TRSLootHandler.IsGoodDrop(drop: TRSMonsterDrop): Boolean;
var
  value: Int32;
begin
  if Self.PriorityArray.Contains(drop.Item) then
    Exit(True);

  value := ItemData.GetAverage(drop.ID);

  Result := value >= Self.ValueThreshold;
  if Result then
    Exit;

  value := value * drop.Quantity;
  Result := drop.Stackable and (value >= (Self.ValueThreshold / 5));
  if Result then
    Exit;

  Result := Self.HasHerbSack and drop.Item.Contains('rimy  ') and not drop.Item.ContainsAny(['guam', 'marrentill', 'tarromin', 'harralander']);
  if Result then
    Exit;

  Result := Self.HasGemBag and drop.Item.Contains('ncut ');
  if Result then
    Exit;

  Result := Self.HasSoulBearer and drop.Item.Contains('nsouled ');
  if Result then
    Exit;

  Result := Self.HasSeedBox and drop.Item.Contains('seed') and (value >= 300);
  if Result then
    Exit;

  Result := ItemData.GetHighAlch(drop.ID) > Self.ValueThreshold;
  if Result then
    RSAlchHandler.ItemArray += drop.Item;
end;

procedure TRSLootHandler.Setup(monster: TRSMonster; value: Int32 = 5000);
var
  i: Int32;
  tmpDrops: TRSMonsterDropArray;
begin
  if (monster.Name = '') or (value <= 0) then
    Exit;

  Self.Name := 'LootHandler';

  Self.PriorityArray := [
    'Clue scroll (easy)', 'Clue scroll (medium)', 'Clue scroll (hard)', 'Clue scroll (elite)',
    'Clue scroll (master)',
    'Dark totem base', 'Dark totem middle', 'Dark totem top',
    'Dark totem', 'Ancient shard', 'Brimstone key',
    'Mist battlestaff', 'Dust battlestaff',
    'Eternal gem', 'Imbued heart', 'Crystal shard', 'Abyssal head',
    'Curved bone', 'Long bone',
    'Imp champion scroll', 'Goblin champion scroll', 'Skeleton champion scroll',
    'Zombie champion scroll', 'Giant champion scroll',
    'Hobgoblin champion scroll', 'Ghoul champion scroll',
    'Earth warrior champion scroll', 'Jogre champion scroll',
    'Lesser demon champion scroll',
    'Giant key', 'Mossy key', 'Brittle key'
  ];
  Self.PriorityArray := Self.PriorityArray.ToLower;

  Self.HasGemBag := Inventory.ContainsItem('Open gem bag');
  Self.HasHerbSack := Inventory.ContainsItem('Open herb sack');
  Self.HasSoulBearer := Inventory.ContainsItem('Soul bearer');
  Self.HasSeedBox := Inventory.ContainsItem('Open seed box');

  Self.ValueThreshold := value;
  Self.Loot._Setup();

  if monster.Coordinates <> [] then
    Self.Loot.Setup(monster.DotFilter[0].Circle.Radius, 0, monster.Coordinates)
  else
  begin
    Self.Loot.Filter := monster.Filter;
    Self.Loot.ShapeArray += [[2, 2, 0], 0];
  end;

  Self.Loot.Finder.Colors := [
    [6579858, 9, 0.09, 0.33],   //vile and malicious ashes
    [13422033, 18, 0.20, 0.30], //dragon bones (this matches a lot with proselyte. might need to be removed)
    [7760980, 9, 0.06, 0.14],   //rune items (this might need better colors but this one doesn't match in CoK background,
    [10038382, 14, 0.08, 1.72], //ancient shard
    [14390305, 26, 0.04, 0.88], //Totem parts (blue)
    [1923609, 7, 0.16, 0.84],   //Totem parts (green)
    [4345976, 17, 0.10, 0.37],  //Dark bow
    [2895188, 6, 0.16, 0.41],   //Abyssal whip (matches a little with primordial boots)
    [1776416, 1, 0.01, 0.01],   //Black mystic bottom (probably all parts too).
    [3620158, 9, 0.28, 0.50],   //Black mask
    [10000802, 14, 0.13, 0.17], //Runes (matches with proselyte)
    [1424100, 20, 0.02, 0.66],  //gold coins
    [808255, 11, 0.10, 2.30],   //herb seeds
    [482129, 11, 0.48, 1.48],   //ranarr
    [7311001, 7, 0.08, 0.21],   //noted drops
    [680832, 11, 0.04, 1.43],   //battlestaff
    [860512, 14, 0.21, 1.80]    //ensouled hellhound head
  ];
  Self.Loot.Filter.UpText := False;

  Self.Loot.Finder.ClusterDistance := 3;
  Self.Loot.Finder.Erode := 2;
  Self.Loot.Finder.Grow := 4;
  Self.Loot.DotType := ERSMinimapDot.ITEM;

  DebugMMDotArray += Self.Loot;

  tmpDrops := MonsterData.GetDrops(monster.Name);
  tmpDrops.ClearDuplicates();

  for i := 0 to High(tmpDrops) do
  begin
    if Self.IsGoodDrop(tmpDrops[i]) then
    begin
      Self.Drops += tmpDrops[i];
      Self.Loot.UpText += tmpDrops[i].Item;
    end;
  end;

  Self.IsSetup := True;
end;

function TRSLootHandler.HasSpace(drop: TRSMonsterDrop): Boolean;
begin
  Result := not Inventory.IsFull() or (drop.Stackable and Inventory.ContainsItem(drop.Item));
end;


function TRSLootHandler.IsHoveringLoot(out contextIsOpen: Boolean): Boolean;
var
  upText: String;
begin
  upText := MainScreen.GetUpText();
  contextIsOpen := False;
  if upText.Contains('Take') then
    Exit(True);

  if upText.Contains('Walk here') then
    Exit(False);

  contextIsOpen := ChooseOption.Open();
  Result := contextIsOpen and ChooseOption.HasOption('Take');
end;

function TRSLootHandler.IsHoveringLoot(): Boolean; overload;
var
  upText: String;
begin
  upText := MainScreen.GetUpText();
  if upText.Contains('Take') then
    Exit(True);

  if upText.Contains('Walk here') then
    Exit(False);

  Result := ChooseOption.Open() and ChooseOption.HasOption('Take');
end;

function TRSLootHandler.CountDrop(drop: TRSMonsterDrop): Int32;
begin
  if drop.Stackable then
    Exit(Inventory.CountItemStack(drop.Item));

  Result := Inventory.CountItem(drop.Item);
end;

function TRSLootHandler.HandleLooting(): Boolean;
var
  i, count: Int32;
  contextIsOpen: Boolean;
  position: TPoint;
begin
  position := Mouse.Position();
  if not Self.IsHoveringLoot(contextIsOpen) then
    Exit;

  Self.CheckedLoot := True;
  contextIsOpen := contextIsOpen or ChooseOption.IsOpen();

  if not contextIsOpen and MainScreen.IsUpText(Self.Loot.UpText, -1, i, False) then
  begin
    if Self.HasSpace(Self.Drops[i]) then
    begin
      count := Self.CountDrop(Self.Drops[i]);
      Mouse.Click(MOUSE_LEFT);
      WaitUntil(count < Self.CountDrop(Self.Drops[i]), 300, 3000);
      Exit(Self.HandleLooting());
    end;

    if not Inventory.Consume(ERSConsumable.FOOD_CONSUMABLE) then
    begin
      Self.DebugLn('No space to loot!');
      Exit;
    end;

    for i := 0 to 4 do
    begin
      if i > 3 then
        Exit(True);
      Mouse.Move(position + [Random(-4,4), Random(-4,4)]);
      if Self.IsHoveringLoot(contextIsOpen) then
        Break;
    end;

    Exit(Self.HandleLooting());
  end;

  if not ChooseOption.Open() then
  begin
    Self.DebugLn('Failed to open "Choose options" menu for some reason.');
    Exit;
  end;

  if not ChooseOption.HasOption(Self.Loot.UpText, i, False) then
  begin
    Self.DebugLn('Finished looting.');
    Exit(True);
  end;

  if Self.HasSpace(Self.Drops[i]) then
  begin
    count := Self.CountDrop(Self.Drops[i]);
    ChooseOption.Select(Self.Loot.UpText[i], MOUSE_LEFT, False);
    WaitUntil(count < Self.CountDrop(Self.Drops[i]), 300, 3000);

    for i := 0 to 4 do
    begin
      if i > 3 then
        Exit(True);
      Mouse.Move(position + [Random(-4,4), Random(-4,4)]);
      if Self.IsHoveringLoot(contextIsOpen) then
        Break;
    end;

    Exit(Self.HandleLooting());
  end;

  if not Inventory.Consume(ERSConsumable.FOOD_CONSUMABLE) then
  begin
    Self.DebugLn('No space to loot!');
    Exit(True);
  end;

  for i := 0 to 4 do
  begin
    if i > 3 then
      Exit(True);
    Mouse.Move(position + [Random(-4,4), Random(-4,4)]);
    if Self.IsHoveringLoot(contextIsOpen) then
      Break;
  end;

  Result := Self.HandleLooting();
end;

function TRSLootHandler.CheckLoot(p: TPoint): Boolean;
begin
  Mouse.Move(p);
  Result := Self.HandleLooting();
end;

function TRSLootHandler.CheckLoot(b: TBox): Boolean; overload;
begin
  Mouse.Move(b);
  Result := Self.HandleLooting();
end;

function TRSLootHandler.CheckLoot(tile: TRectangle): Boolean; overload;
var
  i: Int32;
  tpa: TPointArray;
  p: TPoint;
begin
  RSClient.Clear(MainScreen.Bounds());
  RSClient.DrawRectangle(tile, $FFFFFF, 1);

  for i := 0 to 3 do
  begin
    if i > 2 then
      Exit;
    p := [-1,-1];

    if SRL.FindAnyColors(tpa, Self.Loot.Finder.Colors, tile.Bounds()) > 0 then
    begin
      tpa := tile.Filter(tpa);
      if tpa <> [] then
      begin
        RSClient.DrawTPA(tpa, $FFFF00);
        p := tpa.RandomValue();
      end;
    end;

    if p = [-1,-1] then
      p := SRL.rowp(Mouse.Position(), tile);

    Mouse.Move(p);
    if Self.IsHoveringLoot() then
      Break;
  end;

  Result := Self.HandleLooting();
end;

function TRSLootHandler.CheckLoot(dots: TPointArray): Boolean; overload;
var
  p: TPoint;
  angle: Double;
  tile: TRectangle;
begin
  angle := Minimap.GetCompassAngle(False);
  for p in dots do
  begin
    tile := Minimap.GetTileMS(p, [0.7, 0.7, 0], [2,2], angle);
    Result := Self.CheckLoot(tile);
    if Result then
    begin
      tile := Minimap.GetTileMS(Minimap.Center(), [0.7, 0.7, 0], [0,0], angle);
      Self.CheckLoot(tile);
      Exit;
    end;
  end;

  if not Result then
    RSClient.Clear(MainScreen.Bounds());
end;

function TRSLootHandler.CheckLoot(): Boolean; overload;
begin
  if not Self.Loot.Hover(0) then
    Exit;

  Result := Self.HandleLooting();
  if Result then
    Minimap.WaitMoving();

  if Self.CheckedLoot then
  begin
    Self.Loot.DotFilter.Setup([Self.Loot.ClosestDot.X, Self.Loot.ClosestDot.Y, 2], False, 120 * ONE_SECOND);
    Self.CheckedLoot := False;
  end;
end;
