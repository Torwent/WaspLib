{$DEFINE WL_ANTIBANEXTRA_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}


//Antiban overrides:

//Makes inventory patterns more common to each player based on their BioHash.
function TRSInventory.RandomPattern: TIntegerArray; override;
const
  PATTERNS: T2DIntegerArray = [
    DROP_PATTERN_SNAKE, DROP_PATTERN_SPIRAL,
    DROP_PATTERN_REGULAR, DROP_PATTERN_TOPDOWN,
    DROP_PATTERN_SNAKE_R, DROP_PATTERN_TOPDOWN_R
  ];
var
  randomCase: Double;
  hi: Int32;
begin
  hi := High(PATTERNS);
  randomCase := Antiban.GetUniqueNumber(Random(hi+1), 0, hi);

  Result := Patterns[Round(randomCase)];
  if Antiban.BioDice(30) then
    Result := Result.Reversed();
end;

//overriden to use Bank.Close with biohash.
function TRSGameTabs.Open(Tab: ERSGameTab): Boolean; override;
begin
  if Self.GetCurrentTab() = Tab then
    Exit(True);

  if MainScreen.HasInterface() and (Bank.IsOpen(False) or DepositBox.IsOpen()) then
    MainScreen.CloseInterface();

  Result := inherited(Tab);
end;


function TRSAnvil.Close(chance: Double = BioHash): Boolean; overload;
begin
  Result := MainScreen.CloseInterface(chance);
end;

function TRSCollectBox.Close(chance: Double = BioHash): Boolean; overload;
begin
  Result := MainScreen.CloseInterface(chance);
end;

function TRSGrandExchange.Close(chance: Double): Boolean; overload;
begin
  Result := MainScreen.CloseInterface(chance);
end;


function TRSChat.ClickOption(Text: String; chance: Double; Colors: TIntegerArray = [CHAT_COLOR_BLACK, CHAT_COLOR_WHITE]): Boolean; overload;
var
  UseKeyboard: Boolean;
begin
  if chance = BioHash then
    UseKeyboard := Antiban.BioDice(EBioBehavior.KEYBOARD_CHAT_chance)
  else
    UseKeyboard := SRL.Dice(chance);

  Result := Self.ClickOption(Text, UseKeyboard, Colors);
end;



function TRSChat.ClickContinue(chance: Double): Boolean; overload;
var
  useKeyboard: Boolean;
begin
  if chance = BioHash then
    useKeyboard := Antiban.BioDice(EBioBehavior.KEYBOARD_CHAT_chance)
  else
    useKeyboard := SRL.Dice(chance);

  Result := Self.ClickContinue(UseKeyboard);
end;


function TRSChooseOption.Select(Text: TStringArray; MouseAction: Int32 = MOUSE_LEFT; CaseSensitive: Boolean = True; CloseIfNotFound: Boolean = True): Boolean; override;
var
  choices: TRSChooseOption_OptionArray;
  I, J: Int32;
  rand: Double;
begin
  if Self.Open() then
  begin
    rand := Antiban.GetUniqueNumber(750, 500, 1000);
    case Antiban.GetChance(EBioBehavior.REACTION_SPEED) of
      0.00..0.30: Wait(0, rand, wdRight);
      0.30..0.70: Wait(0, rand, wdMean);
      else        Wait(0, rand, wdLeft);
    end;

    choices := Self.GetOptions();

    for I := 0 to High(choices) do
      for J := 0 to High(Text) do
        if (CaseSensitive and (Text[J] in choices[I].Text)) or ((not CaseSensitive) and (Lowercase(Text[J]) in Lowercase(Choices[I].Text))) then
        begin
          Self.Select(choices[I], MouseAction);

          Exit(True);
        end;

    if CloseIfNotFound then
    begin
      WaitEx(500, 250);

      Self.Close;
    end;
  end;
end;
