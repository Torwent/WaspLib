(*
# Biometrics
Methods related to biometrics that make your account behave in a unique way.
*)

{$DEFINE WL_BIOMETRICS_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}
(*
## GenerateUUIDV4
```pascal
function GenerateUUIDV4(): String;
```

Generate a UUID.

Example:
```pascal
WriteLn GenerateUUIDV4();
```
*)
function GenerateUUIDV4(): String;
var
  uTime, loadTime: Int64;
  rand, i: Int32;
  str: String;
begin
  uTime := UnixTime();
  loadTime := GetTickCount();

  str := 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';

  for i := 1 to High(str) do
  begin
    if (str[i] <> 'x') and (str[i] <> 'y') then
    begin
      Result += str[i];
      Continue;
    end;

    rand := Random(0, 16);

    if uTime > 0 then
    begin
      rand := ((uTime + rand) mod 16) or 0;
      uTime := Floor(uTime/16);
    end
    else
    begin
      rand := ((loadTime + rand) mod 16) or 0;
      loadTime := Floor(loadTime/16);
    end;

    if str[i] = 'x' then
      Result += IntToHex(rand)
    else
      Result += IntToHex(rand and $3 or $8);
  end;

  Result := LowerCase(Result);
end;

var
(*
## var BioHash
  Global BioHash variable.
  BioHash is a unique ID of each account and can be used to influence several things.
*)
  BioHash: Double;
(*
## var BioHashOverride
  Global BioHashOverride variable.
  If set, will override whatever would be generated for BioHash instead.
*)
  BioHashOverride: Double;

type
(*
## type EBioBehavior
```pascal
EBioBehavior = (
MOUSE_SPEED=1,
MOUSE_GRAVITY,
MOUSE_WIND,
MOUSE_MISS,
FKEY_CHANCE,
ESCAPE_CHANCE,
KEYBOARD_CHAT_CHANCE,
REACTION_SPEED,
SPAM_CLICK_CHANCE,
DROP_PATTERN,
CONSUME_IN_BANK,
USES_LIKE_BUTTONS,
TENDS_TO_LIKE
);
```

EBioBehavior is a enum that represent biohaviors affected by the user BioHash.
*)
  EBioBehavior = (
    MOUSE_SPEED,
    MOUSE_GRAVITY,
    MOUSE_WIND,
    MOUSE_MISS,

    FKEY_CHANCE,            //Chance to use FKeys
    ESCAPE_CHANCE,          //Chance to use Escape to close interfaces
    KEYBOARD_CHAT_CHANCE,   //Chance to use to handle chat options with the keyboard.

    REACTION_SPEED,       //Decides how long the player will wait after things like changing tabs, opening choose options menu, etc.
    SPAM_CLICK_CHANCE,    //Chance to spam click things (walking, eating, etc).
    DROP_PATTERN,
    CONSUME_IN_BANK,
    USES_LIKE_BUTTONS,
    TENDS_TO_LIKE
  );

(*
## Antiban.SetupBiometrics
```pascal
procedure TAntiban.SetupBiometrics();
```

This comes straight from older SRL versions.
This basically sets up our BioHash which is a hash of the current player login username. Because usernames are unique, so will the BioHash.
*)
procedure TAntiban.SetupBiometrics();
var
  h, i: UInt32;
  k: String;
begin
  BioHash := BioHashOverride;

  if BioHash = 0 then
  begin
    if (Length(Login.Players) = 0) or (BioHash <> 0) then
      Exit;

    k := Login.GetPlayer.User;
    h := $811C9DC5;
    for i:=1 to Length(k) do
      h := (h * $1000193) xor Ord(k[i]);

    BioHash := h / $FFFFFFFF;
  end;

  DebugLn('Biohash: ' + ToStr(BioHash));
end;

(*
## Antiban.GetBehavior
```pascal
function TAntiban.GetBehavior(behavior: EBioBehavior): Int32;
```

Get the value that corresponds to the specified **behavior**.

Example:
```pascal
WriteLn Antiban.GetBehavior(FKEY_CHANCE);
```
*)
function TAntiban.GetBehavior(behavior: EBioBehavior): Int32;
begin
  Result := BioHash.GetDigit(Ord(behavior)+1);
end;

(*
## Antiban.GetChance
```pascal
function TAntiban.GetChance(behavior: EBioBehavior): Double;
```

Get a probability from the current biohash that is represented by **behavior**.

Example:
```pascal
WriteLn Antiban.GetChance(FKEY_CHANCE);
```
*)
function TAntiban.GetChance(behavior: EBioBehavior): Double;
begin
  Result := BioHash.GetDigit(Ord(behavior)+1) / 10;
end;


(*
## Antiban.GetMultiplier
```pascal
function TAntiban.GetMultiplier(): Double;
```

This generates a random seed number that is influenced by BioHash.
There are times you will not want to use BioHash itself because it's value is static, this function let's you get a seed number that is random but heavily influenced by BioHash.
Values returned by this range between 0 and 2.
So if you are multiplying something by this, your result will be between 0 and 200%.

Example:
```pascal
Wait(Round(3000 * Antiban.GetMultiplier())));
```
*)
function TAntiban.GetMultiplier(): Double;
begin
  Result := Random(0, 2.0) * BioHash;
end;


(*
## Antiban.GetUniqueNumber
```pascal
function TAntiban.GetUniqueDouble(input: Double): Double;
function TAntiban.GetUniqueDouble(input, min, max: Double): Double; overload;
function TAntiban.GetUniqueDouble(input, min: Double): Double; overload;
function TAntiban.GetUniqueInt(input: Int64): Int64;
function TAntiban.GetUniqueInt(input, min, max: Int64): Int64; overload;
function TAntiban.GetUniqueInt(input, min: Int64): Int64; overload;
```
These generate a unique number based on your **input** and you BioHash.
The overloaded methods allow you to use some extra parameters for this to cap the results at a **min** and **max** value.

Example:
```pascal
FoodAmount := Antiban.GetUniqueInt(7, 3, 15);
```
*)
function TAntiban.GetUniqueDouble(input: Double): Double;
var
  seed: Double;
begin
  seed := Self.GetMultiplier();

  if input = 0 then
    Result := seed - 1
  else
    Result := input * seed;
end;

function TAntiban.GetUniqueDouble(input, min, max: Double): Double; overload;
begin
  Result := EnsureRange(Self.GetUniqueDouble(input), min, max);
end;

function TAntiban.GetUniqueDouble(input, min: Double): Double; overload;
const
  MAX: Double =  $FFFFFFFFFFFFFFFF;
begin
  Result := Self.GetUniqueDouble(input, min, max);
end;


function TAntiban.GetUniqueInt(input: Int64): Int64;
var
  seed: Double;
begin
  seed := Self.GetMultiplier();

  if input = 0 then
    Result := Round(seed) - 1
  else
    Result := Round(input * seed);
end;

function TAntiban.GetUniqueInt(input, min, max: Int64): Int64; overload;
begin
  Result := EnsureRange(Self.GetUniqueInt(input), min, max);
end;

function TAntiban.GetUniqueInt(input, min: Int64): Int64; overload;
const
  MAX: Int64 =  $FFFFFFFFFFFFFFFF;
begin
  Result := Self.GetUniqueInt(input, min, MAX);
end;


(*
## Antiban.GetUniqueAverage
```pascal
function TAntiban.GetUniqueDoubleAverage(input: Double; Iterations: Integer): Double;
function TAntiban.GetUniqueDoubleAverage(input, Sum: Double; Iterations: Integer): Double; overload;
function TAntiban.GetUniqueDoubleAverage(input, min, max: Double; Iterations: Integer): Double; overload;
function TAntiban.GetUniqueIntAverage(input: Int64; iterations: Int32): Int64;
function TAntiban.GetUniqueIntAverage(input, min: Int64; iterations: Int32): Int64; overload;
function TAntiban.GetUniqueIntAverage(input, min, max: Int64; iterations: Int32): Int64; overload;
```
Functions to test **Antiban.GetUniqueNumber**.

THIS IS ONLY MEANT FOR DEBUGGING!

It will run Antiban.GetUniqueNumber for how many **Iterations** you specify and average the results out.
Useful to know more or less what result to expect from your input.


Example:
```pascal
WriteLn Antiban.GetUniqueAverage(7, 3, 15, 500);
```
*)
function TAntiban.GetUniqueDoubleAverage(input: Double; iterations: Int32): Double;
var
  i: Int32;
begin
  for i := 1 to iterations do
    Result += Self.GetUniqueDouble(input);

  Result := Result / iterations;
end;

function TAntiban.GetUniqueDoubleAverage(input, min: Double; iterations: Int32): Double; overload;
var
  i: Int32;
begin
  for i := 1 to iterations do
    Result += Self.GetUniqueDouble(input, min);

  Result := Result / iterations;
end;

function TAntiban.GetUniqueDoubleAverage(input, min, max: Double; iterations: Int32): Double; overload;
var
  i: Int32;
begin
  for i := 1 to iterations do
    Result += Self.GetUniqueDouble(input, min, max);

  Result := Result / iterations;
end;

function TAntiban.GetUniqueIntAverage(input: Int64; iterations: Int32): Int64;
var
  i: Int32;
begin
  for i := 1 to iterations do
    Result += Self.GetUniqueInt(input);

  Result := Round(Result / iterations);
end;

function TAntiban.GetUniqueIntAverage(input, min: Int64; iterations: Int32): Int64; overload;
var
  i: Int32;
begin
  for i := 1 to iterations do
    Result += Self.GetUniqueInt(input, min);

  Result := Round(Result / iterations);
end;

function TAntiban.GetUniqueIntAverage(input, min, max: Int64; iterations: Int32): Int64; overload;
var
  i: Int32;
begin
  for i := 1 to iterations do
    Result += Self.GetUniqueInt(input, min, max);

  Result := Round(Result / iterations);
end;


(*
## Antiban.BioDice
```pascal
function TAntiban.BioDice(): Boolean;
function TAntiban.BioDice(behaviour: EBioBehavior): Boolean; overload;
function TAntiban.BioDice(chance: Double): Boolean; overload;
```
Throws a **SRL.Dice** heavily skewed in certain directions depending on your BioHash and the parameters passed in.

Example:
```pascal
UseBankEarly := Antiban.BioDice();
WriteLn UseBankEarly;
```
*)
function TAntiban.BioDice(): Boolean;
begin
  case BioHash of
    0.00..0.15: Result := False;
    0.15..0.50: Result := SRL.Dice(BioHash * 90);
    0.50..0.80: Result := SRL.Dice(BioHash * 110);
    else        Result := True;
  end;
end;

function TAntiban.BioDice(behaviour: EBioBehavior): Boolean; overload;
var
  chance: Double;
begin
  chance := Self.GetChance(behaviour);
  case chance of
    0.0..0.2: Result := False;
    0.2..0.5: Result := SRL.Dice(chance * 90);
    0.5..0.8: Result := SRL.Dice(chance * 110);
    else      Result := True;
  end;
end;

function TAntiban.BioDice(chance: Double): Boolean; overload;
begin
  Result := SRL.Dice(EnsureRange(chance * BioHash + (chance * 1.7), 0, 100));
end;


(*
## Antiban.SetSleepHour
```pascal
procedure TAntiban.SetSleepHour();
```
Sets WLSettings.Sleep.Hour based on the current BioHash.
WLSettings.Sleep.HourOverride will override this.

Example:
```pascal
Antiban.SetSleepHour();
WriteLn WLSettings.Sleep.Hour;
```
*)
procedure TAntiban.SetSleepHour();
var
  sleep: UInt64;
begin
  if WLSettings.Sleep.HourOverride <> '' then
  begin
    WLSettings.Sleep.Hour := WLSettings.Sleep.HourOverride;
    Exit;
  end;

  sleep := 22 + Round(5 * BioHash * ONE_HOUR + 59 * BioHash * ONE_MINUTE);

  if sleep > ONE_DAY then
    sleep -= ONE_DAY;

  WLSettings.Sleep.Hour := SRL.MsToTime(sleep, Time_Bare);
end;

(*
## Antiban.SetSleepLength
```pascal
procedure TAntiban.SetSleepLength();
```
Sets WLSettings.Sleep.Length based on the current BioHash.
WLSettings.Sleep.LengthOverride will override this.

Example:
```pascal
Antiban.SetSleepLength();
WriteLn WLSettings.Sleep.Length;
```
*)
procedure TAntiban.SetSleepLength();
begin
  if WLSettings.Sleep.LengthOverride > 0 then
  begin
    WLSettings.Sleep.Length := WLSettings.Sleep.LengthOverride * ONE_HOUR;
    Exit;
  end;

  WLSettings.Sleep.Length := 7 * ONE_HOUR + Round(200 * ONE_MINUTE * BioHash, 3);
end;


(*
## Antiban.Wait
```pascal
procedure TAntiban.BioWait(time: UInt32);
procedure TAntiban.BioWait(min, max: UInt32; weight: EWaitDir = wdMean); overload;
```
Wait() but skewed with BioHash.

Example:
```pascal
Inventory.Open()
Antiban.Wait(4000);
Magic.Open();
```
*)
procedure TAntiban.BioWait(time: UInt32);
begin
  Wait(Self.GetUniqueInt(time));
end;

procedure TAntiban.BioWait(min, max: UInt32; weight: EWaitDir = wdMean); overload;
begin
  Wait(Self.GetUniqueInt(min, min, max), Self.GetUniqueInt(max, min, max), weight);
end;


(*
## Antiban.Click
```pascal
procedure TAntiban.Click(button: Int32; min: Int32 = 1, max: Int32 = 3);
```
Mouse.Click() with a BioHashed probability of spam clicking between 0.

Example:
```pascal
Inventory.HoverSlot(5);
Antiban.Click(MOUSE_LEFT);
```
*)
procedure TAntiban.BioClick(button: Int32; max: Int32 = 3);
var
  i: Int32;
begin
  Mouse.Click(button);
  if Random() > Self.GetUniqueDouble(0.08, 0.05, 0.1) then
    Exit;

  for i := 0 to Self.GetUniqueInt(2, 1, max) do
  begin
    Mouse.Click(Mouse.Position(), button);
    System.Wait(0, 100, wdLeft);
  end;
end;

function TAntiban.BioYellowClick(button: Int32; max: Int32 = 3): Boolean;
var
  i: Int32;
begin
  Mouse.Click(button);
  Result := MainScreen.DidYellowClick();

  if Random() > Self.GetUniqueDouble(0.08, 0.05, 0.1) then
    Exit;

  for i := 0 to Self.GetUniqueInt(2, 1, max) do
  begin
    Mouse.Click(Mouse.Position(), button);
    System.Wait(0, 100, wdLeft);
  end;

  Result := MainScreen.DidYellowClick() and not MainScreen.DidRedClick();
end;

function TAntiban.BioRedClick(button: Int32; max: Int32 = 3): Boolean;
var
  i: Int32;
begin
  Mouse.Click(button);
  Result := MainScreen.DidRedClick();

  if Random() > Self.GetUniqueDouble(0.08, 0.05, 0.1) then
    Exit;

  for i := 0 to Self.GetUniqueInt(2, 1, max) do
  begin
    Mouse.Click(Mouse.Position(), button);
    System.Wait(0, 100, wdLeft);
  end;

  Result := MainScreen.DidRedClick() and not MainScreen.DidYellowClick();
end;
