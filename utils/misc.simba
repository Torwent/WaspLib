{$DEFINE WL_MISC_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

function NumberPerHour(Number: Int64): Int32;
begin
  Result := Round(Number / GetTimeRunning * ONE_HOUR);
end;

function NumberPerHour(Number: Extended): Int32; overload;
begin
  Result := NumberPerHour(Trunc(Number));
end;

function NumberPerHour(Number: Int64; TimeRunning: UInt64): Int32; overload;
begin
  Result := Round(Number / TimeRunning * ONE_HOUR);
end;

function NumberPerHour(Number: Extended; TimeRunning: UInt64): Int32; overload;
begin
  Result := NumberPerHour(Trunc(Number), TimeRunning);
end;


//This probably doesn't belong in TRSWalker lol....
function PopulateTile(Tile: TPoint; Populate: record N, S, W, E: Int32; end): TPointArray;
var
  Idx1, Idx2: Int32;
begin
  for Idx1 := 0 to Populate.N do
  begin
    for Idx2 := 0 to Populate.W do
      Result += Tile + [-4 * Idx2, -4 * Idx1];

    for Idx2 := 0 to Populate.E do
      Result += Tile + [4 * Idx2, -4 * Idx1];
  end;

  for Idx1 := 0 to Populate.S do
  begin
    for Idx2 := 0 to Populate.W do
      Result += Tile + [-4 * Idx2, 4 * Idx1];

    for Idx2 := 0 to Populate.E do
      Result += Tile + [4 * Idx2, 4 * Idx1];
  end;

  Result.ClearDuplicates;
end;

function PopulateTileArray(TileArray: TPointArray; Populate: record N, S, W, E: Int32; end): TPointArray;
var
  Tile: TPoint;
  ATPA: T2DPointArray;
begin
  for Tile in TileArray do
    ATPA += PopulateTile(Tile, Populate);

  Result := ATPA.Merge;
  Result.ClearDuplicates;
end;


//Gives you a square with Distance number of tiles from the specified Tile
function PopulateTile(Tile: TPoint; Distance: Int32): TPointArray; overload;
begin
  Result := PopulateTile(Tile, [Distance, Distance, Distance, Distance]);
end;

//Same as above for multiple tiles.
function PopulateTileArray(TileArray: TPointArray; Distance: Int32): TPointArray; overload;
begin
  Result := PopulateTileArray(TileArray, [Distance, Distance, Distance, Distance]);
end;



