(*
RSFishingHandler
================
RSFishingHandler is a full color fishing bot that is highly customizable.
*)

{$DEFINE WL_RSFISHING_HANDLER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type ERSFishingType = (
    NET, BIG_NET, BAIT, LURE, BARBARIAN_ROD,  CAGE, HARPOON, KARAMBWAN
  );

type RSFishingHandler = record(TSRLBaseRecord) class var
    Tool, Bait: TRSItem;
    FishingType: ERSFishingType;

    Option: String;
    CurrentSpot: TPoint;
    CompassAngle: Double;
    TimerLength: Int32;
    Timer: TCountDown;

    Filters: T2DPointArray;

    LeftClick, IsFishing, Debug, IsSetup: Boolean;
  class const COLORS: array of TCTS2Color = [
      [15123359, 7, 0.25, 1.45],
      [14596504, 7, 0.15, 1.4],
      [11641749, 8, 0.13, 1.59],
      [13478023, 14, 0.06, 1.23],
      [15325640, 5, 0.26, 4.58]
    ];
  end;

procedure RSFishingHandler.DebugLn(text: String); constref; override;
var
  timeStamp: String;
begin
  timeStamp := SRL.TimeStamp();
  text := timeStamp + ':[RSFishingHandler]: ' + text;
  WriteLn text;
end;

(*
RSFishingHandler.Setup
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure RSFishingHandler.Setup(); static;

Resets RSFishingHandler to the non fishing state.
This will:
  - Pause RSFishingHandler.Timer;
  - Reset RSFishingHandler.CurrentSpot;
  - Set RSFishingHandler.IsFishing to False;
*)
procedure RSFishingHandler.Setup(fishType: ERSFishingType; timerLength: Int32 = 30000); static;
var
  found: Boolean;
  baits: TRSItemArray;
begin
  RSFishingHandler.FishingType := fishType;

  case fishType of
    ERSFishingType.NET:
      begin
        baits := [];
        RSFishingHandler.Tool := 'Small fishing net';
        RSFishingHandler.Option := 'Net';
        RSFishingHandler.LeftClick := True;
      end;

    ERSFishingType.BIG_NET:
      begin
        baits := [];
        RSFishingHandler.Tool := 'Big fishing net';
        RSFishingHandler.Option := 'Big Net';
        RSFishingHandler.LeftClick := False;
      end;

    ERSFishingType.BAIT:
      begin
        baits := ['Fishing bait', 'Sandworms'];
        RSFishingHandler.Tool := 'Fishing rod';
        RSFishingHandler.Option := 'Bait';
        RSFishingHandler.LeftClick := False;
      end;

    ERSFishingType.LURE:
      begin
        baits := ['Feather', 'Stripy feather'];
        RSFishingHandler.Tool := 'Fly fishing rod';
        RSFishingHandler.Option := 'Lure';
        RSFishingHandler.LeftClick := True;
      end;

    ERSFishingType.BARBARIAN_ROD:
      begin
        baits := ['Fishing bait', 'Feather', 'Fish offcuts'];
        RSFishingHandler.Tool := 'Barbarian rod';
        RSFishingHandler.Option := 'Use-rod';
        RSFishingHandler.LeftClick := True;
      end;

    ERSFishingType.CAGE:
      begin
        baits := [];
        RSFishingHandler.Tool := 'Lobster pot';
        RSFishingHandler.Option := 'Cage';
        RSFishingHandler.LeftClick := True;
      end;

    ERSFishingType.HARPOON:
      begin
        baits := [];
        RSFishingHandler.Tool := 'Harpoon';
        RSFishingHandler.Option := 'Harpoon';
        RSFishingHandler.LeftClick := False;
      end;

    ERSFishingType.KARAMBWAN:
      begin
        baits := ['Raw karambwanji'];
        RSFishingHandler.Tool := 'Karambwan vessel';
        RSFishingHandler.Option := 'Fish';
        RSFishingHandler.LeftClick := True;
      end;
  end;

  if (baits <> []) then
  begin
    for RSFishingHandler.Bait in baits do
    begin
      found := Inventory.ContainsItem(RSFishingHandler.Bait);
      if found then
        Break;
    end;

    if not found then
      TerminateScript('Missing bait.');
  end;

  if fishType = ERSFishingType.HARPOON then
  begin
    if not Inventory.ContainsAny(['Harpoon', 'Barb-tail harpoon', 'Dragon harpoon', 'Infernal harpoon', 'Crystal harpoon']) and
       not Equipment.ContainsAny(['Barb-tail harpoon', 'Dragon harpoon', 'Infernal harpoon', 'Crystal harpoon']) then
      TerminateScript('Missing harpoon.');
  end
  else if not Inventory.ContainsItem(RSFishingHandler.Tool) then
    TerminateScript('Missing tool.');

  RSFishingHandler.IsSetup := True;

  RSFishingHandler.TimerLength := timerLength;
  RSFishingHandler.Timer := [timerLength, 1, 1];
end;

(*
RSFishingHandler.Reset
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure RSFishingHandler.Reset(); static;

Resets RSFishingHandler to the non fishing state.
This will:
  - Pause RSFishingHandler.Timer;
  - Reset RSFishingHandler.CurrentSpot;
  - Set RSFishingHandler.IsFishing to False;
*)
procedure RSFishingHandler.Reset(); static;
begin
  RSFishingHandler.Timer.Pause();
  RSFishingHandler.CurrentSpot := [];
  RSFishingHandler.IsFishing := False;
end;

(*
RSFishingHandler.GetMMShoreLine
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSFishingHandler.GetMMShoreLine(): TPointArray; static;

Get the shore lines on the minimap.

Example
-------

  ShowOnClient(RSFishingHandler.GetMMShoreLine());
*)
function RSFishingHandler.GetMMShoreLine(): TPointArray; static;
var
  tpa: TPointArray;
  atpa: T2DPointArray;
begin
  if SRL.FindColors(tpa, CTS0(12161149, 25), Minimap.Bounds()) then
    Result += tpa;
  if SRL.FindColors(Result, [12566463, 10461344, 65536, 16165137, 16614441, 16147497, 14499083, $FA0A01], Minimap.Bounds()) then
    Result += tpa;

  atpa := result.Cluster(1);
  atpa.FilterSize(80, __GT__);

  tpa := atpa.Merge().Grow(2);
  tpa := tpa.Sorted(tpa.Mean());

  Result := tpa;
end;

(*
RSFishingHandler.GetMSShoreLine
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSFishingHandler.GetMSShoreLine(): TPointArray; static;

Get the shore lines on the mainscreen.

Example
-------

  ShowOnClient(RSFishingHandler.GetMSShoreLine());
*)
function RSFishingHandler.GetMSShoreLine(): TPointArray; static;
var
  tpa, tmp: TPointArray;
  atpa: T2DPointArray;
begin
  if SRL.FindColors(tpa, CTS2(12030823, 35, 0.20, 0.91), MainScreen.Bounds()) = 0 then
    Exit;

  atpa := tpa.Cluster(1);
  atpa.FilterSize(MainScreen.NormalizeDistance(200), __GT__);

  tpa := atpa.Merge();
  tmp := tpa;

  tmp := tmp.Edges();
  tmp := tmp.Grow(MainScreen.NormalizeDistance(45));
  Result :=  tpa.Intersection(tmp);
end;

(*
RSFishingHandler.FindWaterDirection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSFishingHandler.FindWaterDirection(): TRectangle; static;

Finds the adjacent tile that is directly close to the player that has water.

Example
-------

  ShowOnClient(RSFishingHandler.FindWaterDirection(), False);
*)
function RSFishingHandler.FindWaterDirection(): TRectangle; static;
var
  water, faceableTiles, tpa: TPointArray;
  i: Int32;
  quads: TRectArray;
begin
  water := RSFishingHandler.GetMMShoreLine();
  faceableTiles := Minimap.GetCardinalPoints();

  for i := 0 to High(faceableTiles) do
    if water.Contains(faceableTiles[i]) then
      tpa += FaceableTiles[i];

  water := RSFishingHandler.GetMSShoreLine();
  quads := Minimap.GetTileArrayMS(tpa, [1,1,0]);

  for i := 0 to High(quads) do
    if water.Contains(quads[i].Mean()) then
      Exit(quads[i]);
end;




(*
RSFishingHandler.FindSpot
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSFishingHandler.FindSpot(out atpa: T2DPointArray; waitTime: Int32 = 350): Boolean; static;
.. pascal:: function RSFishingHandler.FindSpot(): Boolean; static; overload;

Find fishing spots on the mainscreen. Optionally return at ATPA of the found spots.

Example
-------

  var
    atpa: T2DPointArray;
  begin
    if RSFishingHandler.FindSpot(atpa) then //RSFishingHandler.FindSpot() returns true/false.
      ShowOnClient(atpa);
  end;
*)
function RSFishingHandler.FindSpot(out atpa: T2DPointArray; waitTime: Int32 = 350; bounds: TBox = []): Boolean; static;
  function _FindSpot(out spotTPA: TPointArray; bounds: TBox): Boolean;
  var
    tpa: TPointArray;
    c: TCTS2Color;
  begin
    if bounds = [] then
      bounds := MainScreen.Bounds();

    for c in RSFishingHandler.COLORS do
      if SRL.FindColors(tpa, c, bounds) then
        spotTPA += tpa;

    spotTPA := MainScreen.Filter(spotTPA);

    Result := spotTPA <> [];
  end;
var
  tmp: T2DPointArray;
  tpa, shore: TPointArray;
  normalizedDistance: Int32;
begin
  atpa := [];
  if not WaitUntil(_FindSpot(tpa, bounds), 50, waitTime) then
    Exit;

  tpa := tpa.Unique();
  tmp := tpa.Cluster(MainScreen.NormalizeDistance(22));
  tmp := tmp.ExcludeSize(MainScreen.NormalizeDistance(26), __LT__);

  if tmp = [] then
    Exit;

  shore := RSFishingHandler.GetMSShoreLine();
  normalizedDistance := MainScreen.NormalizeDistance(12);

  for tpa in tmp do
    if shore.Contains(tpa.Mean()) then
      atpa += tpa.grow(normalizedDistance);

  if (RSFishingHandler.Filters <> []) and (TRSWalkerObject.Walker <> nil) then
  begin
    tmp := RSFishingHandler.Filters;
    tmp := TRSWalkerObject.Walker^.GetMSPolygonArray(tmp);

    atpa := MainScreen.FilterInPolygon(atpa, tmp);
    if atpa = [] then
      Exit;
  end;

  atpa := atpa.SortFrom(MainScreen.GetPlayerBox().Center());
  Result := atpa <> [];
end;

function RSFishingHandler.FindSpot(): Boolean; static; overload;
var
  atpa: T2DPointArray;
begin
  Result := RSFishingHandler.FindSpot(atpa);
end;


(*
RSFishingHandler.WaitSpot
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSFishingHandler.WaitSpot(out atpa: T2DPointArray; waitTime: Int32 = 350): Boolean; static;
.. pascal:: function RSFishingHandler.WaitSpot(): Boolean; static; overload;

Wait for fishing spots on the mainscreen. Optionally return at ATPA of the found spots.

Example
-------

  var
    atpa: T2DPointArray;
  begin
    if RSFishingHandler.WaitSpot(atpa) then //RSFishingHandler.FindSpot() returns true/false.
      ShowOnClient(atpa);
  end;
*)
function RSFishingHandler.WaitSpot(out atpa: T2DPointArray; waitTime: Int32 = 350; bounds: TBox = []): Boolean; static;
  function _WaitSpot(out spotTPA: TPointArray; bounds: TBox; waitTime: UInt32): Boolean;
  var
    tpa: TPointArray;
    c: TCTS2Color;
    t: UInt64;
  begin
    if bounds = [] then
      bounds := MainScreen.Bounds();

    t := GetTickCount() + waitTime;

    repeat
      for c in RSFishingHandler.COLORS do
        if SRL.FindColors(tpa, c, bounds) then
          spotTPA += tpa;
    until GetTickCount() >= t;

    spotTPA := MainScreen.Filter(spotTPA);

    Result := spotTPA <> [];
  end;
var
  tmp: T2DPointArray;
  tpa, shore: TPointArray;
  normalizeDistance: Int32;
begin
  atpa := [];
  if not _WaitSpot(tpa, bounds, waitTime) then
    Exit;

  tpa := tpa.Unique();

  tmp := tpa.Cluster(MainScreen.NormalizeDistance(22));

  if tmp = [] then
    Exit;

  shore := RSFishingHandler.GetMSShoreLine().Grow(MainScreen.NormalizeDistance(2));

  normalizeDistance := MainScreen.NormalizeDistance(12);
  for tpa in tmp do
    if shore.Contains(tpa.Mean()) then
      atpa += tpa.grow(normalizeDistance);

  if (RSFishingHandler.Filters <> []) and (TRSWalkerObject.Walker <> nil) then
  begin
    tmp := RSFishingHandler.Filters;
    tmp := TRSWalkerObject.Walker^.GetMSPolygonArray(tmp);
    atpa := MainScreen.FilterInPolygon(atpa, tmp);
    if atpa = [] then
      Exit;
  end;

  atpa := atpa.SortFrom(MainScreen.GetPlayerBox.Center());

  Result := atpa <> [];
end;

function RSFishingHandler.WaitSpot(): Boolean; static; overload;
var
  atpa: T2DPointArray;
begin
  Result := RSFishingHandler.WaitSpot(atpa);
end;

(*
RSFishingHandler.SpotMoved
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSFishingHandler.SpotMoved(out atpa: T2DPointArray): Boolean; static;
.. pascal:: function RSFishingHandler.SpotMoved(): Boolean; static; overload;

Check if RSFishingHandler.CurrentSpot moved.

Example
-------

  WriteLn RSFishingHandler.SpotMoved();
*)
function RSFishingHandler.SpotMoved(out atpa: T2DPointArray): Boolean; static;
var
  angle, tmp: Double;
  tpa: TPointArray;
  p: TPoint;
  bmp: TMufasaBitmap;
begin
  if (atpa = []) and not RSFishingHandler.WaitSpot(atpa, 2000, MainScreen.GetPlayerBox(12, 16, 22, 26)) then
    Exit(True);

  tmp := Minimap.GetCompassAngle(False);

  p := RSFishingHandler.CurrentSpot;

  if RSFishingHandler.CompassAngle <> tmp then
  begin
    angle := tmp - RSFishingHandler.CompassAngle;
    p := p.Rotate(angle, MainScreen.GetPlayerBox().Center());

    RSFishingHandler.CompassAngle := tmp;
    RSFishingHandler.CurrentSpot := p;
  end;

  tpa := atpa.Merge().Connect().ShapeFill().Grow(MainScreen.NormalizeDistance(18));
  Result := not tpa.Contains(p);

  if RSFishingHandler.Debug then
  begin
    bmp.FromClient();
    bmp.DrawATPA(atpa);
    bmp.DrawCross(p, 3, 0);

    bmp.Debug();
    bmp.Free();
  end;
end;

function RSFishingHandler.SpotMoved(): Boolean; static; overload;
var
  atpa: T2DPointArray;
begin
  Result := RSFishingHandler.SpotMoved(atpa);
end;

(*
RSFishingHandler._StoppedFishing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSFishingHandler._StoppedFishing(): Boolean; static;

Internal helper method to check for quick things that guarantee us we are not fishing anymore.
*)
function RSFishingHandler._StoppedFishing(): Boolean; static;
begin
  Result := RSFishingHandler.Timer.IsFinished() or Inventory.IsFull() or Chat.LeveledUp();
end;

(*
RSFishingHandler.CheckFishing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSFishingHandler.CheckFishing(out atpa: T2DPointArray): Boolean; static;
.. pascal:: function RSFishingHandler.CheckFishing(): Boolean; static; overload;

Check if we are still fishing. This function could give false positives but it's extremely unlikely.
To determine if we are still fishing it does the following:
  - Check if RSFishingHandler.CurrentSpot (which is the last spot we clicked) has moved.
  - Check if the inventory is full.
  - Check if we leveled up.
  - Check if RSFishingHandler.Timer has reached it's end. The time lasts anywhere between 40 seconds and 70 seconds randomly
    and it's reset everytime this is called and we earned XP.

Example
-------

  WriteLn RSFishingHandler.CheckFishing();
*)
function RSFishingHandler.CheckFishing(out atpa: T2DPointArray): Boolean; static;
var
  xpEarned: Boolean;
begin
  if RSFishingHandler._StoppedFishing() then
  begin
    RSFishingHandler.Reset();
    Exit;
  end;

  xpEarned := XPBar.EarnedXP();

  if not xpEarned and RSFishingHandler.SpotMoved(atpa) then
  begin
    RSFishingHandler.Reset();
    Exit;
  end;

  if xpEarned then
    RSFishingHandler.Timer.Restart(-Round(RSFishingHandler.TimerLength * 0.6), Round(RSFishingHandler.TimerLength * 0.3));
  Result := RSFishingHandler.IsFishing;
end;

function RSFishingHandler.CheckFishing(): Boolean; static; overload;
var
  xpEarned: Boolean;
begin
  if RSFishingHandler._StoppedFishing() then
  begin
    RSFishingHandler.Reset();
    Exit;
  end;

  xpEarned := XPBar.EarnedXP();

  if not xpEarned and RSFishingHandler.SpotMoved() then
  begin
    RSFishingHandler.Reset();
    Exit;
  end;

  if xpEarned then
  begin
    RSFishingHandler.Timer.Restart(-Round(RSFishingHandler.TimerLength * 0.25), Round(RSFishingHandler.TimerLength * 0.25));;
    RSFishingHandler.CurrentSpot := RSFishingHandler.FindWaterDirection().Mean();
  end;

  Result := RSFishingHandler.IsFishing;
end;

(*
RSFishingHandler.FacingWater
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function RSFishingHandler.FacingWater(): Boolean; static;

Check if we have water directly north, west, south or east of us.

Example
-------

  WriteLn RSFishingHandler.FacingWater();
*)
function RSFishingHandler.FacingWater(): Boolean; static;
var
  water: TPointArray;
  p: TPoint;
begin
  water := RSFishingHandler.GetMMShoreLine();
  for p in Minimap.GetCardinalPoints() do
    if water.Contains(p) then
      Exit(True);
end;


(*
RSFishingHandler.ClickSpot
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
  function RSFishingHandler.ClickSpot(out atpa: T2DPointArray): Boolean; static;
  function RSFishingHandler.ClickSpot(): Boolean; static; overload;

Click the closest fishing spot to the player and switches RSFishingHandler to "IsFishing".
We can check if we are still fishing with RSFishingHandler.CheckFishing().

Example
-------

  RSFishingHandler.ClickSpot();
*)
function RSFishingHandler.ClickSpot(out atpa: T2DPointArray): Boolean; static;
var
  wasFacingWater, redClicked: Boolean;
  circle: TCircle;
  upText: String;
  option: TRSChooseOption_Option;
  i, tmp: Int32;
begin
  if (atpa = []) or Inventory.IsFull() then
    Exit;

  if not RSFishingHandler.IsSetup then
    RSFishingHandler.Setup(RSFishingHandler.FishingType);

  wasFacingWater := RSFishingHandler.FacingWater();

  for i := 0 to High(atpa) do
  begin
    Mouse.Move(atpa[i]);

    repeat
      Wait(50);
      upText := MainScreen.GetUpText();
      Wait(50, 100);
    until upText = MainScreen.GetUpText(); //uptext takes ~50ms to update.

    if not ('Fish' in upText) then
    begin
      if i = High(atpa) then
        Exit;
      Continue;
    end;

    if RSFishingHandler.LeftClick and (RSFishingHandler.Option in upText) then
    begin
      MOUSE.Click(MOUSE_LEFT);
      Break;
    end;

    if not RSFishingHandler.LeftClick then
    begin
      for option in ChooseOption.GetOptions() do
        if 'Fish' in option.Text then
          Inc(tmp);

      if tmp = 2 then
        RSFishingHandler.LeftClick := True;

      if ChooseOption.Select(RSFishingHandler.Option) then
        Break;
    end;

    if i = High(atpa) then
      Exit;
  end;

  redClicked := MainScreen.DidRedClick();

  for i := 7 to SRL.TruncatedGauss(0, 9) do
  begin
    circle.X := Mouse.Position().X;
    circle.Y := Mouse.Position().Y;
    circle.Radius := 5;

    Mouse.Click(circle, MOUSE_LEFT, True);
    if not redClicked then
      redClicked := MainScreen.DidRedClick();
  end;

  if not redClicked then
    redClicked := MainScreen.DidRedClick();

  if not redClicked then
    Exit;

  Minimap.WaitMoving(False);
  Wait(2400, 4800);
  WaitUntil(RSFishingHandler.FacingWater(), 100, 4000);

  if not RSFishingHandler.WaitSpot(atpa, 2000, MainScreen.GetPlayerBox(8, 12, 18, 18)) then
    Exit;

  RSFishingHandler.CurrentSpot := RSFishingHandler.FindWaterDirection().Mean();
  RSFishingHandler.CompassAngle := Minimap.GetCompassAngle(False);
  RSFishingHandler.IsFishing := True;
  RSFishingHandler.Timer.Restart(-Round(RSFishingHandler.TimerLength * 0.6), Round(RSFishingHandler.TimerLength * 0.3));;
  Result := True;
  Wait(1200, 2400);

  if RSFishingHandler.Debug then
    RSFishingHandler.SpotMoved();
end;

function RSFishingHandler.ClickSpot(): Boolean; static; overload;
var
  atpa: T2DPointArray;
begin
  if RSFishingHandler.FindSpot(atpa) then
    Result := RSFishingHandler.ClickSpot(atpa);
end;
