(*
CombatHandler
=============
CombatHandler is a record made to handle combat.

This is not made to handle literally every scenario, specially bossing is not
recommended as custom made methods will probably perform much better, but for
for general purpose combat this should be enough!
*)

{$DEFINE WL_COMBATHANDLER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

const
  WEAPONS: TRSItemArray = [
    'Ghrazi rapier', 'Blade of saeldor (c)', 'Inquisitor''s mace',
    'Toktz-xil-ak', 'Abyssal whip', 'Abyssal bludgeon',
    'Abyssal dagger', 'Abyssal dagger (p++)', 'Saradomin sword',
    'Dragon scimitar', 'Dragon sword', 'Dragon longsword',
    'Dharok''s greataxe', 'Sarachnis cudgel', 'Dinh''s bulwark',
    'Dragon hunter lance', 'Abyssal tentacle', 'Granite hammer',
    'Bow of faerdhinen (c)',
    'Toxic blowpipe', 'Magic shortbow (i)', 'Armadyl crossbow',
    'Dragon hunter crossbow', 'Dragon crossbow', 'Rune crossbow',
    'Adamant dart', 'Mithril dart', 'Rune scimitar', 'Dorgeshuun crossbow',
    'Leaf-bladed sword', 'Null'
  ];

  SHIELDS: TRSItemArray = [
    'Avernic defender', 'Dragon defender', 'Rune defender',
    'Adamant defender', 'Mithril defender', 'Black defender',
    'Steel defender', 'Iron defender', 'Bronze defender',
    'Dragonfire shield', 'Toktz-ket-xil', 'Twisted buckler',
    'Dragonfire ward', 'Odium ward', 'Book of law',
    'Book of darkness', 'Unholy book', 'Book of war', 'Rune kiteshield',
    'Null'
  ];

  SPEC_WEAPONS: TRSItemArray = [
    'Dragon claws', '4153', '12848', 'Granite maul', 'Abyssal dagger',
    'Abyssal dagger (p++)', 'Dragon dagger', 'Dragon dagger(p++)',
    'Dragon sword', 'Dragon longsword', 'Dinh''s bulwark', 'Abyssal tentacle',
    'Saradomin godsword', 'Granite hammer',
    'Toxic blowpipe', 'Magic shortbow (i)', 'Armadyl crossbow',
    'Dragon crossbow',
    'Null'
  ];

  BRACELETS: TRSItemArray = [
    'Bracelet of slaughter',
    'Expeditious bracelet',
    'Null'
  ];

  DWARF_CANNON: TRSItemArray = [
    'Cannon base',
    'Cannon stand',
    'Cannon barrels',
    'Cannon furnace'
  ];

  CANNON_BALLS: TRSItemArray = [
    'Cannonball',
    'Granite cannonball'
  ];

  REMAINS: TRSItemArray = [
    'Bones', 'Wolf bones', 'Monkey bones', 'Bat bones', 'Big bones',
    'Jogre bones', 'Zogre bones', 'Babydragon bones', 'Wyrm bones',
    'Wyvern bones', 'Dragon bones', 'Drake bones', 'Lava dragon bones',
    'Hydra bones', 'Dagannoth bones', 'Superior dragon bones',
    'Fiendish ashes', 'Vile ashes', 'Malicious ashes',
    'Abyssal ashes', 'Infernal ashes'
  ];

type CombatHandler = record(TSRLBaseRecord) class var
    State: String;
    Monster: TRSMonster;

    BraceletTimer: TCountDown;
    InCombatTimer: TCountDown;
    CombatStyle: TRSCombatStyle;

    ManageGear: Boolean;

    Weapon: TRSItem;
    Shield: TRSItem;
    SpecWeapon: TRSItem;
    Bracelet: TRSItem;

    MinHitPoints: Int32;
    MinPrayPoints: Int32;
    WeaponSpec: Int32;
    GearIsSetup: Boolean;
    AutoRetaliateEnabled: Boolean;

    QuickPrayerIsSetup: Boolean;

    HandleHealth: Boolean;
    HandlePrayer: Boolean;
    HandlePoison: Boolean;
    HandleVenom: Boolean;
    HandleAntifire: Boolean;
    HandleBoosts: Boolean;

    HandleCannon: Boolean;
    CannonIsSetup: Boolean;
    DoingSpec: Boolean;
    SlayerTaskFinishedVisible: Boolean;
    SlayerTaskFinished: Boolean;
    LootEnabled: Boolean;
    LootHandler: TRSLootHandler;
    AttackMonsterDelay: Int32;

    BuryBones: Boolean;
    IsSetup: Boolean;
  end;

procedure CombatHandler.DebugLn(text: String); constref; override;
var
  timeStamp: String;
begin
  timeStamp := SRL.TimeStamp();
  text := timeStamp + ':[CombatHandler]: ' + text;
  WriteLn text;
end;


procedure CombatHandler._SetupGear(); static;
begin
  if CombatHandler.GearIsSetup then
    Exit;

  ItemFinder.AddItemName('Saradomin godsword', '20372');

  for CombatHandler.Weapon in WEAPONS do
  begin
    if (CombatHandler.Weapon = 'Null') then
      Break;
    if Equipment.ContainsItem(CombatHandler.Weapon) then
    begin
      Delete(AlchItemArray, AlchItemArray.Find(CombatHandler.Weapon), 1);
      Break;
    end;
  end;
  CombatHandler.DebugLn('Current weapon: ' + ToStr(CombatHandler.Weapon) + '.');

  for CombatHandler.Shield in SHIELDS do
  begin
    if (CombatHandler.Shield = 'Null') then
      Break;
    if Equipment.ContainsItem(CombatHandler.Shield) then
    begin
      Delete(AlchItemArray, AlchItemArray.Find(CombatHandler.Shield), 1);
      Break;
    end;
  end;
  CombatHandler.DebugLn('Current shield: ' + ToStr(CombatHandler.Shield) + '.');

  if Equipment.ContainsItem('Bonecrusher necklace') then
    Antiban.Skills += ERSSkill.PRAYER;

  for CombatHandler.SpecWeapon in SPEC_WEAPONS do
  begin
    if (CombatHandler.SpecWeapon = 'Null') then
      Break;
    if Inventory.ContainsItem(CombatHandler.SpecWeapon) then
    begin
      Delete(AlchItemArray, AlchItemArray.Find(CombatHandler.SpecWeapon), 1);
      Break;
    end;
  end;

  if Inventory.ContainsAny(['Bonecrusher', 'Bonecrusher necklace', 'Ash sanctifier']) then
    Antiban.Skills += ERSSkill.PRAYER;

  if CombatHandler.SpecWeapon <> 'Null' then
    CombatHandler.WeaponSpec := WeaponData.GetInt(ToStr(CombatHandler.SpecWeapon), 'special_attack')
  else
  begin
    if CombatHandler.Weapon <> 'Null' then
      CombatHandler.WeaponSpec := WeaponData.GetInt(CombatHandler.Weapon, 'special_attack');

    if (CombatHandler.WeaponSpec > 0) then
      CombatHandler.SpecWeapon := CombatHandler.Weapon;
  end;

  if CombatHandler.SpecWeapon <> 'Null' then
    CombatHandler.DebugLn('Current spec weapon: ' + ToStr(CombatHandler.SpecWeapon) +
                 '. With ' + ToStr(CombatHandler.WeaponSpec) + '% spec.');

  for CombatHandler.Bracelet in BRACELETS do
    if (CombatHandler.Bracelet = 'Null') or Inventory.ContainsItem(CombatHandler.Bracelet) then
      Break;

  if (CombatHandler.Bracelet <> 'Null') then
  begin
    CombatHandler.DebugLn('Current slayer bracelet: ' + ToStr(CombatHandler.Bracelet) + '.');
    CombatHandler.BraceletTimer.Setup(15 * ONE_MINUTE);
  end;

  CombatHandler.GearIsSetup := (CombatHandler.Weapon <> 'Null') or (CombatHandler.Shield <> 'Null') or
                 (CombatHandler.SpecWeapon <> 'Null') or (CombatHandler.Bracelet <> 'Null');
end;

procedure CombatHandler.Setup(rsMonster: TRSMonster; timer: Int64 = 4000); static;
begin
  if CombatHandler.IsSetup then
    Exit;

  if CombatHandler.AttackMonsterDelay = 0 then
    CombatHandler.AttackMonsterDelay := 5000;

  CombatHandler.InCombatTimer.Setup(Timer);

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  ChatButtons.Open(ERSChatButton.GAME_CHAT);
  CombatHandler.SlayerTaskFinishedVisible := Chat.FindMessage('Slayer master', [CHAT_COLOR_RED]);

  if CombatHandler.HandleHealth := Inventory.ContainsAny(FOOD_ARRAY) then
  begin
    CombatHandler.DebugLn('Food detected and will be used.');
    FoodHandler.MinInvPoints := 1;
    FoodHandler.Setup(ERSConsumable.FOOD_CONSUMABLE);
  end;

  if CombatHandler.HandleBoosts := Inventory.ContainsAny(BOOST_ARRAY) then
  begin
    CombatHandler.DebugLn('Boost potions detected, they will be used.');
    BoostHandler.MinInvPoints := 1;
    BoostHandler.Setup(ERSConsumable.BOOST_CONSUMABLE);
  end;

  if CombatHandler.HandlePrayer := Inventory.ContainsAny(PRAYER_ARRAY) then
  begin
    CombatHandler.DebugLn('Prayer potions detected, prayer will be used.');
    PrayerHandler.MinInvPoints := 1;
    PrayerHandler.Setup(ERSConsumable.PRAYER_CONSUMABLE);
  end;

  if CombatHandler.HandlePoison := Inventory.ContainsAny(ANTI_POISON_ARRAY) then
  begin
    CombatHandler.DebugLn('Anti poison potions detected, they will be used.');
    PoisonHandler.MinInvPoints := 1;
    PoisonHandler.Setup(ERSConsumable.POISON_CONSUMABLE);
  end;

  if CombatHandler.HandleVenom := Inventory.ContainsAny(ANTI_VENOM_ARRAY) then
  begin
    CombatHandler.DebugLn('Anti venom potions detected, they will be used.');
    VenomHandler.MinInvPoints := 1;
    VenomHandler.Setup(ERSConsumable.VENOM_CONSUMABLE);
  end;

  if CombatHandler.HandleAntifire := Inventory.ContainsAny(ANTI_FIRE_ARRAY) then
  begin
    CombatHandler.DebugLn('Anti fire potions detected, they will be used.');
    AntifireHandler.MinInvPoints := 1;
    AntifireHandler.Setup(ERSConsumable.ANTI_FIRE_CONSUMABLE);
  end;

  CombatHandler.HandleCannon := Inventory.ContainsAll(DWARF_CANNON) and
                       Inventory.ContainsAny(CANNON_BALLS);

  if CombatHandler.HandleCannon then
    CombatHandler.DebugLn('Cannon and cannonballs detected. Cannon will be used.');

  CombatHandler.AutoRetaliateEnabled := Combat.GetAutoRetaliate();

  CombatHandler.Monster := rsMonster;
  CombatHandler.IsSetup := True;
end;

procedure CombatHandler.Setup(manage: Boolean; rsMonster: TRSMonster; lootValue: Int32 = 5000; timer: Int64 = 4000); static; overload;
begin
  if CombatHandler.IsSetup then
    Exit;

  CombatHandler.Setup(rsMonster, timer);

  if manage then
  begin
    CombatHandler.ManageGear := True;
    CombatHandler._SetupGear();
    CombatHandler.LootHandler.Setup(rsMonster, lootValue);
    CombatHandler.LootEnabled := CombatHandler.LootHandler.IsSetup;
  end;

  DebugMonsterArray += rsMonster;
end;


procedure CombatHandler.MarkCurrentEnemy(); static;
begin

end;


function CombatHandler.AttackMonster(): Boolean; static;
begin
  if CombatHandler.Monster.SelectOption(['Attack'], 3) then
  begin
    Minimap.WaitMoving();
    Result := MainScreen.WaitInCombat(CombatHandler.AttackMonsterDelay);
  end;

  if Result then
  begin
    if CombatHandler.DoingSpec then
      CombatHandler.DoingSpec := False;
    CombatHandler.InCombatTimer.Restart(Random(0, 2000));
  end;
end;

function CombatHandler.WalkAttackMonster(): Boolean; static;
begin
  if CombatHandler.Monster.WalkSelectOption(['Attack'], 3) then
  begin
    Minimap.WaitMoving();
    Result := MainScreen.WaitInCombat(CombatHandler.AttackMonsterDelay);
  end;

  if Result then
  begin
    if CombatHandler.DoingSpec then
      CombatHandler.DoingSpec := False;
    CombatHandler.InCombatTimer.Restart(Random(0, 2000));
  end;
end;


function CombatHandler.Loot(): Boolean; static;
begin
  if Result := CombatHandler.LootHandler.CheckLoot() then
  begin
    Wait(400, 600);
    if Inventory.ContainsAny(RSAction.AlchItemArray) and
       RSAction.AlchItems(RSAction.AlchItemArray) then
      Wait(600, 800);
    if not CombatHandler.AutoRetaliateEnabled then
      CombatHandler.InCombatTimer.Timeout := GetTickCount();
  end;
end;



function CombatHandler.CheckBracelet(): Boolean; static;
begin
  if not CombatHandler.ManageGear then
    Exit;

  if not CombatHandler.GearIsSetup then
  begin
    CombatHandler._SetupGear;
    CombatHandler.ManageGear := CombatHandler.GearIsSetup;
    if not CombatHandler.GearIsSetup then
      Exit;
  end;

  Result := (CombatHandler.Bracelet <> 'Null') and Equipment.ContainsItem(CombatHandler.Bracelet);

  if Result then
    CombatHandler.BraceletTimer.Restart(Random((-2 * ONE_MINUTE), (2 * ONE_MINUTE)));
end;

function CombatHandler.NeedBracelet(): Boolean; static;
begin
  if not CombatHandler.ManageGear or not CombatHandler.GearIsSetup then
    Exit;

  Result := (CombatHandler.Bracelet <> 'Null') and CombatHandler.BraceletTimer.IsFinished() and
            Inventory.ContainsItem(CombatHandler.Bracelet) and not CombatHandler.CheckBracelet();
end;

function CombatHandler.EquipBracelet(): Boolean; static;
begin
  if not CombatHandler.ManageGear or not CombatHandler.GearIsSetup or (CombatHandler.Bracelet = 'Null') then
    Exit;

  Result := Inventory.ClickItem(CombatHandler.Bracelet);

  if Result then
  begin
    CombatHandler.BraceletTimer.Restart();
    if not CombatHandler.AutoRetaliateEnabled then
      CombatHandler.InCombatTimer.Timeout := GetTickCount();
  end;
end;


function CombatHandler.NeedRegear(): Boolean; static;
begin
  if not CombatHandler.ManageGear then
    Exit;

  if not CombatHandler.GearIsSetup then
  begin
    CombatHandler._SetupGear();
    CombatHandler.ManageGear := CombatHandler.GearIsSetup;
    if not CombatHandler.GearIsSetup then
      Exit;
  end;

  Result := ((CombatHandler.Weapon <> 'Null') and Inventory.ContainsItem(CombatHandler.Weapon)) or
            ((CombatHandler.Shield <> 'Null') and Inventory.ContainsItem(CombatHandler.Shield));

  CombatHandler.DoingSpec := not Result;
end;

function CombatHandler.ReGear(): Boolean; static;
begin
  if not CombatHandler.ManageGear or not CombatHandler.GearIsSetup then
    Exit;

  repeat
    if (CombatHandler.Weapon <> 'Null') then
      begin Inventory.ClickItem(CombatHandler.Weapon); Wait(600, 800); end;
    if (CombatHandler.Shield <> 'Null') then
      begin Inventory.ClickItem(CombatHandler.Shield); Wait(600, 800); end;

    Result := WaitUntil(not CombatHandler.NeedRegear(), 100, 3000);
  until Result;

  if not CombatHandler.AutoRetaliateEnabled then
    CombatHandler.InCombatTimer.Timeout := GetTickCount();
end;


function CombatHandler.CanSpec(): Boolean; static;
begin
  if not CombatHandler.ManageGear then
    Exit;

  if not CombatHandler.GearIsSetup then
  begin
    CombatHandler._SetupGear();
    CombatHandler.ManageGear := CombatHandler.GearIsSetup;
    if not CombatHandler.GearIsSetup then
      Exit;
  end;

  if (CombatHandler.WeaponSpec = 0) then
    Exit;

  if (CombatHandler.SpecWeapon = 'Null') or (CombatHandler.Weapon = 'Null') then
    Exit;

  Result := (Minimap.GetSpecLevel() >= CombatHandler.WeaponSpec) and
            ((CombatHandler.SpecWeapon = CombatHandler.Weapon) or Inventory.ContainsItem(CombatHandler.Weapon) or
            (Inventory.ContainsItem(CombatHandler.SpecWeapon) and Inventory.HasSpace(1)));
  CombatHandler.DoingSpec := Result;
end;

function CombatHandler.DoSpec(): Boolean; static;
begin
  if CombatHandler.ManageGear and not CombatHandler.GearIsSetup then
  begin
    CombatHandler._SetupGear();
    CombatHandler.ManageGear := CombatHandler.GearIsSetup;
    if not CombatHandler.GearIsSetup then
      Exit;
  end;

  if (CombatHandler.SpecWeapon <> CombatHandler.Weapon) and Inventory.ClickItem(CombatHandler.SpecWeapon) then
    if not WaitUntil(Inventory.ContainsItem(CombatHandler.Weapon), 100, 4000) then
      Exit;

  CombatHandler.InCombatTimer.Timeout := GetTickCount();
  Result := CombatHandler.DoingSpec := Minimap.EnableSpec(CombatHandler.WeaponSpec);

  case CombatHandler.SpecWeapon of
    'Granite maul', '4153', '12848':
      begin
        Result := CombatHandler.DoingSpec := True;
        Wait(50, 100);
      end;
    else
      Wait(300, 400);
  end;

  if Result and (Minimap.GetSpecLevel() < CombatHandler.WeaponSpec) then
    CombatHandler.Regear();
end;


function CombatHandler.DoBuryBones(): Boolean; static;
var
  slots: TIntegerArray;
  slot: Int32;
begin
  slots := Inventory.FindItems(REMAINS);
  if slots = [] then
    Exit;

  slot := slots[0];

  Inventory.ClickSlot(slot);
  Inventory.WaitItemFade(slot);
  Result := WaitUntil(not Inventory.IsSlotUsed(slot), 100, 2000);
end;


function CombatHandler.NeedAntiPoison(): Boolean; static;
begin
  if not CombatHandler.HandlePoison and not CombatHandler.HandleVenom then
    Exit;

  Result := PoisonHandler.NeedToConsume() or VenomHandler.NeedToConsume() or
            Minimap.IsPoisoned() or Minimap.IsEnvenomed();
end;

function CombatHandler.NeedAntifire(): Boolean; static;
begin
  Result := CombatHandler.HandleAntifire and AntifireHandler.NeedToConsume();
end;

function CombatHandler.NeedBoost(): Boolean; static;
begin
  Result := CombatHandler.HandleBoosts and BoostHandler.NeedToConsume();
end;


function CombatHandler.Terminate(): Boolean; static;
begin
  if not MainScreen.FindGrave() then
  begin
    Magic.CastSpell(ERSSpell.VARROCK_TELEPORT);
    Wait(10000);
  end;

  Result := Logout.ClickLogout();
  CombatHandler.Fatal('Last state: ' + CombatHandler.State);
end;


procedure CombatHandler.CheckSlayerTask(); static;
begin
  if not CombatHandler.SlayerTaskFinishedVisible and CombatHandler.SlayerTaskFinished then
    Exit;

  if CombatHandler.SlayerTaskFinishedVisible then
    CombatHandler.SlayerTaskFinishedVisible := Chat.FindMessage('Slayer master', [CHAT_COLOR_RED])
  else
    CombatHandler.SlayerTaskFinished := Chat.FindMessage('Slayer master', [CHAT_COLOR_RED]);
end;

//Check for pending action combat handler is taking care of.
function CombatHandler.GetState(): String; static;
var
  PrayCache: Int32;
begin
  if (Minimap.GetHPLevel() <= CombatHandler.MinHitPoints) then
  begin
    if CombatHandler.HandleHealth then
    begin
      Exit('EAT_FOOD');
    end;

    Exit('LOW_HEALTH');
  end;

  if CombatHandler.HandlePrayer then
  begin
    PrayCache := Minimap.GetPrayerLevel();

    if (PrayCache > 0) and not Minimap.IsPrayerEnabled() then
    begin
      Exit('ENABLE_QPRAY');
    end;

    if (PrayCache <= CombatHandler.MinPrayPoints) then
    begin
      if Inventory.ContainsConsumable(ERSConsumable.PRAYER_CONSUMABLE) then
      begin
        Exit('DRINK_PRAYER');
      end;

      Exit('LOW_PRAYER');
    end;
  end;

  if CombatHandler.NeedAntifire() then
  begin
    if Inventory.ContainsConsumable(ERSConsumable.ANTI_FIRE_CONSUMABLE) then
    begin
      Exit('DRINK_ANTIFIRE');
    end;

    Exit('NO_ANTIFIRE');
  end;

  if CombatHandler.NeedAntiPoison() then
  begin
    if CombatHandler.HandleVenom and Inventory.ContainsConsumable(ERSConsumable.VENOM_CONSUMABLE) then
    begin
      Exit('DRINK_ANTIVENOM');
    end;

    if CombatHandler.HandlePoison and Inventory.ContainsConsumable(ERSConsumable.POISON_CONSUMABLE) then
    begin
      Exit('DRINK_ANTIPOISON');
    end;
  end;

  if MainScreen.FindGrave() then
    Exit('PLAYER_DEAD');

  CombatHandler.CheckSlayerTask();

  if CombatHandler.NeedBracelet() then
    Exit('NEED_BRACELET');

  if CombatHandler.NeedBoost() then
  begin
    Exit('DRINK_BOOST');
  end;

  if CombatHandler.DoingSpec and CombatHandler.CanSpec() then
  begin
    Exit('SPEC_MONSTER');
  end;

  if CombatHandler.CanSpec() then
  begin
    Exit('USE_SPECIAL_ATT');
  end;

  if CombatHandler.NeedRegear() then
  begin
    Exit('REEQUIP_GEAR');
  end;

  if CombatHandler.BuryBones and Inventory.ContainsAny(REMAINS) then
  begin
    Exit('BURY_BONES');
  end;

  if not MainScreen.InCombat() then
  begin
    Exit('ATTACK_MONSTER');
  end;

  Result := 'WAIT_IN_COMBAT';
end;


//Check for pending action combat handler is taking care of and do them.
procedure CombatHandler.DoActions(HandlerState: String = ''); static;
begin
  if HandlerState = '' then
    HandlerState := CombatHandler.GetState();
  CombatHandler.State := HandlerState;

  case HandlerState of
    'EAT_FOOD':         Inventory.Consume(ERSConsumable.FOOD_CONSUMABLE);
    'DRINK_PRAYER':     Inventory.Consume(ERSConsumable.PRAYER_CONSUMABLE);
    'DRINK_ANTIFIRE':   Inventory.Consume(ERSConsumable.ANTI_FIRE_CONSUMABLE);
    'DRINK_ANTIVENOM':  Inventory.Consume(ERSConsumable.VENOM_CONSUMABLE);
    'DRINK_ANTIPOISON': Inventory.Consume(ERSConsumable.POISON_CONSUMABLE);
    'DRINK_BOOST':      Inventory.Consume(ERSConsumable.BOOST_CONSUMABLE);
    'ENABLE_QPRAY':     Minimap.EnablePrayer();
    'NEED_BRACELET':    CombatHandler.EquipBracelet();
    'SPEC_MONSTER':     CombatHandler.WalkAttackMonster();
    'USE_SPECIAL_ATT':  CombatHandler.DoSpec();
    'REEQUIP_GEAR':     CombatHandler.ReGear();
    'BURY_BONES':       CombatHandler.DoBuryBones();
    'ATTACK_MONSTER':   CombatHandler.WalkAttackMonster();
    'WAIT_IN_COMBAT':   MainScreen.WaitInCombat(CombatHandler.InCombatTimer.Length);
    'LOW_HEALTH', 'LOW_PRAYER', 'NO_ANTIFIRE', 'PLAYER_DEAD':
      CombatHandler.Terminate;
  else
    raise 'CombatHandler.DoActions received non-registered HandlerState: ' + HandlerState;
  end;

  if CombatHandler.LootEnabled and not CombatHandler.DoingSpec then
    case HandlerState of
      'EAT_FOOD', 'DRINK_PRAYER', 'DRINK_ANTIFIRE', 'DRINK_ANTIVENOM',
      'DRINK_ANTIPOISON', 'DRINK_BOOST', 'ENABLE_QPRAY', 'NEED_BRACELET',
      'BURY_BONES', 'ATTACK_MONSTER', 'WAIT_IN_COMBAT':
      CombatHandler.Loot();
    end;
end;


function TRSXPBar.EarnedXP(currentXP: Int32): Boolean; override;
begin
  Result := inherited;

  if CombatHandler.IsSetup and Result then
    CombatHandler.InCombatTimer.Restart(Random(0, 3000));
end;


function TRSMainScreen.FindHitsplats(): TRSHitsplatArray; override;
begin
  Result := inherited;

  if CombatHandler.IsSetup and (Result <> []) then
    CombatHandler.InCombatTimer.Restart(Random(0, 3000));
end;

function TRSMainScreen.FindDepletedHPBar(): Boolean;
var
  Bar: TRSHPBar;
begin
  for Bar in Self.FindHPBars() do
    if Bar.Percent = 0 then
      Exit(True);
end;

function TRSMainScreen.InCombat(): Boolean; override;
begin
  Result := (CombatHandler.IsSetup and not CombatHandler.InCombatTimer.IsFinished())
            or XPBar.EarnedXP() or (Self.FindHitsplats() <> []);
end;
