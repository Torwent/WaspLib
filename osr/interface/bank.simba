(*
BankPin
=======
Methods to extend and/or modify SRL's bank interface.
*)
{$DEFINE WL_BANK_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

function TRSBank.FindItem(Item: TRSItem; out bounds: TBox): Boolean; override;
var
  boxes: TBoxArray;
  items: TRSItemArray;
  singleItem: TRSItem;
  indices: TIntegerArray;
begin
  if not Self.IsOpen() then
    Exit;

  boxes := Self.FindItemBoundaries();
  items := Item.GetArray();
  for singleItem in items do
  begin
    indices := ItemFinder.Find(singleItem, boxes, 1);
    if Result := indices <> [] then
      Break;
  end;

  if Result then
    bounds := boxes[indices[0]];
end;


function TRSBank.ContainsItem(item: TRSBankWithdrawItem): Boolean; overload;
begin
  Result := Self.ContainsItem(item.Item);
end;

function TRSBank.FindItem(bankTab: Int32; item: TRSItem; out Bounds: TBox): Boolean; overload;
begin
  if Self.OpenTab(bankTab) then
    Result := Self.FindItem(item, Bounds);
end;

function TRSBank.ContainsItem(bankTab: Int32; Item: TRSItem): Boolean; overload;
begin
  if Self.OpenTab(bankTab) then
    Result := Self.ContainsItem(item);
end;

function TRSBank.ContainsItem(bankTab: Int32; item: TRSBankWithdrawItem): Boolean; overload;
begin
  if Self.OpenTab(bankTab) then
    Result := Self.ContainsItem(item);
end;


function TRSBank.ContainsAny(Items: TRSItemArray): Boolean;
var
  Item: TRSItem;
begin
  for Item in Items do
    if Self.ContainsItem(Item) then
      Exit(True);
end;

function TRSBank.FindItems(Items: TRSItemArray; out Bounds: TBox): Boolean; overload
var
  Item: TRSItem;
begin
  for Item in Items do
    if Self.FindItem(Item, Bounds) then
      Exit(True);
end;



function TRSBank.CountSlotStack(Slot: Int32): Int32;
begin
  Result := -1;
  Result := SRL.GetItemAmount(Self.GetSlotBoxes[Slot]);
end;


function TRSBank.DepositAll(): Boolean; override;
var
  buttons: TRSButtonArray;
  i, count: Int32;
begin
  if Inventory.Count() = 0 then
    Exit(True);

  buttons := Self.GetButtons();

  for i := 0 to High(buttons) do
  begin
    count := SRL.CountColor(CTS2(1717089, 13, 0.24, 1.71), buttons[i].Bounds);
    if count > 180 then
      Break;
  end;

  if (i > High(Buttons)) and Bank.IsOpen() then
    TerminateScript('This script needs the "Deposit Inventory" button visible!');

  Result := buttons[i].Click();
end;

function TRSBank.WithdrawHelper(b: TBox; amount: Int32; noted: Boolean; useQuantityButtons: Boolean): Boolean; override;
var
  button: TRSButton;
begin
  if noted then
    button := Self.GetButton(ERSBankButton.NOTE)
  else
    button := Self.GetButton(ERSBankButton.ITEM);

  if not button.Enable() then
    Exit;

  if not useQuantityButtons then
  begin
    Mouse.Move(B);

    case amount of
      BANK_WITHDRAW_ALL:         Exit(ChooseOption.Select('Withdraw-All'));
      BANK_WITHDRAW_ALL_BUT_ONE: Exit(ChooseOption.Select('Withdraw-All-but-1'));
    end;

    Exit(ChooseOption.Select('Withdraw-' + ToString(amount) + ' ', MOUSE_LEFT, True, False) or
         ChooseOption.Select('Withdraw-X') and Chat.AnswerQuery('Enter amount', ToString(amount), Random(2000, 2500)));
  end;

  if not Self.IsCustomQuantity(amount) then
  begin
    case amount of
      1:   button := Self.GetButton(ERSBankButton.QUANTITY_1);
      5:   button := Self.GetButton(ERSBankButton.QUANTITY_5);
      10:  button := Self.GetButton(ERSBankButton.QUANTITY_10);
      else button := Self.GetButton(ERSBankButton.QUANTITY_ALL);
    end;

    if button.Enable() then
    begin
      Result := True;
      Mouse.Click(b, MOUSE_LEFT);
    end;

    Exit;
  end;

  button := Self.GetButton(ERSBankButton.QUANTITY_CUSTOM);
  if not button.Enable() then
    Exit;

  button := Self.GetButton(ERSBankButton.QUANTITY_CUSTOM);
  Mouse.Move(b);

  if (WL.GameSettings.BankWithdrawX = amount) or MainScreen.IsUpText('Withdraw-' + ToString(amount)) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Exit(True);
  end;

  WL.GameSettings.BankWithdrawX := 0; //in case we falsely return the next statement true we reset this.
  Result := ChooseOption.Select('Withdraw-X') and Chat.AnswerQuery('Enter amount', ToString(amount), Random(2000, 4000));
  if Result then
    WL.GameSettings.BankWithdrawX := amount;
end;


function TRSBank.WithdrawSlot(Tab: Int32; Item: TRSBankWithdrawSlot; useQuantityButtons: Boolean): Boolean; overload;
var
  ItemCount: Int32;
begin
  if not Self.IsOpen or (Tab = -1) then
    Exit;

  Self.OpenTab(Tab);

  ItemCount := Self.CountSlotStack(Item.Slot);
  if Self.WithdrawSlot(Item, UseQuantityButtons) then
    Result := WaitUntil(Self.CountSlotStack(Item.Slot) < ItemCount, 100, 2000);
end;


function TRSBank.WithdrawItem(out tab: Int32; item: TRSBankWithdrawItem; useQuantityButtons: Boolean): Boolean; overload;
var
  b: TBox;
  count: Int32;
begin
  if not Self.IsOpen() then
    Exit;

  if Inventory.IsFull() and (Length(Item.Item.GetArray()) =1 ) and not Inventory.ItemIsStackable(Item.Item) then
    Exit;

  if not Self.FindItem(item.Item, b) then
  begin
    if tab = -1 then
      tab := Self.FindItemTab(item.Item)
    else
      Self.OpenTab(tab);

    if not Self.FindItem(item.Item, b) then
      Exit(False);
  end;

  count := SRL.GetItemAmount(b);
  if Self.WithdrawHelper(b, item.Quantity, item.Noted, useQuantityButtons) then
    Result := WaitUntil(SRL.GetItemAmount(b) < count, 100, 2000);
end;

function TRSBank.WithdrawItems(Tab: Int32; Items: array of TRSBankWithdrawItem; UseQuantityButtons: Boolean): Boolean;
var
  Item: TRSBankWithdrawItem;
begin
  for Item in Items do
    if not Self.WithdrawItem(Tab, Item, UseQuantityButtons) then
      Exit(False);

  Result := True;
end;



function TRSBank.DepositItem(Tab: Int32; Item: TRSBankDepositItem; UseQuantityButtons: Boolean): Boolean; overload;
var
  IsStackable: Boolean;
  ItemCount: Int32;
begin
  if not Self.IsOpen then
    Exit;

  if IsStackable := Inventory.ItemIsStackable(Item.Item) then
    ItemCount := Inventory.CountItemStack(Item.Item)
  else
    ItemCount := Inventory.CountItem(Item.Item);

  if Tab > -1 then
    Self.OpenTab(Tab);

  if Self.DepositItem(Item, UseQuantityButtons) then
  begin
    if IsStackable then
      Result := WaitUntil((Inventory.CountItemStack(Item.Item) <> ItemCount), 50, 2000)
    else
      Result := WaitUntil((Inventory.CountItem(Item.Item) <> ItemCount), 50, 2000);
  end;
end;

function TRSBank.DepositItem(Tab: Int32; Item: TRSItem; UseQuantityButtons: Boolean): Boolean; overload;
begin
  Result := Self.DepositItem(Tab, [Item, BANK_DEPOSIT_ALL], UseQuantityButtons);
end;

function TRSBank.DepositItemArray(Tab: Int32; ItemArray: array of TRSBankDepositItem; UseQuantityButtons: Boolean): Boolean;
var
  Item: TRSBankDepositItem;
  ItemList: array of TRSBankDepositItem;
begin
  for Item in ItemArray do
    if Inventory.ContainsItem(Item.Item) then
      ItemList += Item;

  for Item in Itemlist do
    if not Self.DepositItem(Tab, Item, UseQuantityButtons) then
      Exit(False);

  Result := True;
end;

function TRSBank.DepositItemArray(Tab: Int32; ItemArray: TRSItemArray; UseQuantityButtons: Boolean): Boolean; overload;
var
  Item: TRSItem;
  ItemList: TRSItemArray;
begin
  for Item in ItemArray do
    if Inventory.ContainsItem(Item) then
      ItemList += Item;

  for Item in ItemList do
    Self.DepositItem(Tab, Item, UseQuantityButtons);

  Result := not Inventory.ContainsAny(ItemList);
end;


function TRSBank.DepositAllBut(Tab: Int32; Items: TRSItemArray): Boolean;
var
  Item: TRSItem;
  Slots: TIntegerArray;
  DepositSlots: TIntegerArray;
begin
  if not Self.IsOpen then
    Exit;

  if Tab > -1 then
    Self.OpenTab(Tab);

  for Item in Items do
    Inventory.FindItem(Item, Slots);

  DepositSlots := Slots.Difference(Inventory.GetUsedSlots);

  if DepositSlots <> [] then
  repeat
    if not Self.IsOpen then //Exit in case the bank somehow closed.
      Exit;

    if Self.DepositSlot([DepositSlots[0], BANK_DEPOSIT_ALL], True) then
      WaitUntil(not Inventory.IsSlotUsed(DepositSlots[0]), 100, 2000);

    DepositSlots := Slots.Difference(Inventory.GetUsedSlots);
  until Result := (DepositSlots = []);
end;


function TRSBank.Close(PressEscape: Boolean = False): Boolean; override;
begin
  if not Self.IsOpen(False) then
    Exit(True);

  Result := MainScreen.CloseInterface(PressEscape);
end;

function TRSBank.Close(chance: Double): Boolean; overload;
var
  pressEscape: Boolean;
begin
  if chance = BioHash then
    pressEscape := Antiban.BioDice()
  else
    pressEscape := SRL.Dice(chance);

  Result := MainScreen.CloseInterface(pressEscape);
end;

//Temporarily here.
function TRSDepositBox.Close(PressEscape: Boolean = False): Boolean; override;
begin
  if not Self.IsOpen then
    Exit(True);

  Result := MainScreen.CloseInterface(PressEscape);
end;

//Temporarily here.
function TRSGrandExchange.Close(PressEscape: Boolean = False): Boolean; override;
begin
  if not Self.IsOpen then
    Exit(True);

  Result := MainScreen.CloseInterface(PressEscape);
end;

