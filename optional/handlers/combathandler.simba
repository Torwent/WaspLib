(*
# CombatHandler
CombatHandler is a record made to handle combat.

This is not made to handle literally every scenario, specially bossing is not
recommended as custom made methods will probably perform much better, but for
for general purpose combat this should be enough!
*)

{$DEFINE WL_COMBAT_HANDLER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

{$IFNDEF WL_LOOT_HANDLER_INCLUDED}
  {$I WaspLib/optional/handlers/loothandler.simba}
{$ENDIF}

const
  WEAPONS: TRSItemArray = [
    'Keris partisan', 'Keris partisan of breaching',
    'Ghrazi rapier', 'Blade of saeldor (c)', 'Inquisitor''s mace',
    'Toktz-xil-ak', 'Abyssal whip', 'Abyssal bludgeon',
    'Abyssal dagger', 'Abyssal dagger (p++)', 'Saradomin sword',
    'Dragon scimitar', 'Dragon sword', 'Dragon longsword',
    'Dharok''s greataxe', 'Sarachnis cudgel', 'Dinh''s bulwark',
    'Dragon hunter lance', 'Abyssal tentacle', 'Granite hammer',
    'Bow of faerdhinen (c)', 'Toxic blowpipe', 'Magic shortbow',
    'Magic shortbow (i)', 'Armadyl crossbow', 'Dragon hunter crossbow',
    'Venator bow', 'Dragon crossbow', 'Rune crossbow', 'Adamant dart',
    'Mithril dart', 'Rune scimitar', 'Dorgeshuun crossbow',
    'Leaf-bladed sword', 'Leaf-bladed battleaxe', 'Zombie axe', 
	'Osmumten''s fang', 'Null'
  ];

  SHIELDS: TRSItemArray = [
    'Avernic defender', 'Dragon defender', 'Rune defender',
    'Adamant defender', 'Mithril defender', 'Black defender',
    'Steel defender', 'Iron defender', 'Bronze defender',
    'Dragonfire shield', 'Toktz-ket-xil', 'Twisted buckler',
    'Dragonfire ward', 'Odium ward', 'Book of law',
    'Book of darkness', 'Unholy book', 'Book of war', 'Rune kiteshield', 'Dragon defender (t)',
    'Null'
  ];

  SPEC_WEAPONS: TRSItemArray = [
    'Dragon claws', '4153', '12848', 'Granite maul', 'Abyssal dagger',
    'Abyssal dagger (p++)', 'Dragon dagger', 'Dragon dagger(p++)',
    'Dragon sword', 'Dragon longsword', 'Dinh''s bulwark', 'Abyssal tentacle',
    'Saradomin godsword', 'Granite hammer', 'Toxic blowpipe', 'Magic shortbow',
    'Magic shortbow (i)', 'Armadyl crossbow', 'Dragon crossbow', 'Dragon thrownaxe',
    'Osmumten''s fang', 'Null'
  ];

  BRACELETS: TRSItemArray = [
    'Bracelet of slaughter',
    'Expeditious bracelet',
    'Null'
  ];

  DWARF_CANNON: TRSItemArray = [
    'Cannon base',
    'Cannon stand',
    'Cannon barrels',
    'Cannon furnace'
  ];

  CANNON_BALLS: TRSItemArray = [
    'Cannonball',
    'Granite cannonball'
  ];

  REMAINS: TRSItemArray = [
    'Bones', 'Wolf bones', 'Monkey bones', 'Bat bones', 'Big bones',
    'Jogre bones', 'Zogre bones', 'Babydragon bones', 'Wyrm bones',
    'Wyvern bones', 'Dragon bones', 'Drake bones', 'Lava dragon bones',
    'Hydra bones', 'Dagannoth bones', 'Superior dragon bones',
    'Fiendish ashes', 'Vile ashes', 'Malicious ashes',
    'Abyssal ashes', 'Infernal ashes'
  ];


type
  ECombatState = (
    UNKNOWN_COMBAT_STATE,

    EAT_FOOD, LOW_HEALTH,
    ENABLE_QPRAY, DRINK_PRAYER, LOW_PRAYER,
    DRINK_ANTIFIRE, NO_ANTIFIRE,
    DRINK_ANTIVENOM, DRINK_ANTIPOISON,

    PLAYER_DEAD,

    SETUP_GEAR, NEED_BRACELET, SPEC_MONSTER,
    USE_SPECIAL_ATT, REEQUIP_GEAR, SAFE_SPOT,

    DRINK_STR_BOOST, DRINK_ATK_BOOST, DRINK_DEF_BOOST,
    DRINK_RNG_BOOST, DRINK_MGC_BOOST, DRINK_BOOST,
    BURY_BONES,

    ATTACK_MONSTER, WAIT_IN_COMBAT, DO_LOOT
  );

  TRSCombatHandler = record(TSRLBaseRecord)
    State: ECombatState;
    Monster: TRSMonster;
    MonsterWalkerCoord, SafeSpot: TPoint;

    BraceletTimer, InCombatTimer: TCountDown;

    CombatStyle: TRSCombatStyle;

    Weapon, Shield, SpecWeapon, Bracelet: TRSItem;

    MinHitPoints, MinPrayPoints, WeaponSpec, AttackMonsterDelay: Int32;
    TotalKills: UInt32;

    ManageGear, GearIsSetup, AutoRetaliateEnabled, AutoRetaliateChecked, QuickPrayerIsSetup,
    HandleCannon, CannonIsSetup, DoingSpec, UseSafeSpot,
    SlayerTaskFinishedVisible, SlayerTaskFinished, LootEnabled, BuryBones,
    IsFighting, Looted, IsSetup: Boolean;

    HandleConsumables: array [ERSConsumable] of Boolean;

    LootHandler: TRSLootHandler;
  end;

procedure TRSCombatHandler._SetupGear();
begin
  if Self.GearIsSetup then
    Exit;

  ItemFinder.AddItemName('Saradomin godsword', '20372');

  for Self.Weapon in WEAPONS do
  begin
    if (Self.Weapon = 'Null') then
      Break;
    if Equipment.ContainsItem(Self.Weapon) then
    begin
      Delete(RSAlchHandler.ItemArray, RSAlchHandler.ItemArray.Find(Self.Weapon), 1);
      Break;
    end;
  end;
  Self.DebugLn('Current weapon: ' + ToStr(Self.Weapon) + '.');

  for Self.Shield in SHIELDS do
  begin
    if (Self.Shield = 'Null') then
      Break;
    if Equipment.ContainsItem(Self.Shield) then
    begin
      Delete(RSAlchHandler.ItemArray, RSAlchHandler.ItemArray.Find(Self.Shield), 1);
      Break;
    end;
  end;
  Self.DebugLn('Current shield: ' + ToStr(Self.Shield) + '.');

  if Equipment.ContainsItem('Bonecrusher necklace') then
    Antiban.Skills += ERSSkill.PRAYER;

  for Self.SpecWeapon in SPEC_WEAPONS do
  begin
    if (Self.SpecWeapon = 'Null') then
      Break;
    if Inventory.ContainsItem(Self.SpecWeapon) then
    begin
      Delete(RSAlchHandler.ItemArray, RSAlchHandler.ItemArray.Find(Self.SpecWeapon), 1);
      Break;
    end;
  end;

  if Inventory.ContainsAny(['Bonecrusher', 'Bonecrusher necklace', 'Ash sanctifier']) then
    Antiban.Skills += ERSSkill.PRAYER;

  if Self.SpecWeapon <> 'Null' then
    Self.WeaponSpec := WeaponData.GetInt(ToStr(Self.SpecWeapon), 'special_attack')
  else
  begin
    if Self.Weapon <> 'Null' then
      Self.WeaponSpec := WeaponData.GetInt(Self.Weapon, 'special_attack');

    if (Self.WeaponSpec > 0) then
      Self.SpecWeapon := Self.Weapon;
  end;

  if Self.SpecWeapon <> 'Null' then
    Self.DebugLn('Current spec weapon: ' + ToStr(Self.SpecWeapon) +
                 '. With ' + ToStr(Self.WeaponSpec) + '% spec.');

  for Self.Bracelet in BRACELETS do
    if (Self.Bracelet = 'Null') or Inventory.ContainsItem(Self.Bracelet) then
      Break;

  if (Self.Bracelet <> 'Null') then
  begin
    Self.DebugLn('Current slayer bracelet: ' + ToStr(Self.Bracelet) + '.');
    Self.BraceletTimer.Setup(15 * ONE_MINUTE);
  end;

  Self.GearIsSetup := (Self.Weapon <> 'Null') or (Self.Shield <> 'Null') or
                 (Self.SpecWeapon <> 'Null') or (Self.Bracelet <> 'Null');
end;


procedure TRSCombatHandler._ShouldHandleConsumable(consumable: ERSConsumable);
begin
  Self.HandleConsumables[consumable] := Inventory.ContainsAny(CONSUMABLE_ARRAYS[consumable]);

  if  Self.HandleConsumables[consumable] then
  begin
    Self.DebugLn(ToStr(consumable) + ' detected, they will be used.');
    CONSUMABLE_HANDLER_ARRAY[consumable]^.MinInvPoints := 1;
    CONSUMABLE_HANDLER_ARRAY[consumable]^.Setup(consumable);
  end;
end;

procedure TRSCombatHandler.Setup(rsMonster: TRSMonster; timer: Int64 = 4000; safeSpotTile: TPoint =  [-1, -1]);
var
  eConsumable: ERSConsumable;
begin
  if Self.IsSetup then
    Exit;

  Self.Name := 'CombatHandler';

  if Self.AttackMonsterDelay = 0 then
    Self.AttackMonsterDelay := 5000;

  Self.InCombatTimer.Setup(Timer);

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  ChatButtons.Open(ERSChatButton.GAME_CHAT);
  Self.SlayerTaskFinishedVisible := Chat.FindMessage('Slayer master', [CHAT_COLOR_RED]);


  for eConsumable := ERSConsumable(0) to ERSConsumable(High(ERSConsumable)-2) do
    Self._ShouldHandleConsumable(eConsumable);

  for eConsumable := ERSConsumable.STRENGTH_BOOST to ERSConsumable.BOOST do
  begin
    if Self.HandleConsumables[eConsumable] then
      Break;
    if eConsumable = ERSConsumable.BOOST then
      Self._ShouldHandleConsumable(ERSConsumable.BOOST);
  end;

  Self.HandleCannon := Inventory.ContainsAll(DWARF_CANNON) and
                       Inventory.ContainsAny(CANNON_BALLS);

  if Self.HandleCannon then
    Self.DebugLn('Cannon and cannonballs detected. Cannon will be used.');

  if not Self.AutoRetaliateChecked then
    Combat.GetAutoRetaliate();

  Self.Monster := rsMonster;
  Self.SafeSpot := safeSpotTile;
  Self.UseSafeSpot := safeSpotTile <> [-1,-1];

  Self.Looted := True;
  Self.IsSetup := True;
end;

procedure TRSCombatHandler.Setup(manage: Boolean; rsMonster: TRSMonster; lootValue: Int32 = 5000; timer: Int64 = 4000; safeSpotTile: TPoint =  [-1, -1]);  overload;
begin
  if Self.IsSetup then
    Exit;

  Self.Setup(rsMonster, timer, safeSpotTile);

  if manage then
  begin
    Self.ManageGear := True;
    Self._SetupGear();
  end;

  if lootValue > 0 then
  begin
    Self.LootHandler.Setup(rsMonster, lootValue);
    Self.LootEnabled := Self.LootHandler.IsSetup;
  end;

  DebugMonsterArray += rsMonster;
end;


function TRSCombatHandler.GetMonsterDot(msCoord: TPoint): TPoint;
var
  me, monster: TPoint;
  b: TBox;
  dots: TPointArray;
begin
  monster := MainScreen.PointToMM(msCoord, Round(Self.Monster.ShapeArray[0].Tile.Z)).ToPoint();
  b := Box(monster, 6, 6);
  dots := Minimap.GetDots(ERSMinimapDot.NPC, b);

  if dots = [] then
    Exit;

  Result := dots[0];
  RSClient.Clear(Minimap.Bounds());
  RSClient.DrawCrosshair(Result + [2,2], 4, $3FFF98);

  if Self.Monster.Filter.Walker then
  begin
    me := ScriptWalker^.GetMyPos();
    Result := me + (Result - Minimap.Center());
    Result := Result.Rotate(-Minimap.GetCompassAngle(False), me);
  end;
end;

function TRSCombatHandler.WaitHitSplats(): Boolean;
var
  t: UInt64;
  i: Int32;
  tmp, splats: TRSHitsplatArray;
  b: TBox;
begin
  t := GetTickCount() + 3000;
  b := MainScreen.GetPlayerBox();

  repeat
    tmp := MainScreen.FindHitsplats();

    for i := 0 to High(tmp) do
      if not b.Contains(tmp[i].Position) then
        splats += tmp[i];

    Result := splats <> [];
    if Result then
      Break;
  until GetTickCount() > t;

  if Result then
  begin
    Self.MonsterWalkerCoord := Self.GetMonsterDot(splats[0].Position);
    Self.IsFighting := True;
    Self.DoingSpec := False;
    Self.InCombatTimer.Restart(Random(0, 2000));
  end;
end;

function TRSCombatHandler.AttackMonster(attempts: Int32 = 3): Boolean;
begin
  if Self.Monster.SelectOption(['Attack'], attempts) then
  begin
    Minimap.WaitMoving();
    Result := Self.WaitHitSplats();
  end;
end;

function TRSCombatHandler.WalkAttackMonster(attempts: Int32 = 3): Boolean;
begin
  if not Self.Monster.Filter.Walker then
    Exit(Self.AttackMonster(attempts));

  if Self.Monster.WalkSelectOption(['Attack'], attempts) then
  begin
    Minimap.WaitMoving();
    Result := Self.WaitHitSplats();
  end;
end;


function TRSCombatHandler.Loot(dots: TPointArray = []; attempt: Int32 = 0): Boolean;
var
  match: TRSItemFinderMatch;
  size: Single;
  p: TPoint;
  b: TBox;
  tmp: TPointArray;
begin
  if attempt > 2 then
    Exit;

  Self.Looted := True;
  Self.IsFighting := False;
  if not Self.Monster.Filter.Walker or
    (Self.MonsterWalkerCoord = []) or (Self.MonsterWalkerCoord = [0,0]) then
    p := Minimap.Center()
  else
    p := ScriptWalker^.WorldToMM(Self.MonsterWalkerCoord);

  size := Self.Monster.ShapeArray[0].Tile.X;

  b := Box(p, Ceil(size), Ceil(size)).Expand(12);

  if not WaitUntil(Length(tmp := Minimap.GetDots(ERSMinimapDot.ITEM, b)) > Length(dots), 300, 3000) then
    Exit(Self.Loot(tmp, attempt+1));

  dots := tmp.Difference(dots);

  if dots = [] then
    Exit;

  if Result := Self.LootHandler.CheckLoot(dots) then
  begin
    Wait(600, 800);

    if not RSAlchHandler.Disabled then
    begin
      match := Inventory.ItemInterface.FindAny(RSAlchHandler.ItemArray);
      if match <> [] then
      begin
        RSAlchHandler.Item := match.Item;
        RSAlchHandler.CastAlchemy();
      end;
    end;
  end;
end;


procedure TRSCombatHandler.SetupGear();
begin
  Self._SetupGear();
  Self.ManageGear := Self.GearIsSetup;
end;

function TRSCombatHandler.CheckBracelet(): Boolean;
begin
  if Self.Bracelet = 'Null' then
    Exit;

  Result := Equipment.ContainsItem(Self.Bracelet);

  if Result then
    Self.BraceletTimer.Restart(Random((-2 * ONE_MINUTE), (2 * ONE_MINUTE)));
end;

function TRSCombatHandler.NeedBracelet(): Boolean;
begin
  if Self.Bracelet = 'Null' then
    Exit;

  Result := Self.BraceletTimer.IsFinished() and
            Inventory.ContainsItem(Self.Bracelet) and not Self.CheckBracelet();
end;

function TRSCombatHandler.EquipBracelet(): Boolean;
var
  count: Int32;
begin
  if Self.Bracelet = 'Null' then
    Exit;

  count := Inventory.Count();
  if Inventory.Open() and Inventory.ClickItem(Self.Bracelet) then
    Result := WaitUntil(Inventory.Count() < count, 300, 3000);

  if Result then
  begin
    Self.BraceletTimer.Restart();
    if not Self.AutoRetaliateEnabled then
      Self.InCombatTimer.Timeout := GetTickCount();
  end;
end;


function TRSCombatHandler.NeedRegear(): Boolean;
begin
  Result := ((Self.Weapon <> 'Null') and Inventory.ContainsItem(Self.Weapon)) or
            ((Self.Shield <> 'Null') and Inventory.ContainsItem(Self.Shield));

  Self.DoingSpec := not Result;
end;

function TRSCombatHandler.ReGear(): Boolean;
begin
  repeat
    if (Self.Weapon <> 'Null') then
      begin Inventory.ClickItem(Self.Weapon); Wait(600, 800); end;
    if (Self.Shield <> 'Null') then
      begin Inventory.ClickItem(Self.Shield); Wait(600, 800); end;

    Result := WaitUntil(not Self.NeedRegear(), 100, 3000);
  until Result;

  if not Self.AutoRetaliateEnabled then
    Self.InCombatTimer.Timeout := GetTickCount();
end;


function TRSCombatHandler.CanSpec(): Boolean;
begin
  if (Self.WeaponSpec = 0) then
    Exit;

  if (Self.SpecWeapon = 'Null') or (Self.Weapon = 'Null') then
    Exit;

  Result := (Minimap.GetSpecLevel() >= Self.WeaponSpec) and
            ((Self.SpecWeapon = Self.Weapon) or Inventory.ContainsItem(Self.Weapon) or
            (Inventory.ContainsItem(Self.SpecWeapon) and Inventory.HasSpace(1)));
  Self.DoingSpec := Result;
end;

function TRSCombatHandler.DoSpec(): Boolean;
begin
  if (Self.SpecWeapon <> Self.Weapon) and Inventory.ClickItem(Self.SpecWeapon) then
    if not WaitUntil(Inventory.ContainsItem(Self.Weapon), 100, 4000) then
      Exit;

  Self.InCombatTimer.Timeout := GetTickCount();
  Result := Self.DoingSpec := Minimap.EnableSpec(Self.WeaponSpec);

  case Self.SpecWeapon of
    'Granite maul', '4153', '12848':
      begin
        Result := Self.DoingSpec := True;
        Wait(50, 100);
      end;
    else
      Wait(300, 400);
  end;

  if Result and (Minimap.GetSpecLevel() < Self.WeaponSpec) then
    Self.Regear();
end;


function TRSCombatHandler.DoBuryBones(): Boolean;
var
  slots: TIntegerArray;
  slot: Int32;
begin
  if not Inventory.FindItems(REMAINS, slots) then
    Exit;

  slot := slots[0];

  Inventory.ClickSlot(slot);
  Inventory.WaitItemFade(slot);
  Result := WaitUntil(not Inventory.IsSlotUsed(slot), 100, 2000);
end;


function TRSCombatHandler.NeedAntiPoison(): Boolean;
begin
  if not Self.HandleConsumables[ERSConsumable.POISON] and
     not Self.HandleConsumables[ERSConsumable.VENOM] then
    Exit;

  Result := PoisonHandler.NeedToConsume() or VenomHandler.NeedToConsume() or
            Minimap.IsPoisoned() or Minimap.IsEnvenomed();
end;

function TRSCombatHandler.NeedConsumable(consumable: ERSConsumable): Boolean;
begin
  Result := Self.HandleConsumables[consumable] and CONSUMABLE_HANDLER_ARRAY[consumable]^.NeedToConsume();
end;



function TRSCombatHandler.Terminate(): Boolean;
begin
  if not MainScreen.FindGrave() then
  begin
    Magic.CastSpell(ERSSpell.VARROCK_TELEPORT);
    Wait(10000);
  end;

  Result := Logout.ClickLogout();
  Self.Fatal('Last state: ' + ToStr(Self.State));
end;


procedure TRSCombatHandler.CheckSlayerTask();
begin
  if not Self.SlayerTaskFinishedVisible and Self.SlayerTaskFinished then
    Exit;

  if Self.SlayerTaskFinishedVisible then
    Self.SlayerTaskFinishedVisible := Chat.FindMessage('Slayer master', [CHAT_COLOR_RED])
  else
    Self.SlayerTaskFinished := Chat.FindMessage('Slayer master', [CHAT_COLOR_RED]);
end;


function TRSCombatHandler.WaitCombatEnd(): Boolean;
var
  t: UInt64;
begin
  t := GetTickCount() + 3400;
  repeat
    if not RSClient.IsLoggedIn() then
      Exit(True);

    if MainScreen.InCombat() then
      Exit;

    Wait(300);
    Result := GetTickCount() > t;
  until Result;

  if not Result then
    RSClient.Clear(MainScreen.Bounds());

  Self.IsFighting := not Result;

  if Result then
  begin
    Self.TotalKills += 1;
    Self.Looted := False;
  end;
end;


function TRSCombatHandler.Consume(consumable: ERSConsumable): Boolean;
begin
  Result := Inventory.Consume(consumable);

  if Self.UseSafeSpot then
    Self.IsFighting := not Result;

  if Result or Inventory.ContainsConsumable(consumable) then
    Exit;

  Self.HandleConsumables[consumable] := False;
end;


function TRSCombatHandler.WalkSafeSpot(): Boolean;
begin
  Self.IsFighting := False;
  Result := ScriptWalker^.WebWalk(Self.SafeSpot, 8, 0.2);
end;


//Check for pending action combat handler is taking care of.
function TRSCombatHandler.GetConsumableState(): ECombatState;
var
  pray: Int32;
begin
  if Minimap.GetHPLevel() <= Self.MinHitPoints then
  begin
    if Self.HandleConsumables[ERSConsumable.FOOD] then
      Exit(ECombatState.EAT_FOOD);

    Exit(ECombatState.LOW_HEALTH);
  end;

  if Self.HandleConsumables[ERSConsumable.PRAYER] then
  begin
    pray := Minimap.GetPrayerLevel();

    if (pray > 0) and not Minimap.IsPrayerEnabled() then
      Exit(ECombatState.ENABLE_QPRAY);

    if (pray <= Self.MinPrayPoints) then
    begin
      if Inventory.ContainsConsumable(ERSConsumable.PRAYER) then
        Exit(ECombatState.DRINK_PRAYER);

      Exit(ECombatState.LOW_PRAYER);
    end;
  end;

  if Self.NeedConsumable(ERSConsumable.ANTI_FIRE) then
  begin
    if Inventory.ContainsConsumable(ERSConsumable.ANTI_FIRE) then
      Exit(ECombatState.DRINK_ANTIFIRE);

    Exit(ECombatState.NO_ANTIFIRE);
  end;

  if Self.NeedAntiPoison() then
  begin
    if Self.HandleConsumables[ERSConsumable.VENOM] and Inventory.ContainsConsumable(ERSConsumable.VENOM) then
      Exit(ECombatState.DRINK_ANTIVENOM);

    if Self.HandleConsumables[ERSConsumable.POISON] and Inventory.ContainsConsumable(ERSConsumable.POISON) then
      Exit(ECombatState.DRINK_ANTIPOISON);
  end;

  Result := ECombatState.UNKNOWN_COMBAT_STATE;
end;

function TRSCombatHandler.GetBoostState(): ECombatState;
begin
  if Self.NeedConsumable(ERSConsumable.STRENGTH_BOOST) then
    Exit(ECombatState.DRINK_STR_BOOST);

  if Self.NeedConsumable(ERSConsumable.ATTACK_BOOST) then
    Exit(ECombatState.DRINK_ATK_BOOST);

  if Self.NeedConsumable(ERSConsumable.DEFENCE_BOOST) then
    Exit(ECombatState.DRINK_DEF_BOOST);

  if Self.NeedConsumable(ERSConsumable.RANGING_BOOST) then
    Exit(ECombatState.DRINK_RNG_BOOST);

  if Self.NeedConsumable(ERSConsumable.MAGIC_BOOST) then
    Exit(ECombatState.DRINK_MGC_BOOST);

  if Self.NeedConsumable(ERSConsumable.BOOST) then
    Exit(ECombatState.DRINK_BOOST);

  Result := ECombatState.UNKNOWN_COMBAT_STATE;
end;



function TRSCombatHandler.FindTaggedMonsters(dots: TPointArray; offset: TPoint = [0, 0]): TPointArray;
var
  i, j, hi: Int32;
  p: TPoint;
  rotatedDots, last: TPointArray;
  atpa: T2DPointArray;
  b: TBox;
  rect: TRectangle;
  angle: Double;
begin
  p := Minimap.Center();
  angle := Minimap.GetCompassAngle(False);
  atpa := dots.Cluster(6).SortFrom(p);

  if atpa = [] then
    Exit;

  dots := atpa[0];
  if offset <> [0, 0] then
    dots := dots.Offset(offset);
  rotatedDots := dots.Rotate(angle, Minimap.Center().X, Minimap.Center().Y);

  b := Box(Minimap.Center(), 2, 2);
  for i := 0 to 8 do
  begin
    b := b.Expand(4);
    rect := b.ToRectangle().Rotate(angle);

    hi := High(rotatedDots);
    for j := 0 to hi do
      if  rect.Contains(rotatedDots[j]) then
      begin
        Result += dots[j];
        Delete(dots, j, 1);
        Delete(rotatedDots, j, 1);
        hi -= 1;
        j -= 1;
      end;

    if Result = last then
      Exit;

    last := Result;
  end;
end;

function TRSCombatHandler.FindTaggedMonsters(): TPointArray; overload;
begin
  Result := Self.FindTaggedMonsters(Minimap.GetDots(ERSMinimapDot.NPC));
end;

function TRSCombatHandler.FindRoamingMonsters(): TPointArray;
begin
  Result := Minimap.GetDots(ERSMinimapDot.NPC).Offset(2, 2);
  Result := Result.Difference(Self.FindTaggedMonsters(Result, [0, 0]));
end;

function TRSCombatHandler.GetState(): ECombatState;
begin
  Result := Self.GetConsumableState();
  if Result <> ECombatState.UNKNOWN_COMBAT_STATE then
    Exit;

  if MainScreen.FindGrave() then
    Exit(ECombatState.PLAYER_DEAD);

  Self.CheckSlayerTask();

  Result := Self.GetBoostState();
  if Result <> ECombatState.UNKNOWN_COMBAT_STATE then
    Exit;

  if Self.ManageGear then
  begin
    if not Self.GearIsSetup then
      Exit(ECombatState.SETUP_GEAR);

    if Self.NeedBracelet() then
      Exit(ECombatState.NEED_BRACELET);

    if Self.DoingSpec and Self.CanSpec() then
      Exit(ECombatState.SPEC_MONSTER);

    if Self.CanSpec() then
      Exit(ECombatState.USE_SPECIAL_ATT);

    if Self.NeedRegear() then
      Exit(ECombatState.REEQUIP_GEAR);
  end;

  if Self.BuryBones and Inventory.ContainsAny(REMAINS) then
    Exit(ECombatState.BURY_BONES);

  if Self.UseSafeSpot and not ScriptWalker^.AtTile(Self.SafeSpot, 6) then
    Exit(ECombatState.SAFE_SPOT);

  if Self.IsFighting then
    Exit(ECombatState.WAIT_IN_COMBAT);

  if Self.LootEnabled and not Self.Looted then
    Exit(ECombatState.DO_LOOT);

  Result := ECombatState.ATTACK_MONSTER;
end;

//Check for pending action combat handler is taking care of and do them.
procedure TRSCombatHandler.DoActions(handlerState: ECombatState = ECombatState.UNKNOWN_COMBAT_STATE);
begin
  if handlerState = ECombatState.UNKNOWN_COMBAT_STATE then
    handlerState := Self.GetState();

  Self.State := handlerState;

  case handlerState of
    ECombatState.EAT_FOOD:         Self.Consume(ERSConsumable.FOOD);
    ECombatState.DRINK_PRAYER:     Self.Consume(ERSConsumable.PRAYER);
    ECombatState.DRINK_ANTIFIRE:   Self.Consume(ERSConsumable.ANTI_FIRE);
    ECombatState.DRINK_ANTIVENOM:  Self.Consume(ERSConsumable.VENOM);
    ECombatState.DRINK_ANTIPOISON: Self.Consume(ERSConsumable.POISON);
    ECombatState.DRINK_STR_BOOST:  Self.Consume(ERSConsumable.STRENGTH_BOOST);
    ECombatState.DRINK_ATK_BOOST:  Self.Consume(ERSConsumable.ATTACK_BOOST);
    ECombatState.DRINK_DEF_BOOST:  Self.Consume(ERSConsumable.DEFENCE_BOOST);
    ECombatState.DRINK_RNG_BOOST:  Self.Consume(ERSConsumable.RANGING_BOOST);
    ECombatState.DRINK_MGC_BOOST:  Self.Consume(ERSConsumable.MAGIC_BOOST);
    ECombatState.DRINK_BOOST:      Self.Consume(ERSConsumable.BOOST);

    ECombatState.ENABLE_QPRAY:     Minimap.EnablePrayer();

    ECombatState.SETUP_GEAR:       Self.SetupGear();
    ECombatState.NEED_BRACELET:    Self.EquipBracelet();
    ECombatState.USE_SPECIAL_ATT:  Self.DoSpec();
    ECombatState.REEQUIP_GEAR:     Self.ReGear();
    ECombatState.BURY_BONES:       Self.DoBuryBones();

    ECombatState.SAFE_SPOT: Self.WalkSafeSpot();

    ECombatState.ATTACK_MONSTER, ECombatState.SPEC_MONSTER: Self.WalkAttackMonster();

    ECombatState.WAIT_IN_COMBAT:   Self.WaitCombatEnd();
    ECombatState.DO_LOOT:          Self.Loot();

    ECombatState.LOW_HEALTH, ECombatState.LOW_PRAYER,
    ECombatState.NO_ANTIFIRE, ECombatState.PLAYER_DEAD: Self.Terminate();
  end;
end;

var
  CombatHandler: TRSCombatHandler;

function TRSXPBar.EarnedXP(): Boolean; override;
begin
  Result := inherited;

  if CombatHandler.IsSetup and Result then
    CombatHandler.InCombatTimer.Restart();
end;


function TRSMainScreen.FindHitsplats(): TRSHitsplatArray; override;
begin
  Result := inherited;

  if CombatHandler.IsSetup and (Result <> []) then
    CombatHandler.InCombatTimer.Restart(Random(0, 3000));
end;

function TRSMainScreen.FindDepletedHPBar(): Boolean;
var
  Bar: TRSHPBar;
begin
  for Bar in Self.FindHPBars() do
    if Bar.Percent = 0 then
      Exit(True);
end;

function TRSMainScreen.InCombat(): Boolean; override;
var
  splats: TRSHitsplatArray;
  gotXP, hasSplats: Boolean;
  tmp: TRSMonster;
  cuboids: TCuboidExArray;
  cuboid: TCuboidEx;
  b: TBox;
begin
  if CombatHandler.InCombatTimer.IsFinished() and not XPBar.EarnedXP() then
  begin
    CombatHandler.IsFighting := False;
    Exit;
  end;

  if CombatHandler.Monster.Filter.Walker then
  begin
    tmp := CombatHandler.Monster;
    tmp.Coordinates := [CombatHandler.MonsterWalkerCoord];
    tmp.DotFilter := [];
    tmp.DotFilter.Setup([CombatHandler.MonsterWalkerCoord.X, CombatHandler.MonsterWalkerCoord.Y, 8], True);

    cuboids := tmp.GetCuboidArray();
    if cuboids = [] then
      Exit;

    cuboid := cuboids[0];
  end
  else
    cuboid := Minimap.GetCuboidMS(CombatHandler.MonsterWalkerCoord, CombatHandler.Monster.ShapeArray[0]);

  gotXP := XPBar.EarnedXP();

  b := cuboid.Bounds();
  b.LimitTo(Self.Bounds());

  splats := Self.FindHitsplats(b);
  hasSplats := splats <> [];
  Result := gotXP or hasSplats;

  if not Result then
    Result := Self.FindHPBars(b) <> [];

  CombatHandler.IsFighting := Result;
  if Result then
  begin
    WL.Activity.Restart();
    RSClient.Clear(b);
    RSClient.DrawCuboid(cuboid, $FFFFFF, 1);
    RSClient.DrawHitSplatArray(splats, $00FF00, 1);
  end;

  if gotXP or hasSplats then
    CombatHandler.InCombatTimer.Restart();
end;

function TRSCombat.GetAutoRetaliate(): Boolean; override;
begin
  CombatHandler.AutoRetaliateChecked := True;
  Result := inherited;
  CombatHandler.AutoRetaliateEnabled := Result;
end;

function TRSCombat.SetAutoRetaliate(value: Boolean): Boolean; override;
begin
  CombatHandler.AutoRetaliateChecked := True;
  Result := inherited;

  if Result then
    CombatHandler.AutoRetaliateEnabled := value;
end;

//TODO: NEED TO REVIEW EVERYTHING BELOW. This is probably all useless or not used.
function TRSPrayer.HasProperPrayers(): Boolean;
var
  prayer: ERSPrayer;
  activePrayers: ERSPrayerArray;
begin
  if CombatHandler.CombatStyle.CombatType = ERSCombatType.UNKNOWN then
    CombatHandler.CombatStyle.GetCombatType;

  activePrayers := Self.GetActivePrayers();

  case CombatHandler.CombatStyle.CombatType of
    ERSCombatType.RANGED:
      for prayer in RANGED_PRAYERS do
         if activePrayers.Find(prayer) > -1 then
           Exit(True);

    ERSCombatType.MELEE:
      for prayer in MELEE_PRAYERS do
         if activePrayers.Find(prayer) > -1 then
           Exit(True);

    ERSCombatType.MAGIC:
      for prayer in MAGIC_PRAYERS do
         if activePrayers.Find(prayer) > -1 then
           Exit(True);
  end;
end;

function TRSPrayer.FixPrayers(): Boolean;
var
  i: Int32;
begin
  if CombatHandler.CombatStyle.CombatType = ERSCombatType.UNKNOWN then
    CombatHandler.CombatStyle.GetCombatType();

  case CombatHandler.CombatStyle.CombatType of
    ERSCombatType.RANGED:
      for i := 0 to Ord(High(RANGED_PRAYERS)) do
        if Self.ActivatePrayer(RANGED_PRAYERS[i]) then
          Exit(True);

    ERSCombatType.MELEE:
        for i := 0 to Ord(High(MELEE_PRAYERS)) do
        begin
          if i > 1 then
          begin
            if Self.ActivatePrayer([MELEE_PRAYERS[i], MELEE_PRAYERS[i + 1]]) then
              Exit(True);

            i += 1;
          end
          else if Self.ActivatePrayer(MELEE_PRAYERS[i]) then
            Exit(True);
        end;

    ERSCombatType.MAGIC:
      for i := 0 to Ord(High(MAGIC_PRAYERS)) do
        if Self.ActivatePrayer(MAGIC_PRAYERS[i]) then
          Exit(True);
  end;
end;


function TRSQuickPrayer.SelectBestPrayers(): Boolean;
var
  i: Int32;
begin
  if CombatHandler.CombatStyle.CombatType = ERSCombatType.UNKNOWN then
    CombatHandler.CombatStyle.GetCombatType();

  if not Self.Open() then
    Exit;

  case CombatHandler.CombatStyle.CombatType of
    ERSCombatType.RANGED:
      for i := 0 to High(RANGED_PRAYERS) do
        if Result := Self.SelectPrayer(RANGED_PRAYERS[i]) then
          Break;

    ERSCombatType.MELEE:
        for i := 0 to High(MELEE_PRAYERS) do
        begin
          if i > 1 then
          begin
            if Result := Self.SelectPrayer([MELEE_PRAYERS[i], MELEE_PRAYERS[i + 1]]) then
              Break;

            i += 1;
          end
          else if Result := Self.SelectPrayer(MELEE_PRAYERS[i]) then
            Break;
        end;

    ERSCombatType.MAGIC:
      for i := 0 to High(MAGIC_PRAYERS) do
        if Result := Self.SelectPrayer(MAGIC_PRAYERS[i]) then
          Break;
  end;

  Self.Close();
end;


function TRSMinimap.EnablePrayer(checkPrayers: Boolean): Boolean; overload;
begin
  if checkPrayers and (CombatHandler.CombatStyle.CombatType = ERSCombatType.UNKNOWN) then
    CombatHandler.CombatStyle.GetCombatType();

  Result := Self.EnablePrayer();

  if Result and checkPrayers then
  begin
    if CombatHandler.QuickPrayerIsSetup or not Prayer.Open() then
      Exit;

    if Prayer.HasProperPrayers() then
    begin
      CombatHandler.QuickPrayerIsSetup := True;
      Exit;
    end;

    Prayer.FixPrayers();

    CombatHandler.QuickPrayerIsSetup := QuickPrayer.SelectBestPrayers();
  end;
end;
