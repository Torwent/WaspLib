(*
ProgressReport
==============
This is what's responsible for the in game screen report, often called as
"paint" or HUDProgressReport in WaspLib.

You can easily toggle the usage this on or off by switching the variables:
- `WLSettings.RemoteInput.HUDReport`
- `WLSettings.RemoteInput.Enabled`

.. note:: Keep in mind that ProgressReport requires remote input.
*)
{$DEFINE WL_PROGRESS_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

(*
type ProgressReport
~~~~~~~~~~~~~~~~~~~~
Type responsible for handling the HUDProgressReport, also commonly called as "Paint" or InGame/OnScreen Progress Report.
*)
type ProgressReport = record(TSRLBaseRecord) class var
  BGImg: TMufasaBitmap;
  ClientImg: TMufasaBitmap;

  TextColor, PadLength: Int32;

  Timer: TTimer;
  UsernameBox: TBox;

  Terminated, IsSetup: Boolean;

  PTimeRunning: ^TStopwatch;
  PreviousStrArray, ProgressArray: TStringArray;
  TopLeft: TPoint;
end;

{$IFNDEF SRL_DISABLE_REMOTEINPUT}
(*
ProgressReport.Terminate
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure ProgressReport.Terminate(); static;

Internal method called automatically on termination. This will do things such as free used assetsa and clear the progress report from the game screen.
*)
procedure ProgressReport.Terminate(); static;
begin
  if ProgressReport.Terminated then //avoids multiple terminations in case the script is chained.
    Exit;

  ProgressReport.BGImg.Clear();
  ProgressReport.BGImg.Free();

  ProgressReport.ClientImg.Clear();
  ProgressReport.ClientImg.Free(); //not sure if it needs to be freed?
end;

(*
ProgressReport.Setup
~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure ProgressReport.Setup();  static;

Internal method called when we need to setup ProgressReport.
*)
procedure ProgressReport.Setup(); static;
begin
  ProgressReport.BGImg.Init();
  ProgressReport.BGImg.SetName('Progress report background');

  ProgressReport.TopLeft := [Chat.Bounds().X1, Chat.Bounds().Y1 - 12];
  if WLSettings.RemoteInput.HUDTransparent then
  begin
    ProgressReport.TopLeft.Y -= Chat.Height - 12;
    ProgressReport.BGImg.SetSize(Chat.Width(), Chat.Height() + 12);
  end
  else
    ProgressReport.BGImg.LoadFromFile({$MACRO CURRENT_DIRECTORY} + 'WaspProgress.png');


  ProgressReport.BGImg.setFontAntialiasing(True);

  ProgressReport.ClientImg := RSClient.Image();

  ProgressReport.ClientImg.Clear();
  ProgressReport.ClientImg.SetName('ClientImg');
  ProgressReport.ClientImg.setFontAntialiasing(True);
  ProgressReport.ClientImg.setFontSize(13);

  if ProgressReport.BGImg.GetFonts().Contains('Consolas') then
  begin
    ProgressReport.BGImg.setFontName('Consolas');
    ProgressReport.ClientImg.setFontName('Consolas');
  end;

  ProgressReport.TextColor := $006CFF;
  ProgressReport.UsernameBox := Chat.GetDisplayNameBox();

  AddOnTerminate(@ProgressReport.Terminate);
end;

(*
ProgressReport.DrawBackground
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure ProgressReport.DrawBackground(strArray: TStringArray; FontColor: Int32);  static;

Method that handles drawing the background of our ProgressReport.
Usually called internally by ProgressReport.Update().
*)
procedure ProgressReport.DrawBackground(strArray: TStringArray; fontColor: Int32); static;
begin
  if not ProgressReport.IsSetup then
  begin
    if strArray = [] then
      Exit;

    ProgressReport.BGImg.setFontSize(18);
    ProgressReport.BGImg.DrawTextShadow(ScriptName.Before('.simba').Replace('_', ' ').Capitalize(), [Round(ProgressReport.BGImg.GetWidth()/2) + 25, 7], FontColor, WLSettings.RemoteInput.HUDTransparent);

    ProgressReport.BGImg.setFontSize(14);
    fontColor -= $90A301 - $C8D100;

    if WLSettings.RemoteInput.HUDTransparent then
      ProgressReport.BGImg.DrawTextShadow(strArray[High(strArray)], [10, 135], fontColor, True)
    else
      ProgressReport.BGImg.DrawText(strArray[High(strArray)], [10, 135], fontColor);
    ProgressReport.IsSetup := True;
  end;

  ProgressReport.ClientImg.DrawBitmap(ProgressReport.BGImg, ProgressReport.TopLeft);
end;

(*
ProgressReport.DrawProgress
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure ProgressReport.DrawProgress(strArray: TStringArray; fontColor: Int32); static;

Method that handles drawing the text of our ProgressReport.
Usually called internally by ProgressReport.Update().
*)
procedure ProgressReport.DrawProgress(strArray: TStringArray; fontColor: Int32); static;
var
  p, q: TPoint;
  i: Int32;
begin
  p := [ProgressReport.TopLeft.X + 10, ProgressReport.TopLeft.Y + 40];
  if WLSettings.RemoteInput.HUDTransparent then
    p.Y -= 12;
  q := [Round(Chat.Bounds().Width()/2) + 20, p.Y];

  fontColor -= $C8D100;

  for i := 0 to High(strArray) - 1 do
  begin
    if Frac(i/2) = 0 then
    begin
      ClientImg.DrawTextShadow(strArray[i], p, fontColor, WLSettings.RemoteInput.HUDTransparent);
      p.Y += 20;
    end
    else
    begin
      ClientImg.DrawTextShadow(strArray[i], q, fontColor, WLSettings.RemoteInput.HUDTransparent);
      q.Y += 20;
    end;
  end;

  ProgressReport.PreviousStrArray := strArray;
  if WLSettings.RemoteInput.HUDTransparent then
    ProgressReport.ClientImg.DrawBoxFilled(ProgressReport.UsernameBox, False, $819DAC);
end;

(*
ProgressReport.HideProgress
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure ProgressReport.HideProgress();  static;

Used to hide ProgressReport.
Usually called internally by ProgressReport.Update().
*)
procedure ProgressReport.HideProgress(); static;
begin
  ProgressReport.IsSetup := False;

  ProgressReport.ClientImg.DrawBoxFilled(ProgressReport.UsernameBox, False, $819DAC); //Hide username by painting a box with similar color to the chatbox background.
end;

(*
ProgressReport.Update
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure ProgressReport.Update(StrArray: TStringArray);  static;

Main method that should be called to used to start and update ProgressReport.

To see ProgressReport.GetNextCycleColor() in action, which was just a fun experiment,
uncomment `Self.TextColor := Self.GetNextCycleColor(Self.TextColor, 10);`
*)
procedure ProgressReport.Update(strArray: TStringArray); static;
begin
  ProgressReport.ClientImg.Clear();

  if strArray = [] then
    Exit;

  //ProgressReport.TextColor := ProgressReport.GetNextCycleColor(ProgressReport.TextColor, 10);
  ProgressReport.DrawBackground(strArray, ProgressReport.TextColor);
  ProgressReport.DrawProgress(strArray, ProgressReport.TextColor);
end;

(*
ProgressReport.Setup
~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure ProgressReport.Setup(); static; override;

Overriden method to enable ProgressReport.Timer.
This required to be overriden or we couldn't call already declared methods in ProgressReport.CheckButton().

THIS IS DISABLED IN SIMBA1400 SINCE THIS IS ONLY A THING IN SIMBA1500!
*)
procedure ProgressReport.Setup(); static; override;
begin
  inherited;

  //AddOnPause(@Self.HideProgress);
end;
{$ENDIF}
