(*
# Config
A full featured JSON config writer and reader.
*)

{$DEFINE WL_CONFIG_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

function TJSONArray.High(): Int32;
begin
  if Self = nil then
    Exit(-1);
  Result := Self.length()-1;
end;

type
  TJSONArrayObject = record
    Key: String;
    JSONArray: TJSONArray;
  end;

  TJSONArrayObjectArray = array of TJSONArrayObject;

function TJSONArrayObjectArray.Find(key: String): Int32;
begin
  for Result := 0 to High(Self) do
    if Self[Result].Key = key then
      Exit;
  Result := -1;
end;

function TJSONArrayObjectArray.Put(key: String): Int32;
begin
  Result := Length(Self);
  Self += [key, nil];
end;

function TJSONArrayObjectArray.Get(key: String): Int32;
begin
  Result := Self.Find(key);
  if Result > -1 then
  begin
    Self[Result].JSONArray.Free();
    Self[Result].JSONArray := nil;
    Exit;
  end;
  Result := Self.Put(key);
end;


type
(*
(Config)=
## type TWaspConfig
```pascal
TWaspConfig = record
  Path: String;
  JSON: TJSONObject;
end;
```
*)
  TWaspConfig = record
    Path: String;
    JSON: TJSONObject;
    _ArrayHelper: TJSONArrayObjectArray; //Don't touch.
    IsSetup, OnTerminate: Boolean;       //Don't touch.
  end;

(*
## Config.GeTWaspConfig()
```pascal
function TWaspConfig.GeTWaspConfig(): TJSONObject;
```
Helper method to return the current TWaspConfig.Path file as a TJSONObject.
You probably don't need to use this directly.
*)
function TWaspConfig.GetConfig(): TJSONObject;
var
  str: String;
begin
  if FileExists(Self.Path) then
  begin
    str := ReadFileContents(Self.Path);
    if str <> '' then
    begin
      Result.Init(str);
      Exit;
    end;
  end;

  Result.Init();
end;

(*
## Config.Free()
```pascal
procedure TWaspConfig.Free();
```
Used to free your `TWaspConfig`.
It's automatically called on script termination, but you may call it sooner if
you wish to unlock the ram used by this (which should be minimal).
*)
procedure TWaspConfig.Free();
begin
  if not Self.IsSetup then
    Exit;

  Self.JSON.Free();
  Self.JSON := nil;
  Self._ArrayHelper := [];

  Self.IsSetup := False;
end;

(*
## Config.Setup
```pascal
procedure TWaspConfig.Setup(jsonFile: String);
```
Main method to setup your `TWaspConfig`
*)
procedure TWaspConfig.Setup(jsonFile: String = ScriptName);
begin
  if jsonFile.Contains(DirectorySeparator) then
  begin
    Self.Path := ExtractFilePath(jsonFile);
    jsonFile := ExtractFileName(jsonFile);
  end
  else
    Self.Path := WL_DATAPATH + 'configs' + DirectorySeparator;

  if not ForceDirectories(Self.Path) then
    TerminateScript('Can''t create configs directory.');

  if not jsonFile.EndsWith('.json') then
    jsonFile += '.json';
  Self.Path += jsonFile;

  Self.JSON := Self.GetConfig();
  Self.IsSetup := True;

  if not Self.OnTerminate then
  begin
    AddOnTerminate(@Self.Free);
    Self.OnTerminate := True;
  end;
end;

(*
## Config.DeleteConfig()
```pascal
procedure TWaspConfig.DeleteConfig();
```
Delete your `TWaspConfig` from disk.
*)
procedure TWaspConfig.DeleteConfig();
begin
  if not DeleteFile(Self.Path) then
    TerminateScript('Failed to delete: ' + Self.Path);
end;

(*
## Config.SaveConfig()
```pascal
procedure TWaspConfig.SaveConfig();
```
Used to save your `TWaspConfig`.
By default, this is always called automatically whenever the config is modified by the {ref}`TWaspConfig.Put()` methods.
*)
procedure TWaspConfig.SaveConfig();
begin
  if Self.JSON = nil then
    TerminateScript('You need to use TWaspConfig.Setup() before trying to save it into a config file.');
  if not WriteFileContents(Self.Path, json.toString(2), False) then
    TerminateScript('Failed to save config.');
end;


(*
## Config.Put()
```pascal
procedure TWaspConfig.Put(key, value: String; save: Boolean = True);
procedure TWaspConfig.Put(key: String; value: Int32; save: Boolean = True); overload;
procedure TWaspConfig.Put(key: String; value: Double; save: Boolean = True); overload;
procedure TWaspConfig.Put(key: String; value: Boolean; save: Boolean = True); overload;
procedure TWaspConfig.Put(key: String; values: TStringArray; save: Boolean = True); overload;
procedure TWaspConfig.Put(key: String; values: TIntegerArray; save: Boolean = True); overload;
procedure TWaspConfig.Put(key: String; values: TDoubleArray; save: Boolean = True); overload;
procedure TWaspConfig.Put(key: String; values: TBoolArray; save: Boolean = True); overload;
procedure TWaspConfig.Put(key: String; value: Pointer; save: Boolean = True); overload;
```
This should be self explanatory. Put a `key` and a `value` pair into your `TWaspConfig`.
The `pointer` version of the method is the only one that might need a little bit more knowledge of
Simba's lower JSON methods and/or pointers but you can use it to place a value that is another JSON object or a JSON array.
*)
procedure TWaspConfig.Put(key, value: String; save: Boolean = True);
begin
  if Self.JSON = nil then
    Exit;
  Self.JSON.Remove(key);
  Self.JSON.Put(key, value);
  if save then
    Self.SaveConfig();
end;

procedure TWaspConfig.Put(key: String; value: Int32; save: Boolean = True); overload;
begin
  if Self.JSON = nil then
    Exit;
  Self.JSON.Remove(key);
  Self.JSON.Put(key, value);
  if save then
    Self.SaveConfig();
end;

procedure TWaspConfig.Put(key: String; value: Double; save: Boolean = True); overload;
begin
  if Self.JSON = nil then
    Exit;
  Self.JSON.Remove(key);
  Self.JSON.Put(key, value);
  if save then
    Self.SaveConfig();
end;

procedure TWaspConfig.Put(key: String; value: Boolean; save: Boolean = True); overload;
begin
  if Self.JSON = nil then
    Exit;
  Self.JSON.Remove(key);
  Self.JSON.Put(key, value);
  if save then
    Self.SaveConfig();
end;

procedure TWaspConfig.Put(key: String; values: TStringArray; save: Boolean = True); overload;
var
  i, j: Int32;
begin
  if Self.JSON = nil then
    Exit;

  i := Self._ArrayHelper.Get(key);
  Self._ArrayHelper[i].JSONArray.Init();

  for j := 0 to High(values) do
    Self._ArrayHelper[i].JSONArray.Put(values[j]);

  Self.JSON.Remove(key);
  Self.JSON.Put(key, Self._ArrayHelper[i].JSONArray);

  if save then
    Self.SaveConfig();
end;

procedure TWaspConfig.Put(key: String; values: TIntegerArray; save: Boolean = True); overload;
var
  i, j: Int32;
begin
  if Self.JSON = nil then
    Exit;

  i := Self._ArrayHelper.Get(key);
  Self._ArrayHelper[i].JSONArray.Init();

  for j := 0 to High(values) do
    Self._ArrayHelper[i].JSONArray.Put(values[j]);

  Self.JSON.Remove(key);
  Self.JSON.Put(key, Self._ArrayHelper[i].JSONArray);

  if save then
    Self.SaveConfig();
end;

procedure TWaspConfig.Put(key: String; values: TDoubleArray; save: Boolean = True); overload;
var
  i, j: Int32;
begin
  if Self.JSON = nil then
    Exit;

  i := Self._ArrayHelper.Get(key);
  Self._ArrayHelper[i].JSONArray.Init();

  for j := 0 to High(values) do
    Self._ArrayHelper[i].JSONArray.Put(values[j]);

  Self.JSON.Remove(key);
  Self.JSON.Put(key, Self._ArrayHelper[i].JSONArray);

  if save then
    Self.SaveConfig();
end;

procedure TWaspConfig.Put(key: String; values: TBoolArray; save: Boolean = True); overload;
var
  i, j: Int32;
begin
  if Self.JSON = nil then
    Exit;

  i := Self._ArrayHelper.Get(key);
  Self._ArrayHelper[i].JSONArray.Init();

  for j := 0 to High(values) do
    Self._ArrayHelper[i].JSONArray.Put(values[j]);

  Self.JSON.Remove(key);
  Self.JSON.Put(key, Self._ArrayHelper[i].JSONArray);

  if save then
    Self.SaveConfig();
end;

procedure TWaspConfig.Put(key: String; value: Pointer; save: Boolean = True); overload;
begin
  if Self.JSON = nil then
    Exit;

  Self.JSON.Remove(key);
  Self.JSON.put(key, value);

  if save then
    Self.SaveConfig();
end;


(*
## Config.Has()
```pascal
function TWaspConfig.Has(key: String; nullIsValid: Boolean = True): Boolean;
```
Checks if a key exists. `nullIsValid` is true by default when set to false
this will return false if the key exists but is set to null.
*)
function TWaspConfig.Has(key: String; nullIsValid: Boolean = True): Boolean;
begin
  if Self.JSON = nil then
    Exit;
  Result := Self.JSON.has(key);

  if not nullIsValid and Result then
    Result := not Self.JSON.isNull(key);
end;


(*
## Config.Get()
```pascal
function TWaspConfig.GetString(key: String): String;
function TWaspConfig.GetInt(key: String): Int32;
function TWaspConfig.GetDouble(key: String): Double;
function TWaspConfig.GetBoolean(key: String): Boolean;
function TWaspConfig.GetNull(key: String): Boolean;
function TWaspConfig.GetStringArray(key: String): TStringArray;
function TWaspConfig.GetIntArray(key: String): TIntegerArray;
function TWaspConfig.GetDoubleArray(key: String): TDoubleArray;
function TWaspConfig.GetBooleanArray(key: String): TBoolArray;
function TWaspConfig.GetObject(key: String): TJSONObject;
```
This should be self explanatory. Returns the value of a `key` in your `TWaspConfig`.
The `Object` version of the method is the only one that might need a little bit more knowledge of
Simba's lower JSON methods and/or pointers but you can use it to return a JSON object or a TJSONArray of TJSONObjects.
*)
function TWaspConfig.GetString(key: String): String;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
    Result := Self.JSON.getString(key);
end;

function TWaspConfig.GetInt(key: String): Int32;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
    Result := Self.JSON.getInt(key);
end;

function TWaspConfig.GetDouble(key: String): Double;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
    Result := Self.JSON.getDouble(key);
end;

function TWaspConfig.GetBoolean(key: String): Boolean;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
    Result := Self.JSON.getBoolean(key);
end;

function TWaspConfig.GetNull(key: String): Boolean;
begin
  if Self.JSON = nil then
    Exit;
  Result := not Self.JSON.has(key) or Self.JSON.isNull(key);
end;

function TWaspConfig.GetStringArray(key: String): TStringArray;
var
  tmp: TJSONArray;
  i: Int32;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
  begin
    tmp := Self.JSON.getJSONArray(key);
    for i := 0 to tmp.length()-1 do
      Result += tmp.getString(i);
  end;
end;

function TWaspConfig.GetIntArray(key: String): TIntegerArray;
var
  tmp: TJSONArray;
  i: Int32;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
  begin
    tmp := Self.JSON.getJSONArray(key);
    for i := 0 to tmp.length()-1 do
      Result += tmp.getInt(i);
  end;
end;

function TWaspConfig.GetDoubleArray(key: String): TDoubleArray;
var
  tmp: TJSONArray;
  i: Int32;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
  begin
    tmp := Self.JSON.getJSONArray(key);
    for i := 0 to tmp.length()-1 do
      Result += tmp.getDouble(i);
  end;
end;

function TWaspConfig.GetBooleanArray(key: String): TBoolArray;
var
  tmp: TJSONArray;
  i: Int32;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
  begin
    tmp := Self.JSON.getJSONArray(key);
    for i := 0 to tmp.length()-1 do
      Result += tmp.getBoolean(i);
  end;
end;

function TWaspConfig.GetObject(key: String): TJSONObject;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
    Result := Self.JSON.getJSONObject(key);
end;


(*
## Config.Remove()
```pascal
procedure TWaspConfig.Remove(key: String);
```
Remove a `key` and it's respective `value` from your `TWaspConfig`.
*)
procedure TWaspConfig.Remove(key: String);
begin
  if Self.JSON = nil then
    TerminateScript('You need to use TWaspConfig.Setup() before trying to delete a key on it.');
  Self.JSON.remove(key);
  Self.SaveConfig();
end;

(*
## Config.ToString()
```pascal
function TWaspConfig.ToString(indentFactor: Int32 = 2): String;
```
Returns a string version of your `TWaspConfig`.

Example:
```pascal
WriteLn MyConfig.ToString();
```
*)
function TWaspConfig.ToString(indentFactor: Int32 = 2): String;
begin
  if Self.JSON = nil then
    Exit;
  Result := Self.JSON.ToString(indentFactor);
end;

var
{$H-}WaspConfig: TWaspConfig;{$H+}

/////////////////////////-- INI Config --////////////////////////////////////////////

type
  TConfigINI = record
    Path: String;
    FileName: String;
    FileContent: TStringArray;
  end;

// Initializes configuration path and filename
procedure TConfigINI.Setup(FileName: String);
begin
  Self.FileName := FileName;
  Self.Path := AppPath + 'Configs' + DirectorySeparator + FileName;;
end;

// Writes a single key-value pair to a specified section
procedure TConfigINI.Put(Section, KeyName, Value: String);
begin
  WriteINI(Section, KeyName, Value, Self.Path);
end;

// Retrieves a single value by key from a specified section
function TConfigINI.Get(Section, KeyName: String): String;
begin
  Result := ReadINI(Section, KeyName, Self.Path);
end;

// Removes a single key-value pair from a specified section
procedure TConfigINI.Remove(Section, KeyName: String);
begin
  if not FileExists(Self.Path) then
    RaiseException('File does not exist: ' + Self.Path);
  DeleteINI(Section, KeyName, Self.Path);
end;

// Deletes the entire configuration file
procedure TConfigINI.DeleteConfig();
begin
  if FileExists(Self.Path) then
    DeleteFile(Self.Path)
  else
    RaiseException('File does not exist: ' + Self.Path);
end;

// Saves multiple items to a specific section
procedure TConfigINI.SaveConfig(Section: String; Items: TRSBankItemArray);
var
  i: Int32;
begin
  for i := 0 to High(Items) do
    WriteINI(Section, Items[i].Item, IntToStr(Items[i].Quantity), Self.Path);
end;

// Retrieves all keys from a specified section
function TConfigINI.GetKeys(Section: String): TStringArray;
var
  i: Int32;
  InSection: Boolean;
begin
  if not FileExists(Self.Path) then
    RaiseException('File does not exist: ' + Self.Path);

  FileContent := ReadFileContents(Self.Path).Split(#10);
  while i < Length(FileContent) do begin
    FileContent[i] := FileContent[i].Trim;
    if FileContent[i].StartsWith('[') and FileContent[i].EndsWith(']') then begin
      InSection := FileContent[i].Between('[', ']') = Section;
    end else if InSection and FileContent[i].Contains('=') then begin
      Result += FileContent[i].Before('=').Trim;
    end;
    Inc(i);
  end;
end;

// Reads an entire section into an array of items
function TConfigINI.ReadConfig(Section: String): TRSBankItemArray;
var
  i, NewItemIndex: Int32;
  InSection: Boolean;
begin
  if not FileExists(Self.Path) then
    RaiseException('File does not exist: ' + Self.Path);

  FileContent := ReadFileContents(Self.Path).Split(#10);
  while i < Length(FileContent) do begin
    FileContent[i] := FileContent[i].Trim;
    if FileContent[i].StartsWith('[') and FileContent[i].EndsWith(']') then begin
      InSection := FileContent[i].Between('[', ']') = Section;
      if InSection then
        NewItemIndex := 0;
    end else if InSection and FileContent[i].Contains('=') then begin
      if Length(Result) <= NewItemIndex then
        SetLength(Result, NewItemIndex + 1);

      Result[NewItemIndex].Item := FileContent[i].Before('=').Trim;
      Result[NewItemIndex].Quantity := StrToIntDef(FileContent[i].After('=').Trim, 0);
      Inc(NewItemIndex);
    end;
    Inc(i);
  end;
end;

Var
  {$H-}ConfigINI: TConfigINI;{$H+}  



