//temporary simba1500 wrappers
//this will probably all be removed when simba1500 comes out.
{$DEFINE WL_COMPATIBILITY_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

function WriteFileContents(const FileName: String; const Text: String): Boolean; overload;
begin
  Result := WriteFileContents(FileName, Text, False);
end;

//old TStringArray.Find()
function TStringArray.IndexOf(const Value: String): Integer; constref;
begin
  for Result := 0 to High(Self) do
    if (Value = Self[Result]) then
      Exit;

  Result := -1;
end;

function TStringArray.Contains(const Value: String): Boolean; constref;
begin
  Result := Self.IndexOf(Value) > -1;
end;

function TStringArray.RandomValue(): String; constref;
begin
  if Self <> [] then
    Result := Self[System.Random(Low(Self), High(Self))];
end;

function TStringList.ToStringArray(): TStringArray; constref;
var
  i: Int32;
begin
  for i := 0 to Self.getCount() -1 do
    Result += Self.getStrings(i);
end;


function TRSItemArray.RandomValue(): TRSItem; constref;
begin
  if Self <> [] then
    Result := Self[Random(0, High(Self))];
end;


//old String.Explode()
function String.Split(Delimiter: String): TStringArray; constref;
begin
  Result := System.Explode(Delimiter, Self);
end;

//old String.Strip()
function String.Trim(Chars:String = STR_WHITESPACE): String; constref;
var Lo,Hi: UInt32 = 1;
begin
  Hi:=Length(Self);
  while (Lo <= Hi) and (System.Pos(Self[Lo],Chars) <> 0) do Inc(Lo);
  while (Hi >= 1)  and (System.Pos(Self[Hi],Chars) <> 0) do Dec(Hi);
  Result := Copy(Self, Lo, Hi-Lo+1);
end;

//old String.ExtractNumber()
function String.ExtractInteger(DefaultValue: Int64 = -1): Int64; constref;
begin
  Result := StrToIntDef(ExtractFromStr(Self, Numbers), DefaultValue);
end;

//old String.Lower()
function String.ToLower(): String; constref;
begin
  Result := Lowercase(Self);
end;

function String.Contains(SubString: String): Boolean;
begin
  Result := Self.Pos(SubString) > 0;
end;

function String.ContainsAny(SubStrings: TStringArray): Boolean; overload;
var
  Str: String;
begin
  Result := False;
  for Str in SubStrings do
    if Self.Contains(Str) then
      Exit(True);
end;

function String.ContainsAll(SubStrings: TStringArray): Boolean; overload;
var
  Str: String;
begin
  Result := True;
  for Str in SubStrings do
    if not Self.Contains(Str) then
      Exit(False);
end;





//similar to TIntegerArray.ClearDuplicates()
function TIntegerArray.Unique(): TIntegerArray;
begin
  ClearSameIntegers(Self);
  Result := Self;
end;

//new simba1500 function for all arrays.
function TIntegerArray.Intersection(other: TIntegerArray): TIntegerArray; constref;
var
  i: Int32;
begin
  for i := 0 to High(other) do
    if Self.Find(other[i]) > -1 then
      Result += other[i];
end;


//new simba1500 function for all arrays.
function TPointArray.Contains(const Value: TPoint): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    if (Value.X = Self[i].X) and (Value.Y = Self[i].Y) then
      Exit(True);

  Result := False;
end;

//similar to TPointArray.ClearDuplicates()
function TPointArray.Unique(): TPointArray; constref;
begin
  Result := Self;
  ClearDoubleTPA(Result);
end;


//similar to TPointArray.Sorted()
function TPointArray.SortFrom(From:TPoint=[0,0]): TPointArray; constref;
begin
  Result := Copy(Self);
  SortTPAFrom(Result, From);
end;

function TPointArray.IndexOf(const Value: TPoint): Integer; constref;
begin
  for Result := 0 to High(Self) do
    if (Value.X = Self[Result].X) and (Value.Y = Self[Result].Y) then
      Exit;

  Result := -1;
end;

function TPointArray.RandomValue(): TPoint; constref;
begin
  if Length(Self) > 0 then
    Result := Self[Random(0, High(Self))];
end;

//Similar to TPointArray.Fill()
function TPointArray.ShapeFill(): TPointArray; constref;
begin
  Result := Copy(Self);
  FillEllipse(Result);
end;

//Similar to TPointArray.Rotate() but takes a TPoint/Vector2 instead.
function TPointArray.Rotate(AngleRad: Double; mid: Vector2): TPointArray; constref; overload;
begin
  Result := RotatePoints(Self, AngleRad, mid.X, mid.Y);
end;

function TPointArray.CreateFromLine(start, stop: TPoint): TPointArray; static;
begin
  Result := TPAFromLine(start.X, start.Y, stop.X, stop.Y);
end;



//similar to TBox.Middle()
function TBox.Center(): TPoint; constref;
begin
  Result := Point((Self.X2 + Self.X1+1) div 2, (Self.Y2 + Self.Y1+1) div 2);
end;


function T2DPointArray.ExcludeSize(MinLen:Int32; KeepIf:EComparator=__LT__): T2DPointArray; constref;
var
  tmp:T2DPointArray;
  TPA:TPointArray;
begin
  for TPA in Self do
    case KeepIf of
      __LT__: if Length(TPA) < MinLen then tmp += TPA;
      __GT__: if Length(TPA) > MinLen then tmp += TPA;
      __EQ__: if Length(TPA) = MinLen then tmp += TPA;
      __NE__: if Length(TPA)<> MinLen then tmp += TPA;
    end;
  Result := tmp;
end;

function T2DPointArray.ExcludeSize(MinLen,MaxLen:Int32): T2DPointArray; constref; overload;
var
  tmp:T2DPointArray;
  TPA:TPointArray;
begin
  for TPA in Self do
    if InRange(Length(TPA), MinLen, MaxLen) then
      tmp += TPA;
  Result := tmp;
end;

function T2DPointArray.SortFrom(From: TPoint): T2DPointArray; constref;
begin
  Result := Self;
  SortATPAFromMidPoint(Result, From);
end;

function T2DPointArray.RandomValue(): TPointArray; constref;
begin
  if Length(Self) > 0 then
    Result := Self[Random(0, High(Self))];
end;

//Exactly the same as SRL.PointInPoly()
function PointInPolygon(pt: TPoint; Poly: TPointArray): Boolean;
begin
  Result := SRL.PointInPoly(pt, Poly);
end;


//RandomLeft, RandomMean, RandomRight same as SRL.NormalRange() and SRL.TruncatedGauss()
function RandomLeft(min, max: Double): Double;
begin
  Result := SRL.TruncatedGauss(min, max);
end;

function RandomMean(min, max: Double): Double;
begin
  Result := SRL.NormalRange(min, max);
end;

function RandomRight(min, max: Double): Double;
begin
  Result := SRL.TruncatedGauss(max, min);
end;


function RandomLeft(min, max: Int64): Int64; overload;
begin
  Result := SRL.TruncatedGauss(min, max);
end;

function RandomMean(min, max: Int64): Int64; overload;
begin
  Result := SRL.NormalRange(min, max);
end;

function RandomRight(min, max: Int64): Int64; overload;
begin
  Result := SRL.TruncatedGauss(max, min);
end;


//Same as Point();
function TPoint.Create(x, y: Int32): TPoint; static;
begin
  Result := Point(x, y);
end;

//Same as Box();
function TBox.Create(x1, y1, x2, y2: Int32): TBox; static;
begin
  Result := Box(x1, y1, x2, y2);
end;

function TPointArray.NearestPoint(other: TPoint): TPoint;
begin
  if Length(Self) <= 0 then
    Exit;

  Self.Sort(other);
  Result := Self[0];
end;


function TRectangle.Normalize: TRectangle; constref
begin
  Result := Self.FixOrder();
end;



var
  ScriptName: String;

begin
  ScriptName := ExtractFileName(ScriptFile).Before(ExtractFileExt(ScriptFile));
end;
