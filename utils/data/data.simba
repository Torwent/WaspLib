(*
Data
====
Methods to fetch osrs data.
This file has methods to fetch information about items, monsters and weapons.
*)

{$DEFINE WL_DATA_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

const
  ITEM_DATA_VERSION = '1';
  MONSTER_DATA_VERSION = '1';
  OBJECTS_JSON  = {$macro CURRENT_DIRECTORY} + '/objects.json';
  WEAPONS_JSON  = {$macro CURRENT_DIRECTORY} + '/weapons.json';
(*
const PRICES_URL
~~~~~~~~~~~~~~~~~
Global PRICES_URL constant.
Can be changed to use a different prices data json as long as it has follows the wiki prices structure.
*)
  PRICES_URL = 'https://prices.runescape.wiki/api/v1/osrs/latest';
(*
const OSRSBOX_URL
~~~~~~~~~~~~~~~~~
Global OSRSBOX_URL constant.
Can be changed to use a different items data json as long as it has follows OSRSBox's structure.
*)
  OSRSBOX_URL = 'https://raw.githubusercontent.com/Flipping-Utilities/osrsbox-db/main/docs/items-json/';


type ItemData = record(TSRLBaseRecord) class var
    ItemNames: TStringList;
    PriceData: TJSONObject;
    OSRSBoxData: TJSONObject;
    ReloadTimer: TCountDown;
    PriceIsSetup: Boolean;
    OSRSBoxIsSetup: Boolean;
    PricesDisconnected: Boolean;
    OSRSBoxDisconnected: Boolean;
  class const
    DATA_PATH: String = WL_DATAPATH + 'cache' + DIRECTORYSEPARATOR + 'items' + DIRECTORYSEPARATOR + ITEM_DATA_VERSION + DIRECTORYSEPARATOR;
  end;

(*
ItemData.Free()
~~~~~~~~~~~~~~~
.. pascal:: procedure ItemData.Free();

Internal method called automatically on script termination.
Shouldn't be called by users other wise another termination will be attempted when the script stops running.
*)
procedure ItemData.Terminate(); static;
begin
  ItemData.ItemNames.Free();
  ItemData.PriceData.Free();
end;

(*
ItemData.SetupWikiPrices()
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure ItemData.SetupWikiPrices();

Internal method called automatically when we require price data.
Doesn't need to be called since it will be called automatically if **ItemData.WikiPriceIsSetup** is false.
It's also recalled when we try to fetch item data and 20 minutes have passed to update prices.
*)
procedure ItemData.SetupPrices();  static;
var
  JSON: String;
begin
  if not ItemData.PriceIsSetup then
  begin
    ItemData.ItemNames.Init();
    ItemData.ItemNames.LoadFromFile(ITEM_FINDER_ITEM_NAMES_FILE);
    ItemData.ItemNames.SetSorted(True);

    AddOnTerminate(@ItemData.Terminate);
    ItemData.PriceIsSetup := True;
    ItemData.ReloadTimer.Setup(20 * ONE_MINUTE);
  end;

  WriteLn 'Loading item prices from the wiki API.';
  JSON := TryGetPage(PRICES_URL);

  if JSON = '' then
  begin
    WriteLn 'We don''t seem to be able to connect to https://prices.runescape.wiki';
    ItemData.PricesDisconnected := True;
    Exit;
  end;

  ItemData.PriceData.Init(JSON);
  ItemData.ReloadTimer.Restart;
end;

(*
ItemData.GetIDs
~~~~~~~~~~~~~~~
.. pascal:: function ItemData.GetIDs(Item: String): TStringArray;

Internal method called automatically when we require item data.
This is based of ItemFinder.GetItemIDs() and it's used to retrieve item ids.
*)
function ItemData.GetIDs(item: String): TIntegerArray; static;
var
  itemID: Int32;
begin
  if item.IsDigit() then
    Result := Result + Item.ExtractInteger()
  else
  begin
    itemID := ItemData.ItemNames.IndexOfName(item);
    if itemID = -1 then
      Exit;

    while SameText(item, ItemData.ItemNames.NameFromIndex(itemID)) do
    begin
      Result := Result + StrToInt(ItemData.ItemNames.ValueFromIndex(itemID));

      Inc(itemID);
    end;
  end;
end;


(*
ItemData.GetData
~~~~~~~~~~~~~~~~
.. pascal:: function ItemData.GetData(Item: String): TJSONObject;

Internal method used to retrieve a TJSONObject of the Item we want information on.
**Item** should be an item ID.
*)
function ItemData.GetData(item: Integer): TJSONObject; static;
var
  key, path, json: String;
  tmp: TJSONObject;
begin
  if item = -1 then
    Exit;

  if ItemData.PricesDisconnected or ItemData.OSRSBoxDisconnected then
    Exit;

  if not ItemData.PriceIsSetup then
    ItemData.SetupPrices();

  key := ToString(item);

  if not ItemData.OSRSBoxIsSetup then
  begin
    ItemData.OSRSBoxData.Init();
    AddOnTerminate(@ItemData.OSRSBoxData.Free);
    ItemData.OSRSBoxIsSetup := True;
  end;

  if not ItemData.OSRSBoxData.has(key) then
  begin
    path := ItemData.DATA_PATH + ToStr(item) + '.json';
    if not FileExists(path) then
    begin
      json := TryGetPage(OSRSBOX_URL + ToStr(item) + '.json');
      if json = '' then
      begin
        WriteLn 'We don''t seem to be able to connect to the osrsbox data provider';
        ItemData.OSRSBoxDisconnected := True;
        Exit;
      end;

      ForceDirectories(ItemData.DATA_PATH);
      if not WriteFileContents(path, json) then
        Exit;
    end;

    json := ReadFileContents(path);
    tmp.Init(json);
    ItemData.OSRSBoxData.put(key, tmp);
  end;

  Result := ItemData.OSRSBoxData.Get(key);
end;

(*
ItemData.GetTradeableID
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function ItemData.GetTradeableID(Item: TRSItem): String;

Internal method used to retrieve only the tradeable version of an item if it exists.
Some items have versions of themselves that are not tradeable and can't be used to fetch item prices,
such as degraded items, ornamented items, etc.
*)
function ItemData.GetTradeableID(item: TRSItem): Integer; static;
var
  ids: TIntegerArray;
  id: Integer;
  osrsBoxJSON: TJSONObject;
begin
  Result := -1;

  if not ItemData.PriceIsSetup then
    ItemData.SetupPrices();

  if ToStr(item) = '' then
    Exit;

  ids := ItemData.GetIDs(item);
  for id in ids do
  begin
    osrsBoxJSON := ItemData.GetData(id);
    if (osrsBoxJSON <> nil) and ItemData.GetData(id).getBoolean('tradeable_on_ge') then
      Exit(id);
  end;
end;

(*
ItemData.GetPrice
~~~~~~~~~~~~~~~~~
.. pascal:: function ItemData.GetPrice(Item: TRSItem): TJSONObject;

Internal method used to fetch a price data TJSONObject of a certain item.
*)
function ItemData.GetPrice(item: TRSItem): TJSONObject; static;
var
  id: Integer;
  wikiJSON: TJSONObject;
begin
  if ItemData.ReloadTimer.IsPaused or ItemData.ReloadTimer.IsFinished() then
    ItemData.SetupPrices();

  id := ItemData.GetTradeableID(item);

  if id > -1 then
  begin
    wikiJSON := ItemData.PriceData.getJSONObject('data');
    if wikiJSON <> nil then
      Result := WikiJSON.getJSONObject(ToStr(id));
  end;
end;

(*
ItemData.GetPriceInt
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function ItemData.GetPriceInt(Item: TRSItem; Key: String): Int32;

Wrapper method used to fetch ints from ItemData.GetPrice().
To use this you should be familar with the structure of the JSONObject ItemData.GetPrice() returns.

Example
-------

  WriteLn ItemData.GetPriceInt('Abyssal whip', 'low'); // will print the low price of abyssal whip.
  WriteLn ItemData.GetPriceInt('Abyssal whip', 'high'); // will print the high price of abyssal whip.
*)
function ItemData.GetPriceInt(item: TRSItem; key: String): Int32; static;
var
  json: TJSONObject;
begin
  json := ItemData.GetPrice(item);
  if json <> nil then
    Result := json.getInt(key);
end;

(*
ItemData.GetAverage
~~~~~~~~~~~~~~~~~~~
.. pascal:: function ItemData.GetAverage(Item: TRSItem): Int32;

Method used to get the average price of **Item**.

Example
-------
  WriteLn ItemData.GetAverage('Abyssal whip');
*)
function ItemData.GetAverage(item: TRSItem): Int32; static;
var
  itemStr: String := ToStr(Item).ToLower();
  low, high: Int32;
begin
  if itemStr.ContainsAny(['coins', '995', '996', '997', '998', '999', '1000', '1001', '1002', '1003', '1004']) then
    Exit(1);

  low := ItemData.GetPriceInt(Item, 'low');
  high := ItemData.GetPriceInt(Item, 'high');

  if (low = 0) and (high = 0) then
    Exit;

  if high = 0 then
    Exit(low);

  if low = 0 then
    Exit(high);

  Result := Round((high + low) / 2);
end;


(*
ItemData.GetOSRSBoxInt()
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function ItemData.GetOSRSBoxInt(Item: TRSItem; Key: String): Int32;

Wrapper method used to get the integer values of the OSRSBox item json.
To use it, knowledge about the file structure is required.

Example
-------
  WriteLn ItemData.GetOSRSBoxInt('Abyssal whip', 'highalch'); //will print high alch value for the abyssal whip.
*)
function ItemData.GetOSRSBoxInt(item: TRSItem; Key: String): Int32; static;
var
  id: Integer;
  str: String;
  OSRSBoxJSON: TJSONObject;
begin
  id := ItemData.GetTradeableID(Item);
  if id = -1 then
    Exit;

  OSRSBoxJSON := ItemData.GetData(id);
  if OSRSBoxJSON = nil then
    Exit;

  str := OSRSBoxJSON.getString(Key); //we use .getString instead of .getInt to handle "null" values.

  if str.Contains('null') then
    Result := 0
  else
    Result := StrToInt(str);
end;

(*
ItemData.GetOSRSBoxBoolean()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function ItemData.GetOSRSBoxBoolean(Item: TRSItem; Key: String): Boolean;

Wrapper method used to get the boolean values of the OSRSBox item json.
To use it, knowledge about the file structure is required.

Example
-------
  WriteLn ItemData.GetOSRSBoxBoolean('Abyssal whip', 'tradeable_on_ge');
*)
function ItemData.GetOSRSBoxBoolean(item: TRSItem; Key: String): Boolean; static;
var
  id: Integer;
  OSRSBoxJSON: TJSONObject;
begin
  id := ItemData.GetTradeableID(item);
  if id = -1 then
    Exit;

  OSRSBoxJSON := ItemData.GetData(id);
  if OSRSBoxJSON = nil then
    Exit;

  Result := OSRSBoxJSON.getBoolean(Key);
end;

(*
ItemData.GetHighAlch()
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function ItemData.GetHighAlch(Item: TRSItem): Int32;

Method used to get the the high alchemy value of an item.

Example
-------
  WriteLn ItemData.GetHighAlch('Magic longbow');
*)
function ItemData.GetHighAlch(item: TRSItem): Int32; static;
var
  id: Integer := ItemData.GetTradeableID(item);
begin
  if id > -1 then
    Result := ItemData.GetOSRSBoxInt(id, 'highalch') - ItemData.GetAverage('561');
end;

(*
ItemData.GetHighAlchProfit()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function ItemData.GetHighAlchProfit(Item: TRSItem): Int32;

Method used to get the the high alchemy profit of an item.

.. note:: HighAlchProfit = HighAlchValue - ItemAveragePrice - NatureRuneAveragePrice

Example
-------
  WriteLn ItemData.GetHighAlchProfit('Magic longbow');
*)
function ItemData.GetHighAlchProfit(item: TRSItem): Int32; static;
var
  id: Integer := ItemData.GetTradeableID(item);
begin
  if id > -1 then
    Result := ItemData.GetOSRSBoxInt(id, 'highalch') -
              ItemData.GetAverage(id) - ItemData.GetAverage('561');
end;

(*
ItemData.GetLowAlchProfit()
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function ItemData.GetLowAlchProfit(Item: TRSItem): Int32;

Method used to get the the low alchemy profit of an item.

.. note:: LowAlchProfit = LowAlchValue - ItemAveragePrice - NatureRuneAveragePrice

Example
-------
  WriteLn ItemData.GetLowAlchProfit('Magic longbow');
*)
function ItemData.GetLowAlchProfit(item: TRSItem): Int32; static;
var
  id: Integer := ItemData.GetTradeableID(item);
begin
  if id > -1 then
    Result := ItemData.GetOSRSBoxInt(id, 'lowalch') -
              ItemData.GetAverage(id) - ItemData.GetAverage('561');
end;



(*
type ERSAttackType
~~~~~~~~~~~~~~~~~~

Attack types in game.
Can be used to know what to pray for example.

type TRSMonsterDrop
~~~~~~~~~~~~~~~~~~~

Helper record to handle monster drops. Has several variable that hold information about monster
drops such as wether it's stackable and/or noted and quantity.

type TRSMonsterData
~~~~~~~~~~~~~~~~~~~

Main record to handle monster data.
*)
type
  ERSAttackType = (
    MELEE_ATTACK_TYPE, RANGED_ATTACK_TYPE, MAGIC_ATTACK_TYPE, TYPELESS_ATTACK_TYPE
  );

  TRSMonsterDrop = record
    Item: String;
    ID: String;
    Stackable: Boolean;
    Noted: Boolean;
    Quantity: Int32;
  end;

  TRSMonsterDropArray = array of TRSMonsterDrop;

function TRSMonsterDropArray.Contains(drop: TRSMonsterDrop): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    if Self[i] = drop then
      Exit(True);

  Result := False;
end;

function TRSMonsterDropArray.ContainsEx(drop: TRSMonsterDrop): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    if Self[i].ID = drop.ID then
      Exit(True);

  Result := False;
end;

procedure TRSMonsterDropArray.ClearDuplicates();
var
  i, j: Int32;
  tmp: TRSMonsterDropArray;
  best: TRSMonsterDrop;
begin
  for i := 0 to High(Self) do
  begin
    best := Self[i];
    if tmp.ContainsEx(best) then
      Continue;

    for j := High(Self) downto i + 1  do
    begin
      if best.ID <> Self[j].ID then
        Continue;

      if best.Quantity < Self[j].Quantity then
        best := Self[j];
    end;

    tmp += best;
  end;
  WriteLn Self;
  WriteLn tmp;
  Self := tmp;
end;

type MonsterData = record(TSRLBaseRecord) class var
    Names: TStringList;
    Data: TJSONObject;
    IsSetup: Boolean;
  class const
    MONSTER_NAMES: String = {$macro CURRENT_DIRECTORY} + '/monster-names';
    MONSTERS_ZIP: String  = {$macro CURRENT_DIRECTORY} + '/monsters.zip';
    DATA_PATH: String = WL_DATAPATH + 'cache' + DIRECTORYSEPARATOR + 'monsters' + DIRECTORYSEPARATOR + MONSTER_DATA_VERSION + DIRECTORYSEPARATOR;
  end;

(*
MonsterData.Setup()
~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure MonsterData.Setup();

Internal method to setup the MonsterData record.
*)
procedure MonsterData.Setup(); static;
begin
  if MonsterData.IsSetup then
    Exit;

  ForceDirectories(MonsterData.DATA_PATH);

  MonsterData.Names.Init();
  AddOnTerminate(@MonsterData.Names.Free);
  MonsterData.Data.Init();
  AddOnTerminate(@MonsterData.Data.Free);

  MonsterData.Names.LoadFromFile(MonsterData.MONSTER_NAMES);
  MonsterData.Names.SetSorted(True);

  MonsterData.IsSetup := True;
end;



function MonsterData.GetIDs(monster: String): TStringArray; static;
  type TStringList = TStringList;

  function TStringList.NameFromIndex(Index: Int32): String; override;
  begin
    if (Index >= 0) and (Index < Self.GetCount()) then
      Result := Self.GetStrings(Index).Before('=');
  end;

  function TStringList.ValueFromIndex(Index: Int32): String; override;
  begin
    if (Index >= 0) and (Index < Self.GetCount()) then
      Result := Self.GetStrings(Index).After('=');
  end;

var
  monsterID: Int32;
  value, path: String;
  jsonObject: TJSONObject;
begin
  if not MonsterData.IsSetup then
    MonsterData.Setup();

  if monster.IsDigit() then
    Exit([monster]);

  monsterID := MonsterData.Names.IndexOfName(monster);
  while SameText(monster, MonsterData.Names.NameFromIndex(monsterID)) do
  begin
    value := MonsterData.Names.ValueFromIndex(monsterID);

    if not MonsterData.Data.has(value) then
    begin
      path := MonsterData.DATA_PATH + value + '.json';
      if not FileExists(path) and
         not UnZipOneFile(MonsterData.MONSTERS_ZIP, value + '.json', MonsterData.DATA_PATH) then
        Continue;

      jsonObject.Init(ReadFileContents(path));
      MonsterData.Data.Put(value, jsonObject);
    end;

    Result += value;
    Inc(monsterID);
  end;
end;

function MonsterData.GetID(monster: String): String; static;
var
  ids: TStringArray;
begin
  ids := MonsterData.GetIDs(monster);
  if ids <> [] then
    Result := ids[0];
end;


(*
MonsterData.GetInt()
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function MonsterData.GetInt(Monster, Key: String): Int32;

Wrapper method to get integer data from from monsters.json.

.. note:: Using this requires you to know the structure of the monster.json file.

Example
-------

  WriteLn MonsterData.GetInt('Cow', 'hitpoints'); //This will print 8.
*)
function MonsterData.GetInt(monster, Key: String): Int32; static;
var
  id: String;
begin
  id := MonsterData.GetID(monster);
  Result := MonsterData.Data.getJSONObject(id).getInt(Key);
end;

(*
MonsterData.GetString()
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function MonsterData.GetString(Monster, Key: String): String;

Wrapper method to get string data from monsters.json.

.. note:: Using this requires you to know the structure of the monster.json file.

Example
-------

  WriteLn MonsterData.GetString('Cow', 'drops');
*)
function MonsterData.GetString(monster, Key: String): String; static;
var
  id: String;
begin
  id := MonsterData.GetID(monster);
  Result := MonsterData.Data.getJSONObject(id).getString(Key);
end;

(*
MonsterData.IsAgressive()
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function MonsterData.IsAgressive(Monster): String;

Method to get information on wether a monster is aggressive or not.

Example
-------

  WriteLn MonsterData.IsAgressive('Cow'); //Will print False.
*)
function MonsterData.IsAgressive(monster: String): Boolean; static;
var
  id: String;
begin
  id := MonsterData.GetID(monster);
  Result := MonsterData.Data.getJSONObject(id).getBoolean('aggressive');
end;

(*
MonsterData.GetJSONArray()
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function MonsterData.GetJSONArray(Monster, Key: String): TJSONArray;

Internal method to get a TJSONArray value from monsters.json.
*)
function MonsterData.GetJSONArray(monster, Key: String): TJSONArray; static;
var
  id: String;
begin
  id := MonsterData.GetID(monster);
  Result := MonsterData.Data.getJSONObject(id).getJSONArray(Key);
end;

(*
MonsterData.GetJSONObject()
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function MonsterData.GetJSONObject(Monster, Key: String): TJSONObject;

Internal method to get a TJSONObject value from monsters.json.
*)
function MonsterData.GetJSONObject(monster, Key: String): TJSONObject; static;
var
  id: String;
begin
  id := MonsterData.GetID(monster);
  Result := MonsterData.Data.getJSONObject(id).getJSONObject(Key);
end;

(*
MonsterData.GetAttackTypes()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function MonsterData.GetAttackTypes(Monster: String): array of ERSAttackType;

Method used to get an array of ERSAttackType used by the specified monster.
*)
function MonsterData.GetAttackTypes(monster: String): array of ERSAttackType; static;
var
  JSONArray: TJSONArray;
  i: Int32;
begin
  JSONArray := MonsterData.GetJSONArray(Monster, 'attack_type');

  for i := 0 to JSONArray.length - 1 do
    case JSONArray.getString(i) of
      'stab', 'slash', 'crush':
        Result += MELEE_ATTACK_TYPE;
      'ranged':
        Result += RANGED_ATTACK_TYPE;
      'magic':
        Result += MAGIC_ATTACK_TYPE;
      'typeless':
        Result += TYPELESS_ATTACK_TYPE;
    end;
end;

(*
MonsterData.GetDrop()
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function MonsterData.GetDrop(DropJSON: TJSONObject): TRSMonsterDrop;

Method to convert a monster json object to a TRSMonsterDrop.
*)
function MonsterData.GetDrop(dropJSON: TJSONObject): TRSMonsterDrop; static;
var
  Str: String;
begin
  Result.ID := dropJSON.getString('id');
  Result.Item := dropJSON.getString('name');
  Str := dropJSON.getString('quantity');
  if Str.Contains('-') then
  begin
    Result.Quantity := Round(StrToInt(Str.Before('-')) + StrToInt(Str.After('-')) / 2);
  end
  else
    Result.Quantity := StrToInt(Str);
  Result.Noted := dropJSON.getBoolean('noted');
  Result.Stackable := Result.Noted;
end;

(*
MonsterData.GetDrops()
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function MonsterData.GetDrops(Monster: String): TRSMonsterDropArray;

Method to return all monster drops as an array of TRSMonsterDrop.

Example
-------

  WriteLn MonsterData.GetDrops('Abyssal demon'); //prints all monster drops.
*)
function MonsterData.GetDrops(monster: String): TRSMonsterDropArray; static;
var
  JSONArray: TJSONArray;
  i: Int32;
  drop: TRSMonsterDrop;
begin
  WriteLn('Loading ' + Monster + ' drops, this might take up to a 1 minute.');

  JSONArray := MonsterData.GetJSONArray(Monster, 'drops');

  for i := 0 to JSONArray.length() - 1 do
  begin
    drop := [];
    drop := MonsterData.GetDrop(JSONArray.getJSONObject(i));

    if not drop.Stackable then
    begin
      drop.Stackable := drop.ID.ContainsAny(['995', '996', '997', '998', '999', '1000', '1001', '1002', '1003', '1004']) or
                        ItemData.GetOSRSBoxBoolean(drop.ID, 'stackable');
    end;

    Result += Drop;
  end;
end;

(*
type TRSWeaponData
~~~~~~~~~~~~~~~~~~
Record used to fetch weapon information
*)
type
  TRSWeaponData = record
    Data: TJSONObject;
    IsSetup: Boolean;
  end;

(*
WeaponData.Setup()
~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSWeaponData.Setup();

Internal method to setup TRSWeaponData.
*)
procedure TRSWeaponData.Setup();
begin
  if Self.IsSetup then
    Exit;

  WriteLn('Loading weapons.json.');

  Self.Data.Init(ReadFileContents(WEAPONS_JSON));

  AddOnTerminate(@Self.Data.Free);

  Self.IsSetup := True;
end;

(*
WeaponData.GetInt()
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWeaponData.GetInt(Weapon, Key: String): Int32;

Method to fetch integer data from weapons.json.

.. note:: Using this requires knowledge of the structure of weapons.json

Example
-------

  WriteLn WeaponData.GetInt('Abyssal whip', 'special_attack'); //This will print 50.
*)
function TRSWeaponData.GetInt(Weapon, Key: String): Int32;
begin
  if not Self.IsSetup then
    Self.Setup;

  Result := Self.Data.getJSONObject(Weapon).getInt(Key);
end;

(*
WeaponData.GetAttackType()
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWeaponData.GetAttackType(Weapon: String): ERSAttackType;

Returns the ERSAttackType of the weapon specified.

Example
-------

  WriteLn WeaponData.GetAttackType('Abyssal whip'); //This will print MELEE_ATTACK_TYPE.
*)
function TRSWeaponData.GetAttackType(Weapon: String): ERSAttackType;
begin
  if not Self.IsSetup then
    Self.Setup;

  case Self.Data.getJSONObject(Weapon).getString('type') of
    'melee':  Result := MELEE_ATTACK_TYPE;
    'ranged': Result := RANGED_ATTACK_TYPE;
    'magic':  Result := MAGIC_ATTACK_TYPE;
  end;
end;

(*
WeaponData.IsTwoHanded()
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWeaponData.IsTwoHanded(Weapon: String): Boolean;

Returns wether the weapon is two-handed or not.

Example
-------

  WriteLn WeaponData.IsTwoHanded('Abyssal whip'); //This will print false.
*)
function TRSWeaponData.IsTwoHanded(Weapon: String): Boolean;
begin
  if not Self.IsSetup then
    Self.Setup;

  Result := Self.Data.getJSONObject(Weapon).getBoolean('two-handed');
end;

(*
WeaponData.GetRequirementsJSON()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWeaponData.GetRequirementsJSON(Weapon: String): TJSONObject;

Returns a TJSONObject of the level requirements for the weapon.
*)
function TRSWeaponData.GetRequirementsJSON(Weapon: String): TJSONObject;
begin
  if not Self.IsSetup then
    Self.Setup;

  Result := Self.Data.getJSONObject(Weapon).getJSONObject('level_requirements');
end;

(*
var WeaponData
~~~~~~~~~~~~~~
  Global WeaponData variable.
*)
{$H-}
var
  WeaponData: TRSWeaponData;
{$H+}


type
  TRSObjectData = record
    Data: TJSONObject;
    IsSetup: Boolean;
  end;

(*
ObjectData.Setup()
~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSObjectData.Setup();

Internal method to setup the TRSObjectData record.
*)
procedure TRSObjectData.Setup();
begin
  if Self.IsSetup then
    Exit;

  WriteLn('Loading objects.json.');
  Self.Data.Init(ReadFileContents(OBJECTS_JSON));
  AddOnTerminate(@Self.Data.Free);

  Self.IsSetup := True;
end;

(*
ObjectData.GetJSONObject()
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSObjectData.GetJSONObject(Monster, Key: String): TJSONObject;

Internal method to get a TJSONObject value from monsters.json.
*)
function TRSObjectData.GetObject(RSObject: String): TJSONObject;
begin
  if not Self.IsSetup then
    Self.Setup;

  Result := Self.Data.getJSONObject(RSObject);
end;

function TRSObjectData.GetObject(RSObject, Id: String): TJSONObject; overload;
begin
  if not Self.IsSetup then
    Self.Setup;

  Result := Self.Data.getJSONObject(RSObject).getJSONObject(Id);
end;

(*
ObjectData.GetJSONObject()
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSObjectData.GetJSONObject(Monster, Key: String): TJSONObject;

Internal method to get a TJSONObject value from monsters.json.
*)
function TRSObjectData.GetObjectIDs(RSObject: String): TStringArray;
begin
  if not Self.IsSetup then
    Self.Setup;

  Result := Self.Data.getJSONObject(RSObject).keys.ToStringArray();
end;

function TRSObjectData.GetObjectShapes(RSObject: String): array of Vector3;
var
  RSObjectJSON: TJSONObject;
  TempJSONShape: TJSONArray;
  Id: String;
  V3: Vector3;
begin
  if not Self.IsSetup then
    Self.Setup;

  RSObjectJSON := Self.GetObject(RSObject);
  for Id in RSObjectJSON.keys.ToStringArray() do
  begin
    TempJSONShape := RSObjectJSON.getJSONObject(Id).getJSONArray('shape');
    V3 := [TempJSONShape.getInt(0), TempJSONShape.getInt(1), TempJSONShape.getInt(2)];
    Result += V3;
  end;
end;


(*
var ObjectData
~~~~~~~~~~~~~~
  Global ObjectData variable.
*)
{$H-}
var
  ObjectData: TRSObjectData;
{$H+}
