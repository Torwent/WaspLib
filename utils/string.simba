{$DEFINE WL_STRING_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

//by Flight
function String.Replicate(count: Integer; separator: String = ''): String;
var
  i: Int32;
begin
 Result := Self;

 for i := 1 to count do
   Result += separator + Self;
end;


(*
## String.Case
```pascal
function String.CamelCase(): String; constref;
function String.SnakeCase(): String; constref;
function String.UpperSnakeCase(): String; constref;
function String.KebabCase(): String; constref;
function String.PascalCase(): String; constref;
function String.SentenceCase(): String; constref;
function String.TitleCase(): String; constref;
```
Returns the string with different forms of capitalization.

Example
```pascal
var
  str: String = 'HELLO WORLD';
begin
  WriteLn str.TitleCase(); //Prints 'Hello World'
end;
```
*)
function String.CamelCase(): String; constref;
var
  i, len: Int32;
begin
  for i := 1 to len := Length(Self) do
  begin
    if (Self[i] <> ' ') then
    begin
      Result += LowerCase(Self[i]);
      Continue;
    end;

    if (Inc(i) <= len) then
      Result += UpCase(Self[i]);
  end;
end;

function String.SnakeCase(): String; constref;
var
  i, len: Int32;
begin
  for i := 1 to len := Length(Self) do
  begin
    if (Self[i] <> ' ') then
    begin
      Result += LowerCase(Self[i]);
      Continue;
    end;

    Result += '_';
  end;
end;

function String.UpperSnakeCase(): String; constref;
var
  i, len: Int32;
begin
  for i := 1 to len := Length(Self) do
  begin
    if (Self[i] <> ' ') then
    begin
      Result += UpCase(Self[i]);
      Continue;
    end;

    Result += '_';
  end;
end;

function String.KebabCase(): String; constref;
var
  i, len: Int32;
begin
  for i := 1 to len := Length(Self) do
  begin
    if (Self[i] <> ' ') then
    begin
      Result += LowerCase(Self[i]);
      Continue;
    end;

    Result += '-';
  end;
end;

function String.PascalCase(): String; constref;
var
  i, len: Int32;
begin
  if Length(Self) = 0 then
    Exit;
  Result += UpCase(Self[1]);
  for i := 2 to len := Length(Self) do
  begin
    if (Self[i] <> ' ') then
    begin
      Result += LowerCase(Self[i]);
      Continue;
    end;

    if (Inc(i) <= len) then
      Result += UpCase(Self[i]);
  end;
end;

function String.SentenceCase(): String; constref;
begin
  if Length(Self) = 0 then
    Exit;
  Result := LowerCase(Self);
  Result[1] := UpCase(Result[1]);
end;

function String.TitleCase(): String; constref;
var
  i, len: Int32;
begin
  if Length(Self) = 0 then
    Exit;

  Result += UpCase(Self[1]);

  for i := 2 to len := Length(Self) do
  begin
    if (Self[i] <> ' ') then
    begin
      Result += LowerCase(Self[i]);
      Continue;
    end;

    Result += ' ';
    if (Inc(i) <= len) then
      Result += UpCase(Self[i]);
  end;
end;


(*
## String.Is
```pascal
function String.IsURL(): Boolean;
function String.IsEmail(): Boolean;
function String.IsUUID(): Boolean;
function String.IsUUIDV4(): Boolean;
function String.IsRefreshToken(): Boolean;
```
Checks if a string is a certain "thing" with some predefined regex patterns.
*)
function String.IsURL(): Boolean;
const
  REGEX: String = '^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$';
begin
  Result := ExecRegExpr(REGEX, System.Trim(Self));
end;

function String.IsEmail(): Boolean;
const
  REGEX: String = '^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$';
begin
  Result := ExecRegExpr(REGEX, System.Trim(Self));
end;

function String.IsTime(): Boolean;
const
  REGEX = '(?:[01]\d|2[0-3])([:.\-_\ \''])?(?:[0-5]\d)([:.\-_\ \''])?(?:[0-5]\d)';
begin
  Result := ExecRegExpr(REGEX, System.Trim(Self));
end;

function String.IsUUID(): Boolean;
const
  REGEX: String = '[0-9a-fA-F]{32}|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';
begin
  Result := ExecRegExpr(REGEX, System.Trim(Self));
end;

function String.IsUUIDV4(): Boolean;
const
  REGEX: String = '[0-9a-fA-F]{32}|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';
var
  tmp: String;
begin
  tmp := System.Trim(Self);

  case Length(tmp) of
    36: if Self[15] <> '4' then Exit;
    32: if Self[13] <> '4' then Exit;
    else Exit;
  end;

  Result := ExecRegExpr(REGEX, tmp);
end;

function String.IsRefreshToken(): Boolean;
const
  REGEX = '[0-9A-Za-z-_]{22}';
begin
  Result := ExecRegExpr(REGEX, System.Trim(Self));
end;
