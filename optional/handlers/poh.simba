(*
(POH)=
# POH Handler
The POH Handler is a handler responsible for making sense of a player's POH (Player Owned House) without
knowing any info about it's setup in advance.

:::{note}
:class: dropdown
The POH Handler is optional and has to be explicitly included.
You can include it by either including all optional files which is not recommended:
  ```pascal
  {$I WaspLib/optional.simba}
  ```
Or include just the POHHandler file which is the recommended way to include it:
  ```pascal
  {$I WaspLib/optional/handlers/poh.simba}
  ```
:::

Several rooms in a POH are unique on the minimap, with windows and/or doors of several sizes and different places.
By having this rooms saved in the following format:
```{figure} ../../../osr/walker/poh.png
Most relevant rooms for a POH stripped of their floor colors
```
We can attempt to match what we have on the minimap to those rooms and slowly build a map of the POH.

Some rooms share the same room layout or are very similar to others and for those we use some mainscreen information to make up what the room is,
e.g., Nexus room, Combat Hall and Quest Hall are all identical.
*)

{$DEFINE WL_POH_HANDLER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

{$IFNDEF WL_POHMAP_INCLUDED}
  {$I WaspLib/optional/handlers/pohmap.simba}
{$ENDIF}

{$IFNDEF WL_HOUSEOBJECTS_INCLUDED}
  {$I WaspLib/optional/handlers/houseobjects.simba}
{$ENDIF}

type
(*
## PRSWalker
TRSWalker pointer.
*)
  PRSPOHHandler = ^TRSPOHHandler;

(*
## TRSWalker_OnWalkEventEx
Callback object method to use while walking. This can be used to perform custom tasks while walking.

Example:
```pascal
procedure TRSWalker.WalkerTasks(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
begin
  Antiban.RandomTab();
end;

var
  rsw: TRSWalker;

begin
  rsw.Setup('world');
  rsw.OnWalkingEventEx := @rsw.WalkerTasks;
end;
```
*)
  TRSPOH_OnWalkEvent = procedure(pPOH: PRSPOHHandler; position: TPoint; destination: TPoint) of object;

(*
(TRSPOHHandler)=
## type TRSPOHHandler
```pascal
type
  TRSPOHHandler = record
    Map: TPOHMap;
    RoomObjects: array [ERSRoomObject] of TRoomObject;
    EnableRunAtEnergy: Int32;
    Similarity: Double;
  end;
```
The core record used to handle navigating a POH.
*)
  TRSPOHHandler = record(TSRLBaseRecord)
    Map: TPOHMap;
    RoomObjects: array [ERSRoomObject] of TRoomObject;

    EnableRunAtEnergy, Randomness, MouseAheadTimer: Int32;
    AdaptiveWalk, ScreenWalk, FancyMouse, NearZoomMode, Walking: Boolean;
    Similarity: Double;

    AdaptiveToggleDistances: TPoint;
    Path: TPointArray;
    PathIndex: Int32;

    WebGraph: TWebGraph;

    OnWalk: TRSPOH_OnWalkEvent;
    OnWalking: TRSPOH_OnWalkEvent;
  end;

(*
## POH.Init()
```pascal
procedure TRSPOHHandler.Init();
```
Internal method automatically called for your on script startup along with SRL.Setup().
You do not have to call it yourself.
*)
procedure TRSPOHHandler.InternalSetup();
var
  obj: ERSRoomObject;
begin
  Self.Map.Init(32, 12);
  Self.Similarity := 0.9999;

  for obj := Low(ERSRoomObject) to High(ERSRoomObject) do
    Self.RoomObjects[obj].Setup(obj);
end;

(*
## POH.GetAdjacentRooms()
```pascal
function TRSPOHHandler.GetAdjacentRooms(p: TPoint): TPointArray; static;
```
Helper static method that returns coordinates that belong to the north, west, south and east rooms of the point passed in.
This assumes the compass is set to `0` (North) or that you've rotated your coordinates so the math works as if you had the compass set that way.
Ideally, you will want to pass in a room top left corner to this to get the top left corner of each adjacent room.
*)
function TRSPOHHandler.GetAdjacentRooms(p: TPoint): TPointArray; static;
begin
  Result := [p.Offset(-32,0), p.Offset(32, 0), p.Offset(0, -32), p.Offset(0, 32)];
end;


(*
## TRSPOHHandler.GetRoomCoordinate()
```pascal
function TRSPOHHandler.GetRoomCoordinate(topLeft, p: TPoint; angle: Double; rotation: Int32): TPoint; static;
```
Helper static method that converts a room point `p` (which is always between [0,0] and [32,32] to a point on the minimap.
Optionally the point can be rotated on the room's center in 90ยบ increments which is decided by `rotation`.
For example, if `rotation` is 3, the point will be rotated 90*3=270ยบ on the room's center.

This is useful to look for mainscreen objects in a room we don't know the rotation,
we can brute force all the possible rotations and look for what we want.
*)
function TRSPOHHandler.GetRoomCoordinate(topLeft, p: TPoint; angle: Double; rotation: Int32): TPoint; static;
var
  roomCenter: TPoint;
begin
  if not InRange(p.X, 0, 32) or not InRange(p.Y, 0, 32) then
    TerminateScript(ToStr(p) + ' is not wthin the room you want to check.');

  Result := topLeft + p + [Minimap.X1(), Minimap.Y1()] - [10, 10];
  Result := Result.Rotate(angle, Minimap.Center());

  if rotation = 0 then
    Exit;

  roomCenter := topLeft + [16, 16] + [Minimap.X1(), Minimap.Y1()] - [10, 10];
  roomCenter := roomCenter.Rotate(angle, Minimap.Center());
  Result := Result.Rotate(PI/2 * rotation, roomCenter);
end;

(*
## POH.GetCuboid()
```pascal
function TRSPOHHandler.GetCuboid(topLeft, p: TPoint; tile: Vector3; angle: Double; rotation: Int32): TCuboidEx; static;
```
Static mehod that returns a `TCuboidEx` on the mainscreen of a point we specify `p` with a given `rotation` on the room's center.
{ref}`TRSPOHHandler.GetRoomCoordinate()` is used to get the minimap point which then uses {ref}`Minimap.GetCuboidMS()` to give us a cuboid as a result.

To work, this requires the room's `topLeft` TPoint and the compass `angle`.
*)
function TRSPOHHandler.GetCuboid(topLeft, p: TPoint; tile: Vector3; angle: Double; rotation: Int32): TCuboidEx; static;
begin
  p := TRSPOHHandler.GetRoomCoordinate(topLeft, p, angle, rotation);
  Result := Minimap.GetCuboidMS(p, tile);
end;


(*
## POH.ContainsObject()
```pascal
function TRSPOHHandler.ContainsObject(objType: ERSRoomObject; topLeft: TPoint; angle: Double; rotation: Int32): Boolean;
```
Checks if a {ref}`TRoomObject` stored in `POH.RoomObjects` exists in a room at a given `rotation`.
*)
function TRSPOHHandler.ContainsObjectEx(obj: TRoomObject; topLeft: TPoint; angle: Double; rotation: Int32): Boolean;
var
  cuboid: TCuboidEx;
  atpa: T2DPointArray;
begin
  cuboid := TRSPOHHandler.GetCuboid(topLeft, obj.RoomOffset, obj.Shape, angle, rotation);
  atpa := MainScreen.FindObject(obj.Finder, cuboid.Bounds());
  Result := atpa <> [];
end;

function TRSPOHHandler.ContainsObject(objType: ERSRoomObject; topLeft: TPoint; angle: Double; rotation: Int32): Boolean;
var
  obj: TRoomObject;
begin
  obj := Self.RoomObjects[objType];
  if obj.Coordinates <> [] then
    Exit;

  Result := Self.ContainsObjectEx(obj, topLeft, angle, rotation);
end;

(*
## POH.MapRoomObjects()
```pascal
procedure TRSPOHHandler.MapRoomObjects(room: ERSHouseRoom; topLeft: TPoint; roomIndex: TPoint; angle: Double);
```
Method responsible for mapping known {ref}`TRoomObject``TRoomObject` coordinates which later can be used to interact with them.
*)
procedure TRSPOHHandler.MapRoomObjects(room: ERSHouseRoom; topLeft: TPoint; roomIndex: TPoint; angle: Double);
var
  rotation: Int32;
  p, center: TPoint;
  obj: ERSRoomObject;
begin
  case room of
    ERSHouseRoom.SUPERIOR_GARDEN:
    begin
      roomIndex := [roomIndex.X * 32, roomIndex.Y * 32];
      center := roomIndex.Offset(16,16);

      for rotation := 0 to 3 do
      begin
        obj := ERSRoomObject.POOL;
        if Self.ContainsObject(obj, topLeft, angle, rotation) then
        begin
          p := roomIndex + Self.RoomObjects[obj].RoomOffset;
          p := p.Rotate(PI/2*rotation, center);
          Self.RoomObjects[obj].AddCoordinates([p]);
        end;
      end;

      obj := ERSRoomObject.FAIRY_TREE;
      if Self.ContainsObject(obj, topLeft, angle, rotation) then
        Self.RoomObjects[obj].AddCoordinates([center]);
    end;

    ERSHouseRoom.ACHIEVEMENT_GALLERY:
    begin
      roomIndex := [roomIndex.X * 32, roomIndex.Y * 32];
      center := roomIndex.Offset(16,16);

      for rotation := 0 to 3 do
      begin
        obj := ERSRoomObject.JEWELLERY_BOX;
        if Self.ContainsObject(obj, topLeft, angle, rotation) then
        begin
          p := roomIndex + Self.RoomObjects[obj].RoomOffset;
          p := p.Rotate(PI/2*rotation, center);

          Self.RoomObjects[obj].AddCoordinates([p]);
        end;

        obj := ERSRoomObject.MAGIC_ALTAR;
        if Self.ContainsObject(obj, topLeft, angle, rotation) then
        begin
          p := roomIndex + Self.RoomObjects[obj].RoomOffset;
          p := p.Rotate(PI/2*rotation, center);

          Self.RoomObjects[obj].AddCoordinates([p]);
        end;
      end;
    end;

    ERSHouseRoom.QUEST_NEXUS:
    begin
      roomIndex := [roomIndex.X * 32, roomIndex.Y * 32];
      center := roomIndex.Offset(16,16);
      obj := ERSRoomObject.NEXUS;
      if Self.ContainsObject(obj, topLeft, angle, rotation) then
        Self.RoomObjects[obj].AddCoordinates([center]);
    end;
  end;
end;

(*
## POH.MapAdjacentRooms()
```pascal
procedure TRSPOHHandler.MapAdjacentRooms(minimapBMP: TMufasaBitmap; topLeft, currentRoom: TPoint; angle: Double);
```
The core of the "POH Handler".
This method is what's responsible for mapping unknown adjacent rooms (north, west, south and east).
If you know what you are doing you can call this directly, but this is called automatically by {ref}`POH.GetPos()` and {ref}`POH.Setup()`.
*)
procedure TRSPOHHandler.MapAdjacentRooms(minimapBMP: TMufasaBitmap; topLeft, currentRoom: TPoint; angle: Double);
const
  FLOOR_COLOR_OFFSETS: TPointArray = [[5,5], [26,5], [26,26], [5, 26]];
var
  minimapTPA, indices: TPointArray;
  p: TPoint;
  crop, sample, rotated, bestBMP: TMufasaBitmap;
  i, j, floor, r: Int32;
  colors: TIntegerArray;
  bestRoom: ERSHouseRoom;
  matrix: TSingleMatrix;
  match, bestMatch: Single;
  hasCoreObject: Boolean;
begin
  indices := TPOHMap.GetAdjacentIndices(currentRoom);
  minimapTPA := Self.GetAdjacentRooms(topLeft);

  for i := 0 to High(minimapTPA) do
  begin
    p := minimapTPA[i];
    if Self.Map.ReadRoom(indices[i]) <> ERSHouseRoom.UNKNOWN then
      Continue;

    crop := minimapBMP.Copy(p.X, p.Y, p.X + Self.Map.SIZE-1, p.Y + Self.Map.SIZE-1);

    colors := crop.GetPixels(FLOOR_COLOR_OFFSETS);
    floor := colors.GetMostCommon();

    for j := 1 to Ord(High(ERSHouseRoom)) do
    begin
      case j of
        0..3: if floor <> Self.Map.GrassColor then Continue; //Gardens or OpenMenagerie
        else  if floor = Self.Map.GrassColor then Continue;
      end;

      sample := Self.Map.GetRoomBitmap(ERSHouseRoom(j), floor);
      for r := 0 to 3 do
      begin
        rotated := TPOHMap.RotateBitmap(sample, r);

        case j of
          2: hasCoreObject := Self.ContainsObjectEx(Self.RoomObjects[ERSRoomObject.POOL], p, angle, r);
          7: hasCoreObject := Self.ContainsObjectEx(Self.RoomObjects[ERSRoomObject.JEWELLERY_BOX], p, angle, r);
          8: hasCoreObject := Self.ContainsObjectEx(Self.RoomObjects[ERSRoomObject.NEXUS], p, angle, r);
        end;

        matrix := crop.MatchTemplate(rotated, TM_CCOEFF_NORMED);
        match := matrix.Max();

        if hasCoreObject then
        begin
          hasCoreObject := False;
          match += 0.2;
        end;

        if match > bestMatch then
        begin
          if bestBMP <> nil then
            bestBMP.Free();

          bestBMP := rotated;
          bestMatch := match;
          bestRoom := ERSHouseRoom(j);

          Continue;
        end;

        rotated.Free();

        if bestMatch >= Self.Similarity then
          Break(2);
      end;
    end;

    crop.Free();
    if bestMatch > 0.3 then
    begin
      Self.Map.DrawMap(bestBMP, bestRoom, indices[i]);
      Self.MapRoomObjects(bestRoom, p, indices[i], angle);
      bestMatch := 0;
    end;
  end;
  bestBMP.Free();
end;


(*
## POH.GetCleanMinimap()
```pascal
function TRSPOHHandler.GetCleanMinimap(out angle: Double): TMufasaBitmap; static;
```
Basically the same as {ref}`Walker.GetCleanMinimap()` that returns the compass angle as well.
*)
function TRSPOHHandler.GetCleanMinimap(out angle: Double): TMufasaBitmap; static;
var
  bitmap: TMufasaBitmap;
begin
  bitmap := GetMufasaBitmap(BitmapFromClient(Minimap.Bounds()));
  bitmap.ReplaceColor(0, 1); // We need zero to be unique

  TRSWalker.CleanMinimap(Bitmap);

  Result.Init();
  angle := Minimap.GetCompassAngle(False);
  bitmap.RotateBitmapEx(angle, False, True, Result);
  bitmap.Free();
end;

(*
## POH.Setup()
```pascal
function TRSPOHHandler.Setup(): Boolean;
```
The method that sets up the "POH Handler" so it can be used.
It's your responsibility to call it and it must be called from your POH entrance.
There is some wiggle room as from where you can use this on your garden and
you might get away using it from anywhere but for best results you should use this from
the tile right northwest to your exit portal.
This is the tile that the `POH.Setup()` assumes you will be calling it from and it's
the tile you will always be in as soon as you enter your POH no matter the method you
choose to enter it (teleport, using the portal, building or non building mode, ...).

Example:
```pascal
if MainScreen.WaitLoadingPOH(5000) then
  POH.Setup();
```
*)
function TRSPOHHandler.Setup(): Boolean;
var
  minimapBMP: TMufasaBitmap;
  p, center, topLeft: TPoint;
  angle: Double;
begin
  minimapBMP := TRSPOHHandler.GetCleanMinimap(angle);
  center := minimapBMP.getCenter();
  Self.Map.GrassColor := minimapBMP.GetPixel(center.X, center.Y);
  minimapBMP.ReplaceColor(1, Self.Map.GrassColor);

  Self.Map.Map.ReplaceColor(0, Self.Map.GrassColor);

  p := [Self.Map.AMOUNT div 2, Self.Map.AMOUNT div 2];
  Self.Map.DrawMap(ERSHouseRoom.GARDEN, Self.Map.GrassColor, p);
  topLeft := center.Offset(-14, -10);
  Self.MapAdjacentRooms(minimapBMP, topLeft, p, angle);

  minimapBMP.Free();
  Result := True;
end;

(*
## POH.LoadSuroundings()
```pascal
procedure TRSPOHHandler.LoadSuroundings(minimapBMP: TMufasaBitmap; p: TPoint; angle: double);
```
Wrapper method that performs some common math required by {ref}`POH.MapAdjacentRooms()`.
You can use this directly if you know what you are doing, but this is called automatically for you with {ref}`POH.GetPos()`.
*)
procedure TRSPOHHandler.LoadSuroundings(minimapBMP: TMufasaBitmap; p: TPoint; angle: double);
var
  topLeft: TPoint;
begin
  topLeft := p - Self.Map.GetRoomTopLeft(p);
  topLeft := minimapBMP.getCenter() - topLeft - [1,0];
  Self.MapAdjacentRooms(minimapBMP, topLeft, Self.Map.GetPointIndex(p), angle);
end;

(*
## POH.GetPos()
```pascal
function TRSPOHHandler.GetPos(): TPoint;
```
Returns the player position relative to the `POH.Map`.
Whenever this method is called, if there's unknown adjacent rooms (north, west, south and east),
they will be mapped.
*)
function TRSPOHHandler.GetPos(): TPoint;
const
  SAMPLE_SIZE: Int32 = 50;
var
  minimapBMP: TMufasaBitmap;
  angle: Double;
begin
  minimapBMP := TRSPOHHandler.GetCleanMinimap(angle);
  minimapBMP.ReplaceColor(1, Self.Map.GrassColor);

  Result := Self.Map.SampleSearch(minimapBMP, SAMPLE_SIZE);
  Self.LoadSuroundings(minimapBMP, Result, angle);
  minimapBMP.Free();
end;

(*
## POH.DebugPos()
```pascal
procedure TRSPOHHandler.DebugPos();
```
Debugs the current player position on the `POH.Map`.

Example:
```pascal
{$I WaspLib/optional/handlers/poh.simba}
begin
  POH.Setup(); //call from the northwest tile of your exit portal.
  while True do
    POH.DebugPos();
end;
```
*)
procedure TRSPOHHandler.DebugPos();
const
  SAMPLE_SIZE: Int32 = 50;
var
  minimapBMP, display: TMufasaBitmap;
  p: TPoint;
  angle: Double;
begin
  minimapBMP := TRSPOHHandler.GetCleanMinimap(angle);
  minimapBMP.ReplaceColor(1, Self.Map.GrassColor);

  p := Self.Map.SampleSearch(minimapBMP, SAMPLE_SIZE);

  Self.LoadSuroundings(minimapBMP, p, angle);

  display.Init();
  display.SetSize(Self.Map.Map.getWidth() + minimapBMP.getWidth() + 300, Self.Map.Map.getHeight());

  display.DrawBitmap(Self.Map.Map, [0,0]);
  display.setFontAntialiasing(True);
  display.DrawText('MAP', [10, 10], $FFFFFF);
  display.setFontSize(14);
  display.DrawText('Minimap sample:', [Self.Map.Map.getWidth()+10, 0], $FFFFFF);
  display.DrawBitmap(minimapBMP, [Self.Map.Map.getWidth()+1, 20]);

  display.setFontSize(10);
  display.DrawText('Pos:' + ToStr(p), [Self.Map.Map.getWidth()+10, minimapBMP.getHeight() + 40], $FFFFFF);

  display.DrawCrosshairs(p, 1, $FFFFFF);
  display.Debug();

  minimapBMP.Free();
  display.Free();
end;


(*
## POH.GetCurrentRoom()
```pascal
function TRSPOHHandler.GetCurrentRoom(): ERSHouseRoom;
```
Returns the current {ref}`ERSHouseRoom` we are on.

Example:
```pascal
POH.Setup(); //call from the northwest tile of your exit portal.
WriteLn POH.GetCurrentRoom();
```
*)
function TRSPOHHandler.GetCurrentRoom(): ERSHouseRoom;
begin
  Result := Self.Map.GetRoom(Self.GetPos());
end;


(*
# POH Walking
The following methods are related to {ref}`POH` walking.
*)

(*
## POH.MapToMM()
```pascal
function TRSPOHHandler.MapToMM(me, handlerPoint: TPoint; radians: Double): TPoint;
function TRSPOHHandler.MapToMM(walkerPoint: TPoint): TPoint; overload;
function TRSPOHHandler.MapToMM(me: TPoint; tpa: TPointArray; radians: Double): TPointArray; overload;
function TRSPOHHandler.MapToMM(tpa: TPointArray): TPointArray; overload;
```

Converts points from the `POH.Map` to points on the minimap.
This can be used to walk or get mainscreen info with {ref}`MM2MS`.

Example:
```pascal
POH.Setup(); //call from the northwest tile of your exit portal.
p := POH.MapToMM(Self.GetPos() + [16, 16]);
Debug(Minimap.GetCuboidMS(p, [1,1,5]));
```
*)
function TRSPOHHandler.MapToMM(me, handlerPoint: TPoint; radians: Double): TPoint;
begin
  Result := handlerPoint - me + Minimap.Center();
  Result := Result.Rotate(radians, Minimap.Center());
end;

function TRSPOHHandler.MapToMM(walkerPoint: TPoint): TPoint; overload;
begin
  Result := Self.MapToMM(Self.GetPos(), walkerPoint, Minimap.GetCompassAngle(False));
end;

function TRSPOHHandler.MapToMM(me: TPoint; tpa: TPointArray; radians: Double): TPointArray; overload;
var
  p: TPoint;
begin
  for p in tpa do
    Result += Self.MapToMM(me, p, radians);
end;

function TRSPOHHandler.MapToMM(tpa: TPointArray): TPointArray; overload;
begin
  Result := Self.MapToMM(Self.GetPos(), tpa, Minimap.GetCompassAngle(False));
end;

(*
## POH.CheckRunEnergy
```pascal
procedure TRSPOHHandler.CheckRunEnergy();
```
Internal method used to check and enable the player run.
You will probably never need to call this directly.

The values used are hardcoded and if you don't like them, it's recommended you override the method.
The following example shows how one could override the function to enable run at 50% energy everytime, keep in mind though, you shouldn't do this, you should add randomness to it!
*)
procedure TRSPOHHandler.CheckRunEnergy();
begin
  if Minimap.IsRunEnabled() or (Minimap.GetRunEnergy() < Self.EnableRunAtEnergy) then
    Exit;

  Self.EnableRunAtEnergy := SRL.SkewedRand(40, 10, 100);

  Minimap.EnableRun();
end;


(*
## POH.AdaptiveWalkCheck
```pascal
procedure TRSPOHHandler.AdaptiveWalkCheck(Position: TPoint);
```

Internal method used to check if adaptive walk should toggle and toggle POH.ScreenWalk.
You will probably never need to call this directly.
*)
procedure TRSPOHHandler.AdaptiveWalkCheck(Position: TPoint);
var
  wasEnabled: Boolean;
begin
  wasEnabled := Self.ScreenWalk;
  Self.ScreenWalk := False;
  if ((Position.DistanceTo(Self.Path[0]) < Self.AdaptiveToggleDistances.X) or
      (Position.DistanceTo(Self.Path[High(Self.Path)]) < Self.AdaptiveToggleDistances.Y)) and
     (Random() > 0.05) then
    Self.ScreenWalk := True

  else if Random() < 0.02 then
    Self.ScreenWalk := True;

  if (not wasEnabled) and (Self.ScreenWalk) and (Self.FancyMouse) and (Random() < 0.75) and (Minimap.IsPointOn(Mouse.Position)) then
    Self.DoMouseAhead(Position, True);
end;

(*
## POH.DoMouseAhead
```pascal
procedure TRSPOHHandler.DoMouseAhead(Position: TPoint; Forced: Boolean = False);
```

Internal method used to pre-hover the next walking step.
You will probably never need to call this directly.
*)
procedure TRSPOHHandler.DoMouseAhead(Position: TPoint; Forced: Boolean = False);
var
  flag: TPoint;
  dist: Int32;

  procedure MouseToNextPoint(myPos: TPoint);
  var
    mmPos: TPoint;
    idx: Int32;
    angle: Double;
    SlowMouse: TMouse;
  begin
    angle := Minimap.GetCompassAngle(False);
    idx := Self.PathIndex;
    while (idx < High(Self.Path)) and Self.IsWalkable(Self.Path[idx+1], myPos, angle) do
      Inc(idx);

    if (Idx = High(Self.Path)) and (Random(10) > 2) then Exit();

    mmPos := Self.Path[idx] - myPos + minimap.Center;
    mmPos := mmPos.Rotate(angle, Minimap.Center);

    if Self.ScreenWalk then
      mmPos := Minimap.PointToMsRect(mmPos).Mean();

    SlowMouse := Mouse;
    SlowMouse.Speed := Random(6,10);
    if not Self.ScreenWalk then
      SlowMouse.Move(Box(mmPos, Random(5,16), Random(5,16)))
    else
      SlowMouse.Move(Box(mmPos, Random(15,36), Random(15,36)));
  end;
begin
  if (not Forced) then
    if (GetTimeRunning() < Self.MouseAheadTimer) or (not Minimap.FindFlag(Flag)) then
      Exit();

  dist := Trunc(flag.DistanceTo(Minimap.Center()));
  if InRange(dist, Random(5,10), Random(60,70)) then
    MouseToNextPoint(Position);

  Self.MouseAheadTimer := GetTimeRunning() + SRL.SkewedRand(0,50,500);
  if Self.ScreenWalk then
    Self.MouseAheadTimer += SRL.SkewedRand(0,50,500);
end;

(*
## POH.WaitMoving
```pascal
procedure TRSPOHHandler.WaitMoving(destination: TPoint; WaitUntilDistance: Int32);
```
Internal method used to wait while we are moving using poh.
You will probably never need to call this directly.

This is where TRSPOHHandler.OnWalkingEvent are called.
*)
procedure TRSPOHHandler.WaitMoving(destination: TPoint; WaitUntilDistance: Int32);
var
  Timeout, Countdown: TCountDown;
  Position: record
    Current, Previous: TPoint;
  end;
  awct: Int64;
begin
  Timeout.Init(Round(SRL.TruncatedGauss(20000, 25000)));

  Countdown.Init(Round(SRL.TruncatedGauss(500, 1500)));

  // initial timeout needs to be longer, as we might not have started walking yet.
  Countdown.Timeout := GetTickCount() + Round(SRL.TruncatedGauss(2500, 3500));

  Position.Previous := Self.GetPos();
  Position.Current := Position.Previous;

  // Break from the loop if:
  // - Haven't moved in 500ms
  // - Been walking for over 20 seconds
  // - Within `WaitUntilDistance` to the destination
  repeat
    Self.CheckRunEnergy();

    Position.Previous := Position.Current;
    Position.Current := Self.GetPos();
    if Position.Current <> Position.Previous then
      Countdown.Restart();

    if @Self.OnWalking <> nil then
      Self.OnWalking(@Self, Position.Current, Destination);

    if (Self.AdaptiveWalk) and (GetTickCount() > awct) then
    begin
      Self.AdaptiveWalkCheck(Position.Current);
      awct := GetTickCount() + 1000;
    end;

    if Self.FancyMouse then
      Self.DoMouseAhead(Position.Current);

    if not Self.Walking then
      Break;

    Wait(100);
  until Timeout.IsFinished() or Countdown.IsFinished() or (Position.Current.DistanceTo(Destination) <= WaitUntilDistance);
end;

(*
## POH.MouseClick
```pascal
function TRSPOHHandler.Click(minimapPoint: TPoint; Randomness: Int32): Boolean;
```

Internal method used by POHHandler to handle clicking while walking.
You will probably never need to call this directly.

If you wish to modify certain POHHandler behaviors, it's a good approach to override this function.
For example, if you are screenwalking and you don't like it right clicking > walk here when it hovers a tree you could use the following example.
*)
function TRSPOHHandler.MouseClick(minimapPoint: TPoint; randomness: Int32): Boolean;
var
  p: TPoint;
  msUpText: String;
begin
  if MainScreen.IsUpText('>') then
  begin
    ChooseOption.Select('Cancel');
    Exit;
  end;

  Result := True;
  Self.CheckRunEnergy();

  if Self.ScreenWalk then
  begin
    p := Minimap.RandomPointOnZoomRectangle(minimapPoint, randomness);
    Mouse.Move(Minimap.PointToMsRect(p).Mean());
    msUpText := MainScreen.GetUpText();
    if not ('Walk here' in msUpText) then
      Exit(ChooseOption.Select('Walk here'));
  end
  else
    Mouse.Move(Minimap.RandomPointOn(minimapPoint, randomness));

  if randomness > 0 then
    Antiban.BioClick(MOUSE_LEFT)
  else
    Mouse.Click(MOUSE_LEFT);
end;

(*
## POH.WalkStepHelper()
```pascal
function TRSPOHHandler.WalkStepHelper(playerPoint, pohPoint: TPoint; out minimapPoint: TPoint): Boolean;
```
Internal method used by the POH to help walking steps.
You will probably never need to call this directly.
*)
function TRSPOHHandler.WalkStepHelper(playerPoint, pohPoint: TPoint; out minimapPoint: TPoint): Boolean;
var
  event_time: Int64;
begin
  event_time := GetTickCount();

  // run events
  if (@Self.OnWalk <> nil) then
    Self.OnWalk(@Self, playerPoint, pohPoint);

  // in case the events used a bit of time, while our character was moving towards a point, we have to update the current position.
  if GetTickCount() - event_time > 100 then
    playerPoint := Self.GetPos();

  if not Self.Walking then
    Exit;

  minimapPoint := Self.MapToMM(playerPoint, pohPoint, Minimap.GetCompassAngle(False));

  if Self.ScreenWalk then
  begin
    if not Minimap.PointOnZoomRectangle(minimapPoint) then
      Exit;
  end
  else
  begin
    if not Minimap.IsPointOn(minimapPoint) then
      Exit;
  end;

  Result := True;
end;

(*
## POH.WalkFinalStep
```pascal
function TRSPOHHandler.WalkFinalStep(playerPoint, pohPoint: TPoint; WaitUntilDistance: Int32): Boolean;
```
Internal method used by POH Handler when finishing walking a path.
You will probably never need to call this directly but it can be used to take a single step.
*)
function TRSPOHHandler.WalkFinalStep(playerPoint, pohPoint: TPoint; waitUntilDistance: Int32): Boolean;
var
  minimapPoint: TPoint;
begin
  if not Self.WalkStepHelper(playerPoint, pohPoint, minimapPoint) then
    Exit(not Self.Walking);

  if (Minimap.Center().DistanceTo(minimapPoint) < 5) then
    Exit(True);

  Result := Self.MouseClick(minimapPoint, 0);
  if Result then
    Self.WaitMoving(pohPoint, waitUntilDistance);
end;

(*
## POH.WalkStep
```pascal
function TRSPOHHandler.WalkStep(playerPoint, pohPoint: TPoint): Boolean;
```

Internal method used by POH Handler while walking a path.
You will probably never need to call this directly.
*)
function TRSPOHHandler.WalkStep(playerPoint, pohPoint: TPoint): Boolean;
var
  minimapPoint: TPoint;
  waitUntilDistance: Int32;
begin
  if not Self.WalkStepHelper(playerPoint, pohPoint, minimapPoint) then
    Exit(not Self.Walking);

  if (Minimap.Center().DistanceTo(minimapPoint) < 5) then
    Exit(True);

  Result := Self.MouseClick(minimapPoint, Self.Randomness);

  if Result then
  begin
    if (Random() < 0.15) then // 15% chance of randomness else mean
      waitUntilDistance := Random(Distance(Minimap.Center, minimapPoint))
    else
      waitUntilDistance := SRL.NormalRange(0, Distance(Minimap.Center(), minimapPoint) + 10);

    Self.WaitMoving(pohPoint, waitUntilDistance);
  end;
end;

(*
## POH.IsWalkable()
```pascal
function TRSPOHHandler.IsWalkable(pohPoint: TPoint; playerPoint: TPoint; angle: Double): Boolean;
```
Internal method used by walker to decide if the destination point is within 1 click reach.
You will probably never need to call this directly.
*)
function TRSPOHHandler.IsWalkable(pohPoint: TPoint; playerPoint: TPoint; angle: Double): Boolean;
var
  mmPoint: TPoint;
  r: TRectangle;
begin
  mmPoint := Self.MapToMM(playerPoint, pohPoint, angle);

  Result := Minimap.IsPointOn(mmPoint, -1);
  if not ScreenWalk or not Result then
    Exit;

  r := Minimap.PointToMSRect(mmPoint, 1, 1, angle);
  if not MainScreen.IsVisible(r.mean()) then
    Exit;

  Result := CountColor($000000, r.Bounds().Expand(0, MainScreen.Bounds())) = 0;
end;


(*
## POH.WalkPath()
```pascal
function TRSPOHHandler.WalkPath(path: TPointArray; waitUntilDistance: Int32 = 0): Boolean;
```
Walks a path of points taken from the loaded map. We advice that WaitUntilDistance is not 0.

Parameters:
- Path
	Array of points taken from the loaded map to walk. Must be ordered from start to finish.
- WaitUntilDistance
	Determines when the method returns once the final point has been clicked. Default value: 0.
	| *WaitUntilDistance=0* waits until the player has reached the final point.
	| *WaitUntilDistance=20* waits until the player is within 20 pixels of the final point.

Example:
```pascal
Walker.WalkPath([[100,100],[120,120],[140,140],[160,160],[180,180]]);
```
*)
function TRSPOHHandler.WalkPath(path: TPointArray; WaitUntilDistance: Int32 = 0): Boolean;

  function BuildPath(TPA: TPointArray): TPointArray;
  var
    I, J: Int32;
    Line: TPointArray;
  begin
    for I := 1 to High(TPA) do
    begin
      Line := TPAFromLine(TPA[I-1], TPA[I]);

      J := 0;
      while J < High(Line) do
      begin
        Result += Line[J];

        // keep the steps low, as mainscreen walking might just have a few tiles visible when NearZoomMode is set True
        if (Self.NearZoomMode) and ((Self.ScreenWalk) or (Self.AdaptiveWalk)) then
          Inc(J, Random(1, 4))
        else
          Inc(J, Random(3, 12));
      end;
    end;

    Result += TPA[High(TPA)];
  end;

  function AdvancePath(var Index: Int32; playerPoint: TPoint): Boolean;
  var
    Angle: Double := Minimap.GetCompassAngle(False);
    Previous: Int32 := Index;
    Nearest, Furthest: Int32;
  begin
    Nearest := Self.Path.Find(Self.Path.Sorted(playerPoint)[0]);
    Self.PathIndex := Nearest;

    while (Nearest < High(Self.Path)) and (not Self.IsWalkable(Self.Path[Nearest+1], playerPoint, Angle)) do
      Inc(Nearest);

    Furthest := Nearest;
    while (Furthest < High(Self.Path)) and Self.IsWalkable(Self.Path[Furthest+1], playerPoint, Angle) do
      Inc(Furthest);

    Index := Furthest;

    // do the result check before randomness to avoid false error
    Result := (Index > Previous);

    // 15% chance of randomness else furthest
    if Random() < 0.15 then
      Index := Random(Nearest, Furthest);
  end;

var
  playerPoint: TPoint;
  Index, Fails: Int32;
begin
  Self.Walking := True;
  playerPoint := Self.GetPos();
  Self.Path := BuildPath([playerPoint] + path);

  if Self.AdaptiveWalk then
  begin
    Self.AdaptiveToggleDistances.X := RSW_ADAPTIVE_SCREEN_TOGGLE_DISTANCES.X + Random(-6,6);
    Self.AdaptiveToggleDistances.Y := RSW_ADAPTIVE_SCREEN_TOGGLE_DISTANCES.Y + Random(-16,16);
    Self.AdaptiveWalkCheck(playerPoint);
  end;

  while Self.Walking and (Fails < 10) do
  begin
    playerPoint := Self.GetPos();

    if AdvancePath(Index, playerPoint) then
      Fails := 0
    else
    begin
      Inc(Fails);

      // Likely haven't moved far enough to advance to next point
      if (Fails < 5) then begin
        Wait(300);
        Continue;
      end else begin
        // screen walking struggles, so disable it
        if Self.AdaptiveWalk then
          Self.ScreenWalk := False
        else if (Fails = 5) then
          case SRL.Dice(50) of
            True:  Minimap.SetCompassAngle(Minimap.GetCompassAngle() - SRL.TruncatedGauss(30, 360, 3));
            False: Minimap.SetCompassAngle(Minimap.GetCompassAngle() + SRL.TruncatedGauss(30, 360, 3));
          end;
      end;

      if (Fails mod 2 = 0) then
        Minimap.WaitFlag();
    end;

    if Index = High(Self.Path) then
    begin
      if Self.WalkFinalStep(playerPoint, Self.Path[Index], WaitUntilDistance) then
        Exit(True);
    end else
      Self.WalkStep(playerPoint, Self.Path[Index]);
  end;

  if Fails = 10 then
    Self.DebugLn('Failed to advance path');
end;

(*
## POH.WalkBlind
```pascal
function TRSPOHHandler.WalkBlind(Destination: TPoint; WaitUntilDistance: Int32 = 0): Boolean;
```
"Blindly" walks to a point taken from the loaded map.
A straight line is generated between the player's position and destination which is then walked.

Parameters:
- Destination
  Destination point taken from the loaded map.
- WaitUntilDistance
	Determines when the method returns once the final point has been clicked. Default value: 0.
	| *WaitUntilDistance=0* waits until the player has reached the final point.
	| *WaitUntilDistance=20* waits until the player is within 20 pixels of the final point.

Example:
```pascal
Walker.WalkBlind([300, 300]);
```
*)
function TRSPOHHandler.WalkBlind(Destination: TPoint; WaitUntilDistance: Int32 = 0): Boolean;
begin
  Result := Self.WalkPath([Destination], WaitUntilDistance);
end;

(*
## TRSWalker.GetClosestPoint
```pascal
function TRSWalker.GetClosestPoint(worldPointArray: TPointArray): TPoint;
```

method used to get the closest Point to the Player out of a TPA.

This is a TRSWalker method so it will exist both on TRSWalker and TRSWalker.
*)
function TRSPOHHandler.GetClosestPoint(destinations: TPointArray): TPoint;
var
  paths, shortPaths: T2DPointArray;
  path: TPointArray;
  shortest: Int32;
  me, destination: TPoint;
begin
  me := Self.GetPos();
  for destination in destinations do
  begin
    path := [];

    try
      path := Self.WebGraph.PathBetween(me, destination, 0);
    except
    end;

    if (path <> []) and not paths.Contains(path) then
      paths += path;
  end;

  if paths = [] then
    Exit(destinations.NearestPoint(me));

  shortest := Round(paths.ShortestDistance());

  for path in paths do
    if InRange(path.TotalDistance(), shortest-15, shortest+15) then
      shortPaths += path;

  Result := shortPaths.RandomValue().Last();
end;

(*
## POH.WebWalk
```pascal
function TRSPOHHandler.WebWalk(Destination: TPoint; WaitUntilDistance: Int32 = 0; PathRandomness: Double = 0): Boolean;
```
Web walks to the destination point on the loaded map. Does **not** handle any obstacles.
Please run ``webber.simba`` to see how webgraphs are built.

Pre built webgraphs are available for "World" and "Zeah" when used.

Parameters:
- Destination
	Destination point taken from the loaded map.
- WaitUntilDistance
	Determines when the method returns once the final point has been clicked. Default value: 0.
	| *WaitUntilDistance=0* waits until the player has reached the final point.
	| *WaitUntilDistance=20* waits until the player is within 20 pixels of the final point.
- PathRandomness
	Randomness to add to the path so the absoulte shortest path isn't always taken. Must be between 0..1

Example:
```pascal
var Walker: TRSWalker;

Walker.Setup('world');
Walker.WebWalk([4595, 3575]); // Lumbridge

// Or use a location from the webgraph
Walker.WebWalk(WorldWeb.LOCATION_LUMBRIDGE);
```
*)
function TRSPOHHandler.WebWalk(destination: TPoint; waitUntilDistance: Int32 = 0; pathRandomness: Double = 0): Boolean;
var
  path: TPointArray;
begin
  if not InRange(pathRandomness, 0, 1) then
    Self.Fatal('TRSWalker.WebWalk `pathRandomness` must be within 0..1');

  path   := Self.WebGraph.PathBetween(Self.GetPos(), destination, pathRandomness);
  Result := Self.WalkPath(path, waitUntilDistance);
end;

(*
## TRSWalker.WebWalk
```pascal
function TRSWalker.WebWalk(destinations: TPointArray; waitUntilDistance: Int32 = 0; pathRandomness: Double = 0): Boolean; overload;
```

method used to webwalk to the closest Point to the player.
An example use case is for example, if you have sevel bank booths you can use, those would be your **Destination** TPA.
You will likely want to use the closest bank booth to you, so you use this.

This is a TRSWalker method so it will exist both on TRSWalker and TRSWalker.
*)
function TRSPOHHandler.WebWalk(destinations: TPointArray; waitUntilDistance: Int32 = 0; pathRandomness: Double = 0): Boolean; overload;
var
  destination: TPoint;
begin
  destination := Self.GetClosestPoint(destinations);
  Result := Self.WebWalk(destination, waitUntilDistance, pathRandomness);
end;

(*
# POH Objects
The following methods are related to interacting with {ref}`POH` {ref}`TRoomObject`.
*)

(*
## POH.Find
```pascal
function TRSPOHHandler.FindEx(objType: ERSRoomObject; out cuboids: TCuboidExArray; out atpa: T2DPointArray):
function TRSPOHHandler.FindAny(objType: ERSRoomObject; out tpa: TPointArray): Boolean;
function TRSPOHHandler.FindAll(objType: ERSRoomObject; out atpa: T2DPointArray): Boolean;
```
Method used to find a {ref}`TRoomObject` by specifying a {ref}`ERSRoomObject`.
You can find any occurence of the object or all of them depending on the method you use.
The extended version of the method is mostly for debugging.
*)
function TRSPOHHandler.FindEx(objType: ERSRoomObject; out cuboids: TCuboidExArray; out atpa: T2DPointArray): Boolean;
var
  obj: TRoomObject;
  mmPoints: TPointArray;
  radians: Double;
  me: TPoint;
begin
  me := Self.GetPos();
  obj := Self.RoomObjects[objType];
  if obj.Coordinates = [] then
    Exit;

  radians := Minimap.GetCompassAngle(False);
  mmPoints := Self.MapToMM(me, obj.Coordinates, radians);
  Result := obj.FindEx(mmPoints, radians, cuboids, atpa);
end;

function TRSPOHHandler.FindAny(objType: ERSRoomObject; out tpa: TPointArray): Boolean;
var
  obj: TRoomObject;
  mmPoints: TPointArray;
  radians: Double;
  me: TPoint;
begin
  me := Self.GetPos();
  obj := Self.RoomObjects[objType];
  if obj.Coordinates = [] then
    Exit;

  radians := Minimap.GetCompassAngle(False);
  mmPoints := Self.MapToMM(me, obj.Coordinates, radians);
  Result := obj.FindAny(mmPoints, radians, tpa);
end;

function TRSPOHHandler.FindAll(objType: ERSRoomObject; out atpa: T2DPointArray): Boolean;
var
  obj: TRoomObject;
  mmPoints: TPointArray;
  radians: Double;
  me: TPoint;
begin
  me := Self.GetPos();
  obj := Self.RoomObjects[objType];
  if obj.Coordinates = [] then
    Exit;

  radians := Minimap.GetCompassAngle(False);
  mmPoints := Self.MapToMM(me, obj.Coordinates, radians);
  Result := obj.FindAll(mmPoints, radians, atpa);
end;


(*
## TRSPOHHandler.Draw()
```pascal
procedure TRSPOHHandler.Draw(out bitmap: TMufasaBitmap; objType: ERSRoomObject);
```
Internal method used to draw found {ref}`TRoomObject` in a TMufasaBitmap.
An easy way to see this in action is to use `Debug(ERSRoomObject)`.
*)
procedure TRSPOHHandler.Draw(out bitmap: TMufasaBitmap; objType: ERSRoomObject);
var
  cuboids: TCuboidExArray;
  atpa: T2DPointArray;
begin
  Self.FindEx(objType, cuboids, atpa);
  bitmap.DrawATPA(atpa);
  if atpa <> [] then
    bitmap.DrawTPA(atpa[0], SRLColors.BLACK);
  bitmap.DrawCuboidArray(cuboids, SRLColors.YELLOW);
end;


(*
## POH.Interact
```pascal
function TRSPOHHandler.Hover(objType: ERSRoomObject): Boolean;
function TRSPOHHandler.Click(objType: ERSRoomObject): Boolean;
function TRSPOHHandler.Select(objType: ERSRoomObject; options: TStringArray): Boolean;
```
Method used to interact with a {ref}`TRoomObject` by specifying a {ref}`ERSRoomObject`.
The interactions are self explanatory.

Example:
```pascal
POH.Setup(); //call from the northwest tile of your exit portal.
WriteLn POH.Hover(ERSRoomObject.POOL); //pool has to be on the same room, north, west, south or east.
```
*)
function TRSPOHHandler.Hover(objType: ERSRoomObject): Boolean;
var
  obj: TRoomObject;
  mmPoints: TPointArray;
  radians: Double;
  me: TPoint;
begin
  me := Self.GetPos();
  obj := Self.RoomObjects[objType];
  if obj.Coordinates = [] then
    Exit;

  radians := Minimap.GetCompassAngle(False);
  mmPoints := Self.MapToMM(me, obj.Coordinates, radians);
  Result := obj.Hover(mmPoints, radians);
end;

function TRSPOHHandler.Click(objType: ERSRoomObject): Boolean;
var
  obj: TRoomObject;
  mmPoints: TPointArray;
  radians: Double;
  me: TPoint;
begin
  me := Self.GetPos();
  obj := Self.RoomObjects[objType];
  if obj.Coordinates = [] then
    Exit;

  radians := Minimap.GetCompassAngle(False);
  mmPoints := Self.MapToMM(me, obj.Coordinates, radians);
  Result := obj.Click(mmPoints, radians);
end;

function TRSPOHHandler.Select(objType: ERSRoomObject; options: TStringArray): Boolean;
var
  obj: TRoomObject;
  mmPoints: TPointArray;
  radians: Double;
  me: TPoint;
begin
  me := Self.GetPos();
  obj := Self.RoomObjects[objType];
  if obj.Coordinates = [] then
    Exit;

  radians := Minimap.GetCompassAngle(False);
  mmPoints := Self.MapToMM(me, obj.Coordinates, radians);
  Result := obj.Select(options, mmPoints, radians);
end;

(*
## POH.WalkInteract
```pascal
function TRSPOHHandler.WalkHover(objType: ERSRoomObject): Boolean;
function TRSPOHHandler.WalkClick(objType: ERSRoomObject): Boolean;
function TRSPOHHandler.WalkSelect(objType: ERSRoomObject; options: TStringArray): Boolean;
```
Method used to walk and interact with a {ref}`TRoomObject` by specifying a {ref}`ERSRoomObject`.
The interactions are self explanatory.

Example:
```pascal
POH.Setup(); //call from the northwest tile of your exit portal.
WriteLn POH.Hover(ERSRoomObject.POOL); //pool has to be on the same room, north, west, south or east.
```
*)
function TRSPOHHandler.WalkHover(objType: ERSRoomObject): Boolean;
var
  obj: TRoomObject;
  mmPoints: TPointArray;
  radians: Double;
  me: TPoint;
begin
  me := Self.GetPos();
  obj := Self.RoomObjects[objType];
  if obj.Coordinates = [] then
    Exit;

  radians := Minimap.GetCompassAngle(False);
  mmPoints := Self.MapToMM(me, obj.Coordinates, radians);
  mmPoints := mmPoints.Sorted(Minimap.Center());

  if not Minimap.PointOnZoomRectangle(mmPoints[0]) then
    Self.WebWalk(obj.Coordinates, 12, 0.2);

  Result := Self.Hover(objType);
end;

function TRSPOHHandler.WalkClick(objType: ERSRoomObject): Boolean;
var
  obj: TRoomObject;
  mmPoints: TPointArray;
  radians: Double;
  me: TPoint;
begin
  me := Self.GetPos();
  obj := Self.RoomObjects[objType];
  if obj.Coordinates = [] then
    Exit;

  radians := Minimap.GetCompassAngle(False);
  mmPoints := Self.MapToMM(me, obj.Coordinates, radians);
  mmPoints := mmPoints.Sorted(Minimap.Center());

  if not Minimap.PointOnZoomRectangle(mmPoints[0]) then
    Self.WebWalk(obj.Coordinates, 12, 0.2);

  Result := Self.Click(objType);
end;

function TRSPOHHandler.WalkSelect(objType: ERSRoomObject; options: TStringArray): Boolean;
var
  obj: TRoomObject;
  mmPoints: TPointArray;
  radians: Double;
  me: TPoint;
begin
  me := Self.GetPos();
  obj := Self.RoomObjects[objType];
  if obj.Coordinates = [] then
    Exit;

  radians := Minimap.GetCompassAngle(False);
  mmPoints := Self.MapToMM(me, obj.Coordinates, radians);
  mmPoints := mmPoints.Sorted(Minimap.Center());

  if not Minimap.PointOnZoomRectangle(mmPoints[0]) then
    Self.WebWalk(obj.Coordinates, 12, 0.2);

  Result := obj.Select(options, mmPoints, radians);
end;

var
(*
## var POH
```pascal
var POH
```
Global variable to use the {ref}`TRSPOHHandler`.
*)
  POH: TRSPOHHandler;

procedure TSRL.Setup(); override;
begin
  inherited;
  POH.InternalSetup();
end;

(*
## Debug
```pascal
procedure Debug(pohObject: ERSRoomObject); overload;
```
Method used to debug {ref}`TRoomObject`.
*)
procedure Debug(pohObject: ERSRoomObject); overload;
var
  bitmap: TMufasaBitmap;
begin
  bitmap.FromClient();
  POH.Draw(bitmap, pohObject);
  bitmap.Debug();
  bitmap.Free();
end;

