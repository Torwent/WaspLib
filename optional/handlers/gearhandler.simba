{$DEFINE WL_GEAR_HANDLER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  TRSGear = record
    Name: String;
    Items: array [ERSEquipmentSlot] of TRSItem;
  end;

procedure TRSGear.ChangeSlot(slot: ERSEquipmentSlot; item: TRSItem);
begin
  Self.Items[slot] := item;
end;

type
  TRSGearHandler = record
    Sets: array of TRSGear;
    Config: TConfigJSON;

    CurrentEquipment: array [ERSEquipmentSlot] of TRSItem;
    _ValidGear: array [ERSEquipmentSlot] of TRSItemArray;

    _FormGearIndex: Int32;
    _FormFiltered: Boolean;
    _FormComboBoxes: array of TComboBox;
    _FormListBoxes: array of TListBox;

    _UnfiltedWeapons: TStringArray;
    _UnfilteredLists: array [ERSEquipmentSlot] of TStringList;

    IsSetup: Boolean;
  end;

procedure TRSGearHandler.Setup();
var
  keys: TStringList;
  key, name: String;
  i: Int32;
  obj: TJSONObject;
  slot: ERSEquipmentSlot;
  json: TJSONArray;
  arr: TStringArray;
begin
  if Self.IsSetup then Exit;

  Self.Config.Setup('gearhandler');
  keys := Self.Config.JSON.Keys();
  SetLength(Sets, keys.getCount());

  for i := 0 to keys.getCount() - 1 do
  begin
    key := keys.GetStrings(i);
    obj := Self.Config.GetObject(key);
    Sets[i].Name := key;

    for slot := Low(ERSEquipmentSlot) to High(ERSEquipmentSlot) do
      Sets[i].Items[slot] := obj.getString(ToStr(slot).Lower());
  end;

  for slot := Low(ERSEquipmentSlot) to High(ERSEquipmentSlot) do
  begin
    Self._ValidGear[slot] := GearData.GetItems(slot);
    Self._UnfilteredLists[slot].Init();
    AddOnTerminate(@Self._UnfilteredLists[slot].Free);

    name := ToStr(slot).ToLower();

    if slot <> ERSEquipmentSlot.WEAPON then
    begin
      Self._UnfilteredLists[slot].Add('None');
      json := GearData.GetJSONArray(name);
      for i := 0 to json.High() do
        Self._UnfilteredLists[slot].Add(json.getString(i));
      Continue;
    end;

    json := GearData.GetJSONArray(name);
    for i := 0 to json.High() do
      arr += json.getString(i);

    json := GearData.GetJSONArray('2h');
    for i := 0 to json.High() do
      arr += json.getString(i);

    Sort(arr);

    Self._UnfilteredLists[slot].Add('None');
    json := GearData.GetJSONArray(name);
    for i := 0 to High(arr) do
      Self._UnfilteredLists[slot].Add(arr[i]);
  end;

  Self.IsSetup := True;
end;


procedure TRSGearHandler.AddTo(strings: TStrings);
var
  i: Int32;
begin
  for i := 0 to High(Self.Sets) do
    strings.Add(Self.Sets[i].Name);
end;

procedure TRSGearHandler.AddTo(combobox: TComboBox); overload;
var
  i, idx: Int32;
  found: Boolean;
begin
  for idx := 0 to High(Self._FormComboBoxes) do
    if combobox = Self._FormComboBoxes[idx] then
    begin
      found := True;
      Break;
    end;

  if not found then
    Self._FormComboBoxes += combobox;

  i := combobox.getItemIndex();
  combobox.Clear();
  Self.AddTo(combobox.getItems());
  if i <= combobox.getItems().getCount()-1 then
    combobox.setItemIndex(i);
end;

procedure TRSGearHandler.AddTo(listbox: TListBox); overload;
var
  i, idx: Int32;
  found: Boolean;
begin
  for idx := 0 to High(Self._FormListBoxes) do
    if listbox = Self._FormListBoxes[idx] then
    begin
      found := True;
      Break;
    end;

  if not found then
    Self._FormListBoxes += listbox;

  i := listbox.getItemIndex();
  listbox.Clear();
  Self.AddTo(listbox.getItems());
  if i <= listbox.getItems().getCount()-1 then
    listbox.setItemIndex(i);
end;


function TRSGearHandler.Add(gear: TRSGear): Boolean;
var
  i: Int32;
  obj: TJSONObject;
  slot: ERSEquipmentSlot;
begin
  Self.Setup();

  for i := 0 to High(Self.Sets) do
    if (Sets[i].Name = gear.Name) then
      Exit;

  Result := True;

  Self.Sets += gear;

  obj.Init();
  for slot := Low(ERSEquipmentSlot) to High(ERSEquipmentSlot) do
    obj.Put(ToStr(slot).Lower(), ToStr(gear.Items[slot]));

  Self.Config.Put(gear.Name, obj, True);

  for i := 0 to High(Self._FormComboBoxes) do
    Self.AddTo(Self._FormComboBoxes[i]);

  for i := 0 to High(Self._FormListBoxes) do
    Self.AddTo(Self._FormListBoxes[i]);
end;

function TRSGearHandler.Edit(idx: Int32; gear: TRSGear): Boolean;
var
  i: Int32;
  obj: TJSONObject;
  slot: ERSEquipmentSlot;
  keys: TStringList;
begin
  Self.Setup();
  if (idx > High(Self.Sets)) then Exit(Self.Add(gear));

  for i := 0 to High(Self.Sets) do
  begin
    if i = idx then Continue;

    if Sets[i].Name = gear.Name then
      Exit;
  end;

  Result := True;

  Self.Sets[idx] := gear;
  keys := Self.Config.JSON.keys();
  Self.Config.Remove(keys.GetStrings(idx));

  obj.Init();
  for slot := Low(ERSEquipmentSlot) to High(ERSEquipmentSlot) do
    obj.Put(ToStr(slot).Lower(), ToStr(gear.Items[slot]));

  Self.Config.Put(gear.Name, obj, True);

  for i := 0 to High(Self._FormComboBoxes) do
    Self.AddTo(Self._FormComboBoxes[i]);

  for i := 0 to High(Self._FormListBoxes) do
    Self.AddTo(Self._FormListBoxes[i]);
end;

function TRSGearHandler.Remove(idx: Int32): Boolean;
var
  keys: TStringList;
begin
  Self.Setup();
  if (idx > High(Self.Sets)) then Exit;

  Delete(Self.Sets, idx, 1);

  Result := True;
  keys := Self.Config.JSON.keys();
  Self.Config.Remove(keys.GetStrings(idx));

  for idx := 0 to High(Self._FormComboBoxes) do
    Self.AddTo(Self._FormComboBoxes[idx]);

  for idx := 0 to High(Self._FormListBoxes) do
    Self.AddTo(Self._FormListBoxes[idx]);
end;


function TRSGearHandler.Get(idx: Int32): TRSGear;
begin
  if idx = -1 then
    Exit;
  if idx <= High(Self.Sets) then
    Result := Self.Sets[idx];
end;

function TRSGearHandler.Get(name: String): TRSGear; overload;
var
  i: Int32;
begin
  for i := 0 to High(Self.Sets) do
    if Self.Sets[i].Name = name then
      Exit(Self.Sets[i]);
end;

function TScriptForm.GetEquipSlotEnum(slotName : string; out equipSlot : ERSEquipmentSlot) : Boolean;
begin

  slotName := slotName.ToLower();

  case slotName of
    'head'           :
    begin
      equipSlot := ERSEquipmentSlot.HEAD;
      Exit(true);
    end;
    'secondary_ammo' :
    begin
      equipSlot := ERSEquipmentSlot.SECONDARY_AMMO;
      Exit(true);
    end;
    'neck' :
    begin
      equipSlot := ERSEquipmentSlot.NECK;
      Exit(true);
    end;
    'cape' :
    begin
      equipSlot := ERSEquipmentSlot.CAPE;
      Exit(true);
    end;
    'ammo' :
    begin
      equipSlot := ERSEquipmentSlot.AMMO;
      Exit(true);
    end;
    'weapon' :
    begin
      equipSlot := ERSEquipmentSlot.WEAPON;
      Exit(true);
    end;
    'body' :
    begin
      equipSlot := ERSEquipmentSlot.BODY;
      Exit(true);
    end;
    'shield' :
    begin
      equipSlot := ERSEquipmentSlot.SHIELD;
      Exit(true);
    end;
    'legs' :
    begin
      equipSlot := ERSEquipmentSlot.LEGS;
      Exit(true);
    end;
    'hands' :
    begin
      equipSlot := ERSEquipmentSlot.HANDS;
      Exit(true);
    end;
    'feet'  :
    begin
      equipSlot := ERSEquipmentSlot.FEET;
      Exit(true);
    end;
    'ring' :
    begin
      equipSlot := ERSEquipmentSlot.RING;
      Exit(true);
    end;
    else
      Writeln("Bad mapping for: ", slotName);
  end;
end;

function TRSGearHandler.Contains(name: String): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(Self.Sets) do
    if Self.Sets[i].Name = name then
      Exit(True);
end;

var
  GearHandler: TRSGearHandler;

begin
  GearHandler.Setup();
end;


procedure TScriptForm._RefreshList(combobox: TCombobox; slot: ERSEquipmentSlot);
begin
  if not GearHandler._FormFiltered then Exit;
  combobox.setItems(GearHandler._UnfilteredLists[slot])
end;

procedure TScriptForm._RefreshSets(sender: TObject);
var
  combobox, cb: TComboBox;
  parent: TPanel;
  gear: TRSGear;
  slot: ERSEquipmentSlot;
  name: String;
begin
  parent := sender;
  GearHandler.Setup();
  combobox := parent.getChild('gear_selector_combobox');
  combobox.GetItems().Clear();

  for gear in GearHandler.Sets do
  begin
    combobox.getItems().Add(gear.Name);

    for slot := Low(ERSEquipmentSlot) to High(ERSEquipmentSlot) do
    begin
      name := ToStr(slot).ToLower();
      cb := parent.GetChild(name + '_slot_combobox');
      Self._RefreshList(cb, slot);
      cb.setItemIndex(cb.getItems().IndexOf(gear.Items[slot]));
    end;
  end;

  combobox.getItems().Add('New set');
  GearHandler._FormFiltered := False;
end;


//control events
procedure TScriptForm._OnGearSelectorChange(sender: TObject);
var
  combobox: TComboBox;
  parent: TPanel;
  button: TButton;
  slot: ERSEquipmentSlot;
  gear: TRSGear;
  item: TRSItem;
  applyFilter : Boolean;
begin
  combobox := sender;
  if combobox.getItemIndex() = -1 then Exit;

  GearHandler._FormGearIndex := combobox.getItemIndex();

  parent := combobox.getParent().getParent();

  button := parent.GetChild('duplicate_gear_button');
  button.setEnabled(combobox.getItemIndex() <> (combobox.getItems().getCount() - 1));

  if GearHandler._FormGearIndex <= High(GearHandler.Sets) then
    gear := GearHandler.Sets[GearHandler._FormGearIndex];

  for slot := Low(ERSEquipmentSlot) to High(ERSEquipmentSlot) do
  begin
    combobox := parent.GetChild(ToStr(slot).Lower() + '_slot_combobox');
    applyFilter := false;

    //Reset the items if they've been filtered by the search. So the OnGearChange works correctly.
    //This can cause flickering and a lag on the GUI as it resets the items.
    if combobox.getItems().getCount() < GearHandler._UnfilteredLists[slot].getCount() then
    begin
      combobox.setItems(GearHandler._UnfilteredLists[slot]);
      //Uncomment if you want to clear the existing search filter for the slot.
      //TEdit(parent.GetChild(ToStr(slot).Lower() + '_slot_search')).setText("");
      applyFilter := true;
    end;

    if VarIsEmpty(gear.Items[slot]) then
    begin
      item := 'None';
      gear.Items[slot] := item;
    end;

    if GearHandler._FormFiltered then
      Self._RefreshList(combobox, slot);

    combobox.setItemIndex(combobox.getItems().IndexOf(gear.Items[slot]));

    Self._OnGearChange(combobox);
    //Comment out or remove this if you're clearing the search filter.
    if applyFilter then
      Self._OnFilterChanged(parent.GetChild(ToStr(slot).Lower() + '_slot_search'));
  end;

  GearHandler._FormFiltered := False;
end;

procedure TScriptForm._OnSaveGear(sender: TObject);
var
  button: TButton;
  combobox, cb: TComboBox;
  parent: TPanel;
  gear: TRSGear;
  slot: ERSEquipmentSlot;
  name: String;
begin
  button := sender;
  parent := button.getParent();
  combobox := parent.getChild('gear_selector_combobox');
  gear.Name := combobox.getText();

  for slot := Low(ERSEquipmentSlot) to High(ERSEquipmentSlot) do
  begin
    name := ToStr(slot).ToLower();
    cb := parent.GetChild(name + '_slot_combobox');
    gear.Items[slot] := cb.getText();
  end;

  if not GearHandler.Edit(GearHandler._FormGearIndex, gear) then
    MessageDlg('Error', 'Your gear was not saved for some reason. Probably a duplicate name.', TMsgDlgType.mtWarning, [mbOk]);

  Self._RefreshSets(parent);
  if combobox.getItems().getCount() > 1 then
    combobox.setItemIndex(GearHandler._FormGearIndex)
  else
    combobox.setItemIndex(0);
end;

procedure TScriptForm._OnDuplicateGear(sender: TObject);
var
  button: TButton;
  combobox: TComboBox;
  parent: TPanel;
  gear: TRSGear;
begin
  button := sender;
  parent := button.getParent();
  combobox := parent.getChild('gear_selector_combobox');
  gear := GearHandler.Get(combobox.getItemIndex());
  gear.Name += ' duplicate';

  if not GearHandler.Edit(Length(GearHandler.Sets), gear) then
    MessageDlg('Error', 'Your gear was not saved for some reason. Probably a duplicate name.', TMsgDlgType.mtWarning, [mbOk]);

  Self._RefreshSets(parent);
  if combobox.getItems().getCount() > 1 then
    combobox.setItemIndex(High(GearHandler.Sets))
  else
    combobox.setItemIndex(0);
end;

procedure TScriptForm._OnRemoveGear(sender: TObject);
var
  button: TButton;
  combobox: TComboBox;
  parent: TPanel;
  gear: TRSGear;
begin
  button := sender;
  parent := button.getParent();
  combobox := parent.getChild('gear_selector_combobox');
  gear := GearHandler.Get(combobox.getItemIndex());
  gear.Name += ' duplicate';

  if not GearHandler.Remove(GearHandler._FormGearIndex) then
  begin
    MessageDlg('Error', 'The gear you want to delete doesn''t exist.', TMsgDlgType.mtWarning, [mbOk]);
    Exit;
  end;

  Self._RefreshSets(parent);
  GearHandler._FormGearIndex := Min(GearHandler._FormGearIndex+1, High(GearHandler.Sets));
  combobox.setItemIndex(GearHandler._FormGearIndex);
  Self._OnGearSelectorChange(combobox);
end;

procedure TScriptForm._OnFilterChanged(sender: TObject);
var
  edi : TEdit;
  i : Int32;
  ediText, listStr, ediName : string;
  basePanel : TPanel;
  filterCombo : TComboBox;
  equip : ERSEquipmentSlot;
begin

  edi := sender;

  if edi = nil then
    Exit;

  ediText := edi.getText();
  ediName := edi.getName();
  basePanel := edi.getParent();

  if ediName.Contains("_search") then
    filterCombo := basePanel.GetChild(ediName.Before("_search") + "_combobox"); //head_slot_search

  if filterCombo = nil then
  begin
    Writeln("No filter");
    Exit;
  end;

  if not Self.GetEquipSlotEnum(ediName.Before("_slot"), equip) then
  begin
    Writeln("Bad slot");
    Exit;
  end;

  if (ediText = "") or (Length(ediText.Replace(" ", "", [rfReplaceAll])) < 1) then
  begin
    filterCombo.getItems().Clear();
    filterCombo.setItems(GearHandler._UnfilteredLists[equip]);
    filterCombo.setItemIndex(0);
    Exit;
  end;

  filterCombo.getItems().Clear();

  for i := 0 to GearHandler._UnfilteredLists[equip].getCount() - 1 do
  begin
    listStr := GearHandler._UnfilteredLists[equip].getStrings(i);
    if listStr.Contains(ediText) then
      filterCombo.getItems().Add(listStr);
  end;

  filterCombo.setItemIndex(0);
end;

procedure TScriptForm._OnGearChange(sender: TObject);
var
  combobox: TComboBox;
  parent: TPanel;
  img: TImage;
  item, tmp: TMufasaBitmap;
  id: TRSItem;
  path, comboText: String;
begin
  combobox := sender;
  parent := combobox.getParent().getParent();
  parent := parent.GetChild('gear_panel_image_equipment');
  img := parent.GetChild(combobox.GetName().Replace('_combobox', '_img'));
  comboText := combobox.getText();

  if (comboText = 'None') or (comboText = "") then
  begin
    img.setVisible(False);
    Exit;
  end;

  img.setVisible(True);

  id := ItemFinder.GetItemIDs(comboText)[0];
  path := ItemFinder.IMAGES_PATH.Replace('itemfinder', 'forms' + DirectorySeparator + 'gear');

  if FileExists(path + id + '.png') then
  begin
    img.GetPicture().LoadFromFile(PATH + id + '.png');
    Exit;
  end;

  tmp.Init();
  tmp.LoadFromFile(
    IncludePath + 'WaspLib' + DirectorySeparator + 'utils' +
    DirectorySeparator + 'assets' + DirectorySeparator + 'slot.png'
  );
  item := ItemFinder.GetItemImages(id)[0];
  item.SetTransparentColor(0);
  tmp.DrawBitmap(item,[2,2]);
  tmp.SaveToFile(path + id + '.png');
  tmp.Free();

  img.GetPicture().LoadFromFile(path + id + '.png');
end;

procedure TScriptForm._OnLoadGear(sender: TObject);
var
  combobox: TComboBox;
  parent: TPanel;
  items: TRSItemArray;
  item: TRSItem;
  slot: ERSEquipmentSlot;
  name: String;
begin
  parent := TButton(sender).getParent();

  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  if WLSettings.GetObject('remote_input').getBoolean('enabled') then
  begin
    if not RSClient.RemoteInput.IsSetup() then
      RSClient.RemoteInput.Setup();
  end
  else
  {$ENDIF}
    ActivateClient();

  for slot := Low(ERSEquipmentSlot) to High(ERSEquipmentSlot) do
  begin
    name := ToStr(slot).ToLower();
    combobox := parent.GetChild(name + '_slot_combobox');
    combobox.Clear();
    combobox.getItems().Add('None');

    items := Equipment.Discover(slot);

    for item in GearHandler._ValidGear[slot].Intersection(items) do
      combobox.getItems().Add(ToStr(item).Capitalize());

    if combobox.getItems().getCount() = 1 then
      combobox.setItemIndex(0)
    else
      combobox.setItemIndex(1);

    Self._OnGearChange(combobox);
  end;

  GearHandler._FormFiltered := True;
end;

procedure TScriptForm._ClearGearFilter(sender: TObject);
var
  combobox: TComboBox;
  parent: TPanel;
  item: TRSItem;
  slot: ERSEquipmentSlot;
  name: String;
begin
  parent := TButton(sender).getParent();

  for slot := Low(ERSEquipmentSlot) to High(ERSEquipmentSlot) do
  begin
    name := ToStr(slot).ToLower();
    combobox := parent.GetChild(name + '_slot_combobox');
    item := combobox.getText();
    Self._RefreshList(combobox, slot);
    combobox.setItemIndex(combobox.getItems().IndexOf(item));
  end;

  GearHandler._FormFiltered := False;
end;

function TScriptForm._SetupGearImagesPanel(parent: TComponent): TPanel;
var
  img: TImage;
begin
  Result.Create(parent);
  Result.setName('gear_panel');
  Result.setLeft(TControl.AdjustToDPI(20));
  Result.setWidth(Self.Size.X div 2 - TControl.AdjustToDPI(92));
  Result.setHeight(Self.Size.Y - TControl.AdjustToDPI(120));
  Result.setTop((Self.Size.Y - Result.getHeight()) div 2 - TControl.AdjustToDPI(10));
  Result.LoadFromFile(
    IncludePath + 'WaspLib' + DirectorySeparator + 'utils' +
    DirectorySeparator + 'assets' + DirectorySeparator + 'equipment.png'
  );

  img.Create(Result);
  img.setName('head_slot_img');
  img.SetTop(TControl.AdjustToDPI(57));
  img.SetLeft(TControl.AdjustToDPI(117));
  img.SetStretch(True);
  img.SetProportional(True);
  img.setHeight(TControl.AdjustToDPI(50));
  img.setWidth(TControl.AdjustToDPI(50));
  img.setVisible(False);

  img.Create(Result);
  img.setName('secondary_ammo_slot_img');
  img.SetTop(TControl.AdjustToDPI(57));
  img.SetLeft(TControl.AdjustToDPI(174));
  img.SetStretch(True);
  img.SetProportional(True);
  img.setHeight(TControl.AdjustToDPI(50));
  img.setWidth(TControl.AdjustToDPI(50));
  img.setVisible(False);

  img.Create(Result);
  img.setName('cape_slot_img');
  img.SetTop(TControl.AdjustToDPI(111));
  img.SetLeft(TControl.AdjustToDPI(60));
  img.SetStretch(True);
  img.SetProportional(True);
  img.setHeight(TControl.AdjustToDPI(50));
  img.setWidth(TControl.AdjustToDPI(50));
  img.setVisible(False);

  img.Create(Result);
  img.setName('neck_slot_img');
  img.SetTop(TControl.AdjustToDPI(111));
  img.SetLeft(TControl.AdjustToDPI(117));
  img.SetStretch(True);
  img.SetProportional(True);
  img.setHeight(TControl.AdjustToDPI(50));
  img.setWidth(TControl.AdjustToDPI(50));
  img.setVisible(False);

  img.Create(Result);
  img.setName('ammo_slot_img');
  img.SetTop(TControl.AdjustToDPI(111));
  img.SetLeft(TControl.AdjustToDPI(174));
  img.SetStretch(True);
  img.SetProportional(True);
  img.setHeight(TControl.AdjustToDPI(50));
  img.setWidth(TControl.AdjustToDPI(50));
  img.setVisible(False);

  img.Create(Result);
  img.setName('weapon_slot_img');
  img.SetTop(TControl.AdjustToDPI(165));
  img.SetLeft(TControl.AdjustToDPI(40));
  img.SetStretch(True);
  img.SetProportional(True);
  img.setHeight(TControl.AdjustToDPI(50));
  img.setWidth(TControl.AdjustToDPI(50));
  img.setVisible(False);

  img.Create(Result);
  img.setName('body_slot_img');
  img.SetTop(TControl.AdjustToDPI(165));
  img.SetLeft(TControl.AdjustToDPI(117));
  img.SetStretch(True);
  img.SetProportional(True);
  img.setHeight(TControl.AdjustToDPI(50));
  img.setWidth(TControl.AdjustToDPI(50));
  img.setVisible(False);

  img.Create(Result);
  img.setName('shield_slot_img');
  img.SetTop(TControl.AdjustToDPI(165));
  img.SetLeft(TControl.AdjustToDPI(194));
  img.SetStretch(True);
  img.SetProportional(True);
  img.setHeight(TControl.AdjustToDPI(50));
  img.setWidth(TControl.AdjustToDPI(50));
  img.setVisible(False);

  img.Create(Result);
  img.setName('legs_slot_img');
  img.SetTop(TControl.AdjustToDPI(219));
  img.SetLeft(TControl.AdjustToDPI(117));
  img.SetStretch(True);
  img.SetProportional(True);
  img.setHeight(TControl.AdjustToDPI(50));
  img.setWidth(TControl.AdjustToDPI(50));

  img.Create(Result);
  img.setName('hands_slot_img');
  img.SetTop(TControl.AdjustToDPI(273));
  img.SetLeft(TControl.AdjustToDPI(40));
  img.SetStretch(True);
  img.SetProportional(True);
  img.setHeight(TControl.AdjustToDPI(50));
  img.setWidth(TControl.AdjustToDPI(50));
  img.setVisible(False);

  img.Create(Result);
  img.setName('feet_slot_img');
  img.SetTop(TControl.AdjustToDPI(273));
  img.SetLeft(TControl.AdjustToDPI(117));
  img.SetStretch(True);
  img.SetProportional(True);
  img.setHeight(TControl.AdjustToDPI(50));
  img.setWidth(TControl.AdjustToDPI(50));
  img.setVisible(False);

  img.Create(Result);
  img.setName('ring_slot_img');
  img.SetTop(TControl.AdjustToDPI(273));
  img.SetLeft(TControl.AdjustToDPI(194));
  img.SetStretch(True);
  img.SetProportional(True);
  img.setHeight(TControl.AdjustToDPI(50));
  img.setWidth(TControl.AdjustToDPI(50));
  img.setVisible(False);
end;

function TScriptForm._AddSearch(combo : TLabeledComboBox) : TEdit;
begin
  Result.Create(combo.Panel);
  Result.setName(combo.GetName() + "_search");
  Result.setCaption("");
  Result.setOnChange(@Self._OnFilterChanged);
  Result.setAlign(alTop);
  combo.ComboBox.setAlign(alNone);
  Result.setTop(combo.Panel.getTop() + TCOntrol.AdjustToDPI(12));
  combo.ComboBox.setAlign(alBottom);
  combo.Panel.setHeight(TControl.AdjustToDPI(60));
  Result.setOnKeyPress(@TEdit.LowercaseField);
end;

function TScriptForm._SetupGearPanel(parent: TComponent): TPanel;
var
  save, duplicate, remove, load, clear: TButton;
  cb, head, sammo, cape, neck, ammo, weapon, body,
  shield, legs, hands, feet, ring: TLabeledComboBox;

  headSearch, sAmmoSearch, capeSearch, neckSearch,
  ammoSearch, weaponSearch, bodySearch, shieldSearch,
  legSearch, handsSearch, feetSearch, ringSearch : TEdit;

  w, vSpace: Int32;
begin
  Result.Create(parent);
  Result.setTop(TControl.AdjustToDPI(20));
  Result.setAlign(TAlign.alClient);
  Result.setBevelWidth(1);

  Self._SetupGearImagesPanel(Result);

  GearHandler._FormFiltered := True;

  //Top controls
  with cb do
  begin
    Create(Result);
    SetName('gear_selector');
    SetCaption('Gear');
    SetTop(TControl.AdjustToDPI(5));
    SetLeft(TControl.AdjustToDPI(20));
    SetWidth(TControl.AdjustToDPI(284));
    SetStyle(TComboBoxStyle.csDropDown);
    ComboBox.setOnChange(@Self._OnGearSelectorChange);
  end;

  with save do
  begin
    Create(Result);
    setCaption('Save');
    setName('save_gear_button');
    setHeight(TControl.AdjustToDPI(25));
    setWidth(TControl.AdjustToDPI(100));
    setTop(TControl.AdjustToDPI(20));
    setLeft((Self.Size.X div 2) - TControl.AdjustToDPI(40));
    setOnClick(@Self._OnSaveGear);
  end;

  with duplicate do
  begin
    Create(Result);
    setCaption('Duplicate');
    setName('duplicate_gear_button');
    setHeight(save.getHeight());
    setWidth(save.getWidth());
    setTop(save.GetTop());
    setLeft(save.GetRight() + TControl.AdjustToDPI(20));
    setOnClick(@Self._OnDuplicateGear);
  end;

  with remove do
  begin
    Create(Result);
    setCaption('Remove');
    setName('remove_gear_button');
    setHeight(duplicate.getHeight());
    setWidth(duplicate.getWidth());
    setTop(duplicate.GetTop());
    setLeft(duplicate.GetRight() + TControl.AdjustToDPI(30));
    setOnClick(@Self._OnRemoveGear);
  end;

  w := TControl.AdjustToDPI(120);
  vSpace := TControl.AdjustToDPI(8);

  with head do
  begin
    Create(Result);
    SetTop(cb.GetBottom() + TControl.AdjustToDPI(5));
    SetWidth(w);
    SetLeft((Self.Size.X div 2) + TControl.AdjustToDPI(90));
    SetName('head_slot');
    SetCaption('Head');
    _RefreshList(ComboBox, ERSEquipmentSlot.HEAD);
    SetItemIndex(0);
    ComboBox.setOnChange(@Self._OnGearChange);
  end;

  headSearch := Self._AddSearch(head);

  with sammo do
  begin
    Create(Result);
    SetTop(head.GetTop());
    SetLeft(head.GetRight() + TControl.AdjustToDPI(20));
    SetWidth(w);
    SetName('secondary_ammo_slot');
    SetCaption('Secondary ammo');
    _RefreshList(ComboBox, ERSEquipmentSlot.SECONDARY_AMMO);
    SetItemIndex(0);
    ComboBox.setOnChange(@Self._OnGearChange);
  end;

  sAmmoSearch := Self._AddSearch(sammo);

  with cape do
  begin
    Create(Result);
    SetTop(head.GetBottom() + vSpace);
    SetWidth(w);
    SetLeft(head.GetLeft() - TControl.AdjustToDPI(20) - w);
    SetName('cape_slot');
    SetCaption('Cape');
    _RefreshList(ComboBox, ERSEquipmentSlot.CAPE);
    SetItemIndex(0);
    ComboBox.setOnChange(@Self._OnGearChange);
  end;

  capeSearch := Self._AddSearch(cape);

  with neck do
  begin
    Create(Result);
    SetTop(cape.GetTop());
    SetLeft(cape.GetRight() + TControl.AdjustToDPI(20));
    SetWidth(w);
    SetName('neck_slot');
    SetCaption('Neck');
    _RefreshList(ComboBox, ERSEquipmentSlot.NECK);
    SetItemIndex(0);
    ComboBox.setOnChange(@Self._OnGearChange);
  end;

  neckSearch := Self._AddSearch(neck);

  with ammo do
  begin
    Create(Result);
    SetTop(neck.GetTop());
    SetLeft(neck.GetRight() + TControl.AdjustToDPI(20));
    SetWidth(w);
    SetName('ammo_slot');
    SetCaption('Ammo');
    _RefreshList(ComboBox, ERSEquipmentSlot.AMMO);
    SetItemIndex(0);
    ComboBox.setOnChange(@Self._OnGearChange);
  end;

  ammoSearch := Self._AddSearch(ammo);

  with weapon do
  begin
    Create(Result);
    SetTop(cape.GetBottom() + vSpace);
    SetWidth(w);
    SetLeft(head.GetLeft() - TControl.AdjustToDPI(20) - w);
    SetName('weapon_slot');
    SetCaption('Weapon');
    _RefreshList(ComboBox, ERSEquipmentSlot.WEAPON);
    SetItemIndex(0);
    ComboBox.setOnChange(@Self._OnGearChange);
  end;

  weaponSearch := Self._AddSearch(weapon);

  with body do
  begin
    Create(Result);
    SetTop(weapon.GetTop());
    SetLeft(weapon.GetRight() + TControl.AdjustToDPI(20));
    SetWidth(w);
    SetName('body_slot');
    SetCaption('Body');
    _RefreshList(ComboBox, ERSEquipmentSlot.BODY);
    SetItemIndex(0);
    ComboBox.setOnChange(@Self._OnGearChange);
  end;

  bodySearch := Self._AddSearch(body);

  with shield do
  begin
    Create(Result);
    SetTop(body.GetTop());
    SetLeft(body.GetRight() + TControl.AdjustToDPI(20));
    SetWidth(w);
    SetName('shield_slot');
    SetCaption('Shield');
    _RefreshList(ComboBox, ERSEquipmentSlot.SHIELD);
    SetItemIndex(0);
    ComboBox.setOnChange(@Self._OnGearChange);
  end;

  shieldSearch := Self._AddSearch(shield);

  with legs do
  begin
    Create(Result);
    SetTop(weapon.GetBottom() + vSpace);
    SetWidth(w);
    SetLeft(head.GetLeft());
    SetName('legs_slot');
    SetCaption('Legs');
    _RefreshList(ComboBox, ERSEquipmentSlot.LEGS);
    SetItemIndex(0);
    ComboBox.setOnChange(@Self._OnGearChange);
  end;

  legSearch := Self._AddSearch(legs);

  with hands do
  begin
    Create(Result);
    SetTop(legs.GetBottom() + vSpace);
    SetWidth(w);
    SetLeft(head.GetLeft() - TControl.AdjustToDPI(20) - w);
    SetName('hands_slot');
    SetCaption('Hands');
    _RefreshList(ComboBox, ERSEquipmentSlot.HANDS);
    SetItemIndex(0);
    ComboBox.setOnChange(@Self._OnGearChange);
  end;

  handsSearch := Self._AddSearch(hands);

  with feet do
  begin
    Create(Result);
    SetTop(hands.GetTop());
    SetLeft(hands.GetRight() + TControl.AdjustToDPI(20));
    SetWidth(w);
    SetName('feet_slot');
    SetCaption('Feet');
    _RefreshList(ComboBox, ERSEquipmentSlot.FEET);
    SetItemIndex(0);
    ComboBox.setOnChange(@Self._OnGearChange);
  end;

  feetSearch := Self._AddSearch(feet);

  with ring do
  begin
    Create(Result);
    SetTop(feet.GetTop());
    SetLeft(feet.GetRight() + TControl.AdjustToDPI(20));
    SetWidth(w);
    SetName('ring_slot');
    SetCaption('Ring');
    _RefreshList(ComboBox, ERSEquipmentSlot.RING);
    SetItemIndex(0);
    ComboBox.setOnChange(@Self._OnGearChange);
  end;

  ringSearch := Self._AddSearch(ring);

  w := TControl.AdjustToDPI(195);
  //Bottom buttons
  with load do
  begin
    Create(Result);
    setCaption('Load from client');
    setName('load_gear_button');
    setHeight(TControl.AdjustToDPI(27));
    setWidth(w);
    SetLeft(cape.GetLeft());
    SetTop(Self.Size.Y - TControl.AdjustToDPI(100));
    setOnClick(@Self._OnLoadGear);
  end;

  with clear do
  begin
    Create(Result);
    setCaption('Clear client filter');
    setName('clear_filters_button');
    setHeight(load.getHeight());
    setWidth(load.getWidth());
    SetTop(load.GetTop());
    setLeft(load.GetRight() + TControl.AdjustToDPI(10));
    setOnClick(@Self._ClearGearFilter);
  end;

  Self._RefreshSets(Result);
  cb.SetItemIndex(0);

  Self._OnGearSelectorChange(cb.ComboBox);
  GearHandler._FormFiltered := False;
end;

procedure TScriptForm.CreateEquipmentManager();
var
  tab: TTabSheet;
begin
  if not ForceDirectories(ItemFinder.IMAGES_PATH.Replace('itemfinder', 'forms' + DirectorySeparator + 'gear')) then
    TerminateScript('Failed to create cache paths: ' + CACHE_DIR + 'forms' + DirectorySeparator + 'gear');

  Self.AddTab('Equipment Manager');
  tab := Self.Tabs[High(Self.Tabs)];

  Self._SetupGearPanel(tab);
end;

