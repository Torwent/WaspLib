{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

{$IFNDEF WL_HOUSE_INCLUDED}
  {$I WaspLib/optional/handlers/house/house.simba}
{$ENDIF}

{$IFNDEF ANDREW_MUSHTREE_INCLUDED}
  {$I WaspLib/optional/interfaces/mainscreen/mushtree.simba}
{$ENDIF}


type
{$SCOPEDENUMS ON}
  EBirdHouseWood = (BEST, REGULAR, OAK, WILLOW, TEAK, MAPLE, MAHOGANY, YEW, MAGIC, REDWOOD);

function EBirdHouseWood.GetLogs(): TRSItem;
begin
  case Self of
    EBirdHouseWood.REGULAR:  Result := 'Logs';
    EBirdHouseWood.OAK:      Result := 'Oak logs';
    EBirdHouseWood.WILLOW:   Result := 'Willow logs';
    EBirdHouseWood.TEAK:     Result := 'Teak logs';
    EBirdHouseWood.MAPLE:    Result := 'Maple logs';
    EBirdHouseWood.MAHOGANY: Result := 'Mahogany logs';
    EBirdHouseWood.YEW:      Result := 'Yew logs';
    EBirdHouseWood.MAGIC:    Result := 'Magic logs';
    EBirdHouseWood.REDWOOD:  Result := 'Redwood logs';
  end;
end;

function EBirdHouseWood.GetHouse(): TRSItem;
begin
  case Self of
    EBirdHouseWood.REGULAR:  Result := 'Bird house';
    EBirdHouseWood.OAK:      Result := 'Oak bird house';
    EBirdHouseWood.WILLOW:   Result := 'Willow bird house';
    EBirdHouseWood.TEAK:     Result := 'Teak bird house';
    EBirdHouseWood.MAPLE:    Result := 'Maple bird house';
    EBirdHouseWood.MAHOGANY: Result := 'Mahogany bird house';
    EBirdHouseWood.YEW:      Result := 'Yew bird house';
    EBirdHouseWood.MAGIC:    Result := 'Magic bird house';
    EBirdHouseWood.REDWOOD:  Result := 'Redwood bird house';
  end;
end;

type
  EBirdHouseLocation = (VALLEY_WEST, VALLEY_EAST, FOREST_NORTH, FOREST_SOUTH);
  EBirdHouseState = (UNKNOWN, NONE, EMPTY, FULL, DONE);

  EBirdHouseHandlerState = (
    START,

    OPEN_BANK,
    DEPOSIT_ITEMS,
    WITHDRAW_LOGS,
    WITHDRAW_SEEDS,
    WITHDRAW_PENDANT,
    WITHDRAW_HOUSETAB,
    CLOSE_INTERFACE,

    TELEPORT_HOUSE,
    USE_HOUSE_PENDANT,
    USE_PENDANT,

    NEXT_LOCATION,
    EXIT_CAVE,
    USE_MUSHTREE,

    UPDATE_BIRDHOUSE,
    EMPTY_BIRDHOUSE,
    CRAFT_BIRDHOUSE,
    BUILD_BIRDHOUSE,
    FILL_BIRDHOUSE,

    FINISH
  );

  TBirdHouse = record
    State: EBirdHouseState;
    MushTree: ERSMushTreeLocation;
    Obj: TRSObjectV2;
  end;

  TBirdHouseHandler = record(TSRLBaseRecord)
    State: EBirdHouseHandlerState;


    WyvernCaveLadder: TRSObjectV2;
    Location: EBirdHouseLocation;
    Houses: array [EBirdHouseLocation] of TBirdHouse;
    Wood: EBirdHouseWood;
    Items: record
      Logs, House, Seeds: TRSItem;
    end;

    Timer: TCountDown;

    OnStart, OnStop, IsFinished: function (): Boolean of object;

    Map: TRSMap; //TRSMap exclusive to the TBirdHouseHandler
    Position: TPoint;
  end;


function TBirdHouseHandler._IsFinished(): Boolean;
begin
  Result := Self.Map.GetRegionIndex() > 1;
end;

function TBirdHouseHandler.GetBestWood(): EBirdHouseWood;
var
  a, b: EBirdHouseWood;
  craft, hunt: Int32;
begin
  craft := Stats.GetLevel(ERSSkill.CRAFTING);
  case craft of
    0..4: RaiseException('You can''t build birdhouses with ' + ToStr(craft) + ' crafting.');
    5..14:  a := EBirdHouseWood.REGULAR;
    15..24: a := EBirdHouseWood.OAK;
    25..34: a := EBirdHouseWood.WILLOW;
    35..44: a := EBirdHouseWood.TEAK;
    45..49: a := EBirdHouseWood.MAPLE;
    50..59: a := EBirdHouseWood.MAHOGANY;
    60..74: a := EBirdHouseWood.YEW;
    75..89: a := EBirdHouseWood.MAGIC;
    else    a := EBirdHouseWood.REDWOOD;
  end;

  hunt := Stats.GetLevel(ERSSkill.CRAFTING);
  case hunt of
    0..4: RaiseException('You can''t build birdhouses with ' + ToStr(hunt) + ' hunter.');
    5..13:  b := EBirdHouseWood.REGULAR;
    14..23: b := EBirdHouseWood.OAK;
    24..33: b := EBirdHouseWood.WILLOW;
    34..43: b := EBirdHouseWood.TEAK;
    44..48: b := EBirdHouseWood.MAPLE;
    49..58: b := EBirdHouseWood.MAHOGANY;
    59..73: b := EBirdHouseWood.YEW;
    74..88: b := EBirdHouseWood.MAGIC;
    else    b := EBirdHouseWood.REDWOOD;
  end;

  Result := EBirdHouseWood(Min(Ord(a), Ord(b)));
end;

procedure TBirdHouseHandler._Setup();
const
  COORDINATES: TPointArray = [
    [10956, 35410],[10976, 35386], [10612, 34902], [10620, 35170]
  ];
var
  loc: EBirdHouseLocation;
  i: Int32;
begin
  if @Self.IsFinished = nil then
    Self.IsFinished := @Self._IsFinished;

  if Self.Wood = EBirdHouseWood.BEST then
    Self.Wood := Self.GetBestWood();

  Self.Items.Logs := Self.Wood.GetLogs();
  Self.Items.House := Self.Wood.GetHouse();

  for loc := Low(EBirdHouseLocation) to High(EBirdHouseLocation) do
    with Self.Houses[loc] do
    begin
      i := Ord(loc);
      MushTree := ERSMushTreeLocation(1 + (i div 2) * 2);

      Obj.SetupEx([0.8,0.8, 5], [COORDINATES[i]]);
      Obj.SetupUpText(['Space', 'house']);
      //Finder only has the ground "Spot" and little rocks colors. I think that is enough
      Obj.Finder.Colors := [CTS2(1191511, 8, 0.24, 4.86), CTS2(5266787, 21, 0.06, 0.15)];
      Obj.Walker := @Self.Map.Walker;
    end;
end;

procedure TBirdHouseHandler.InternalSetup(bmp: TMufasaBitmap);
var
  bounds: TBox;
  sizeMap, sizeBMP, sizeNew: TPoint;
begin
  // wyvern cave in fossil island: Chunk([55,161,57,159], 0)
  Self.Map.Loader.Load([Chunk([56,61,60,57], 0), Chunk([58,60,58,60], 1)], 8, 80);

  //add map to our handler map regardless of where it came from, TRSMap or TRSWalker
  sizeMap := [Self.Map.Loader.Map.getWidth(), Self.Map.Loader.Map.getHeight()];
  sizeBMP := [bmp.getWidth(), bmp.getHeight()];

  //add just enought space to Loader.Map so we can fit bmp inside.
  if (sizeMap.X + sizeBMP.X) > (sizeMap.Y + sizeBMP.Y) then
  begin
    bounds := [sizeMap.X, 0, sizeMap.X + sizeBMP.X, sizeBMP.Y];
    Self.Map.Loader.Map.SetSize(bounds.X2, Max(sizeMap.Y, sizeBMP.Y));
  end
  else
  begin
    bounds := [0, sizeMap.Y, sizeBMP.X, sizeMap.Y + sizeBMP.Y];
    Self.Map.Loader.Map.SetSize(Max(sizeMap.X, sizeBMP.X), sizeMap.Y + sizeBMP.Y);
  end;

  //Draw bmp onto Loader.Map and update the other bitmaps so everything works well
  sizeNew := [Self.Map.Loader.Map.getWidth(), Self.Map.Loader.Map.getHeight()];
  Self.Map.Loader.Map.DrawBitmap(bmp, [bounds.X1, bounds.Y1]);
  Self.Map.Loader.Map.Downsample(Self.Map.Loader.Downscale, Self.Map.Loader.DownscaledMap);
  Self.Map.Loader.Heightmap.SetSize(sizeNew.X, sizeNew.Y);
  Self.Map.Loader.Collision.SetSize(sizeNew.X, sizeNew.Y);

  //add a arbitary region and update other maps sizes so other stuff works well
  Self.Map.Loader.Regions += ['External', bounds, bounds, 0, Point(0,0)];

  Self.Map.InternalSetup();
end;

procedure TBirdHouseHandler.Setup(map: PRSMap; wood: EBirdHouseWood; seeds: TRSItem);
begin
  Self.InternalSetup(map^.Loader.Map);

  Self.Wood := wood;
  Self.Items.Seeds := seeds;

  Self._Setup();
end;

procedure TBirdHouseHandler.Setup(map: PRSWalker; wood: EBirdHouseWood; seeds: TRSItem); overload;
begin
  Self.InternalSetup(map^.Map.Map);

  Self.Wood := wood;
  Self.Items.Seeds := seeds;

  Self._Setup();
end;

procedure TBirdHouseHandler.Setup(wood: EBirdHouseWood; seeds: TRSItem); overload;
begin
  Self.Map.Loader.Load([Chunk([56,61,60,57], 0), Chunk([58,60,58,60], 1)], 8, 80);
  Self.Map.InternalSetup();

  Self.Wood := wood;
  Self.Items.Seeds := seeds;

  Self._Setup();
end;


procedure TBirdHouseHandler.Start();
var
  loc: EBirdHouseLocation;
begin
  if @Self.OnStart <> nil then Self.OnStart();
  MushTree.Mushrooms.Walker := @Self.Map.Walker;

  for loc := Low(EBirdHouseLocation) to High(EBirdHouseLocation) do
    if Self.Houses[loc].State = EBirdHouseState.FULL then
      Self.Houses[loc].State := EBirdHouseState.DONE;
end;

procedure TBirdHouseHandler.Stop();
begin
  if @Self.OnStop <> nil then Self.OnStop();
  MushTree.Mushrooms.Walker := @System.Map.Walker;
end;


function TBirdHouseHandler.PendantTeleport(): Boolean;
begin
  if Inventory.ClickItem('Digsite pendant (5)', 'Fossil Island') then
    Result := WaitUntil(Self.Map.GetRegionIndex() = 1, 300, 5000);
end;

function TBirdHouseHandler.HousePendantTeleport(): Boolean;
begin
  //probably need to look better into this lol
  if House.Teleports[EHouseTeleport.DIGSITE].WalkSelectOption(['Fossil Island']) then
    Result := WaitUntil(Self.Map.GetRegionIndex() = 1, 300, 5000);
end;

function TBirdHouseHandler.IsInWyvernCave(): Boolean;
begin
  // or pointinpoly/box
  Result := Self.Map.GetRegionIndex() = 123;
end;

function TBirdHouseHandler.ExitWyvernCave(): Boolean;
begin
  if Self.IsInWyvernCave() then
    Self.WyvernCaveLadder.WalkClick();

  Result := WaitUntil(not Self.IsInWyvernCave(), 750, 7500);
end;

function TBirdHouseHandler.InLocation(): Boolean;
begin
  case Self.Location of
    EBirdHouseLocation.VALLEY_WEST, EBirdHouseLocation.VALLEY_EAST:
      Result := Self.Position.InBox([10844,35294,11108,35486]);

    EBirdHouseLocation.FOREST_NORTH, EBirdHouseLocation.FOREST_SOUTH:
      Result := Self.Position.InBox([10496,34862,10776,35218]);
  end;
end;

function TBirdHouseHandler.NextLocation(): EBirdHouseLocation;
begin
  if Self.Location = EBirdHouseLocation.FOREST_SOUTH then
    Exit(EBirdHouseLocation.VALLEY_WEST);
  Result := Self.Location + 1;
end;

procedure TBirdHouseHandler.UpdateHouseState();
var
  text: String;
begin
  if not Self.Houses[Self.Location].Obj.WalkHover() then Exit;

  text := MainScreen.GetUpText();

  if text.Contains('(empty)') then
    Self.Houses[Self.Location].State := EBirdHouseState.EMPTY
  else if text.Contains('Build') then
    Self.Houses[Self.Location].State := EBirdHouseState.NONE
  else if text.Contains('irdhouse') then
    Self.Houses[Self.Location].State := EBirdHouseState.FULL;
end;

function TBirdHouseHandler.EmptyHouse(): Boolean;
var
  count: Int32;
begin
  count := Inventory.Count();
  if Self.Houses[Self.Location].Obj.WalkClick() then
  begin
    Minimap.WaitMoving();
    Result := WaitUntil(count < Inventory.Count(), 300, 3000);
  end;

  if Result then Self.Houses[Self.Location].State := EBirdHouseState.NONE;
end;

function TBirdHouseHandler.CraftHouse(): Boolean;
begin
  if not Inventory.Use(Self.Items.Logs, 'Clockwork') then Exit;
  Result := WaitUntil(Inventory.ContainsItem(Self.items.House), 300, 3000);
end;

function TBirdHouseHandler.BuildHouse(): Boolean;
var
  count: Int32;
begin
  count := Inventory.Count();
  if Self.Houses[Self.Location].Obj.WalkClick() then
  begin
    Minimap.WaitMoving();
    Result := WaitUntil(count > Inventory.Count(), 300, 3000);
  end;

  if Result then Self.Houses[Self.Location].State := EBirdHouseState.EMPTY;
end;

function TBirdHouseHandler.FillHouse(): Boolean;
var
  count: Int32;
begin
  count := Inventory.CountItemStack(Self.Items.Seeds);
  if not Inventory.ClickItem(Self.Items.Seeds) then Exit;
  if not Self.Houses[Self.Location].Obj.WalkSelectOption(['Use', '>']) then Exit;
  Minimap.WaitMoving();
  Result := WaitUntil(count > Inventory.CountItemStack(Self.Items.Seeds), 300, 3000);

  if Result then Self.Houses[Self.Location].State := EBirdHouseState.FULL;
end;


function TBirdHouseHandler.GetState(): EBirdHouseHandlerState;
begin
  if RSInterface.IsOpen() then
  begin
    if Bank.IsOpen() then
    begin
      //HANDLE BANK
      Exit(EBirdHouseHandlerState.DEPOSIT_ITEMS);
      Exit(EBirdHouseHandlerState.WITHDRAW_LOGS);
      Exit(EBirdHouseHandlerState.WITHDRAW_SEEDS);
      Exit(EBirdHouseHandlerState.WITHDRAW_PENDANT);
      Exit(EBirdHouseHandlerState.WITHDRAW_HOUSETAB);
    end;

    if MushTree.IsOpen() then
      Exit(EBirdHouseHandlerState.USE_MUSHTREE);

    Exit(EBirdHouseHandlerState.CLOSE_INTERFACE);
  end;

  Self.Position := Self.Map.Position();

  if not Self.InLocation() then
  begin
    if Self.Position.AnyInRange(MushTree.Mushrooms.Coordinates, 80) then
      Exit(EBirdHouseHandlerState.USE_MUSHTREE);
    //Check if we are in poh?
    Exit(EBirdHouseHandlerState.USE_PENDANT);
  end;

  if Self.Houses[Self.Location].State = EBirdHouseState.FULL then
    Exit(EBirdHouseHandlerState.NEXT_LOCATION);

  //Do Birdhouse...
end;

procedure TBirdHouseHandler.Run();
begin
  Self.Start();

  repeat
    Self.State := Self.GetState();
    Self.DebugLn(ToStr(Self.State));

    case Self.State of
      EBirdHouseHandlerState.START: ;
      EBirdHouseHandlerState.DEPOSIT_ITEMS: ;
      EBirdHouseHandlerState.WITHDRAW_LOGS: ;
      EBirdHouseHandlerState.WITHDRAW_SEEDS: ;
      EBirdHouseHandlerState.WITHDRAW_PENDANT: ;
      EBirdHouseHandlerState.WITHDRAW_HOUSETAB: ;

      EBirdHouseHandlerState.TELEPORT_HOUSE: House.Enter();
      EBirdHouseHandlerState.USE_HOUSE_PENDANT: Self.HousePendantTeleport();
      EBirdHouseHandlerState.USE_PENDANT: Self.PendantTeleport();

      EBirdHouseHandlerState.NEXT_LOCATION: Self.Location := Self.NextLocation();
      EBirdHouseHandlerState.USE_MUSHTREE: MushTree.WalkTeleport(Self.Houses[Self.Location].MushTree);

      EBirdHouseHandlerState.UPDATE_BIRDHOUSE: Self.UpdateHouseState();
      EBirdHouseHandlerState.EMPTY_BIRDHOUSE: Self.EmptyHouse();
      EBirdHouseHandlerState.CRAFT_BIRDHOUSE: Self.CraftHouse();
      EBirdHouseHandlerState.BUILD_BIRDHOUSE: Self.BuildHouse();
      EBirdHouseHandlerState.FILL_BIRDHOUSE: Self.FillHouse();

      EBirdHouseHandlerState.EXIT_CAVE: Self.ExitWyvernCave();

      EBirdHouseHandlerState.FINISH: Break;
    end;
  until Self.State = EBirdHouseHandlerState.FINISH;

  Self.Stop();
end;


var
  BirdHouseHandler: TBirdHouseHandler;
{$SCOPEDENUMS OFF}

(*
//EXAMPLE TEST OF SHOWING THE MAPS JOINED TOGETHER BETWEEN TRSWALKER AND TRSMAP

var
  rsw: TRSWalker;
begin
  rsw.SetupRegion(RSRegions.ARDOUGNE);
  BirdHouseHandler.Setup(@rsw, EBirdHouseWood.MAHOGANY, 'Guam seed');
  BirdHouseHandler.Map.Debug();
end.
*)
