{$DEFINE AERO_STORE_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  TRSStore = record(TRSTitledInterface)
    Items: TRSItemInterface;
    SlotBoxes: TBoxArray;
    ItemsArea, InfoBox: TBox;
  end;


function TRSStore.FindItemBoundaries(): TBoxArray;
var
  tpa, final: TPointArray;
  atpa: T2DPointArray;
  b: TBox;
  c: Int32;
begin
  if SRL.FindColors(final, RS_ITEM_BORDER, Self.ItemsArea) = 0 then Exit;

  for c in [RS_ITEM_YELLOW_STACK, RS_ITEM_WHITE_STACK, RS_ITEM_GREEN_STACK] do
    if SRL.FindColors(tpa, c, Self.ItemsArea) > 0 then
      final += tpa;

  atpa := final.Cluster(50, 3);

  for b in atpa.ToTBA() do
  begin
    if b.Height() <= 5 then Continue;
    Result += Grid(8, 1, 32, b.Height(), [15], [Self.ItemsArea.X1, b.Y1 - 1]);
  end;
end;

procedure TRSStore.Setup(); override;
begin
  inherited;

  Self.Name := 'Store';
  Self.Items.Name := Self.Name + '.Items';
  Self.Items.SlotBoxesFunction := @Self.FindItemBoundaries;
  Self.Items.DiscoverOffset := [0, 10, 3, 0];
end;

procedure TRSStore.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
begin
  alignment.MaxWidth := 488;
  alignment.MaxHeight := 300;

  case RSClient.Mode of
    ERSClientMode.FIXED:
    begin
      alignment.Left := InterfaceArea.Bounds.X1;
      alignment.Right := InterfaceArea.Bounds.X2 + 1;
      alignment.Top := InterfaceArea.Bounds.Y1 + 3;
      alignment.Bottom := InterfaceArea.Bounds.Y2 + 3;
    end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
    begin
      alignment.Left := InterfaceArea.Bounds.X1 - 1;
      alignment.Right := InterfaceArea.Bounds.X2;
      alignment.Top := InterfaceArea.Bounds.Y1 + 1;
      alignment.Bottom := InterfaceArea.Bounds.Y2 + 4;
    end;
  end;

  Self.SetupAlignment(alignment);

  Self.SlotBoxes := Grid(8, 5, 35, 32, [12, 16], [Self.Bounds.X1 + 61, Self.Bounds.Y1 + 40]);
  Self.ItemsArea := Self.SlotBoxes.Merge();

  Self.InfoBox.X1 := Self.Bounds.X1 + 30;
  Self.InfoBox.Y1 := Self.Bounds.Y2 - 35;
  Self.InfoBox.X2 := Self.Bounds.X1 + 100;
  Self.InfoBox.Y2 := Self.Bounds.Y2 - 12;
  Self.InfoBox.LimitTo(Self.Bounds);
end;


function TRSStore.IsOpen(): Boolean;
begin
  Result := ['Value','check'] in OCR.Recognize(Self.InfoBox, TOCRThresholdFilter.Create(15), RS_FONT_PLAIN_12);
end;

function TRSStore.IsOpen(WaitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(50, 1500), WaitTime);
end;

function TRSStore.Close(PressEscape: Boolean = False): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

function TRSStore.FindItem(item: TRSItem; out box: TBox): Boolean;
begin
  if not Self.IsOpen() then Exit;
  Result := Self.Items.Find([item], box);
end;


function TRSStore.FindAll(items: TRSItemArray; out boxes: TBoxArray): Boolean;
begin
  Result := Self.Items.FindAll(items, boxes);
end;


function TRSStore.ContainsItem(item: TRSItem): Boolean;
var
  b: TBox;
begin
  Result := Self.FindItem(item, b);
end;

function TRSStore.ContainsAny(itemArray: TRSItemArray): Boolean;
begin
  Result := Self.Items.ContainsAny(itemArray);
end;

function TRSStore.ContainsAll(itemArray: TRSItemArray): Boolean;
var
  tba: TBoxArray;
begin
  Result := Self.FindAll(itemArray, tba);
end;


function TRSStore.CountItemStack(item: TRSItem): Int32;
begin
  Result := Self.Items.CountStack(item);
end;

function TRSStore.HoverItem(item: TRSItem): Boolean;
begin
  Result := Self.Items.MouseItem(item);
end;

function TRSStore.ClickItem(item: TRSItem; Option: String = ''): Boolean;
begin
  if not Self.IsOpen() or not Self.HoverItem(item) then Exit;

  if (option = '') or MainScreen.IsUpText(option) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Exit(True);
  end;

  Result := ChooseOption.Select(option)
end;

procedure TRSStore.Draw(bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then Exit;
  inherited;
  bitmap.DrawBoxes(Self.SlotBoxes, $00FFFF);
end;

var
  Store: TRSStore;

function TRSGameTabs.GetCurrentTab(): ERSGametab; override;
begin
  Result := inherited;
  if (Result = ERSGameTab.UNKNOWN) and Store.IsOpen() then
    Result := ERSGameTab.INVENTORY;
end;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;
  Store.SetupAlignment();
end;

procedure TSRL.Setup(); override;
begin
  inherited;
  Store.Setup();
end;

procedure TSRL.Debug(bitmap: TMufasaBitmap); override;
begin
  inherited;
  Store.Draw(bitmap);
end;
