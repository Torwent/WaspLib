{$DEFINE WL_WALKER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

{$I waspweb.graph}
{$I agility.graph}

var
  WalkerArray: TStringArray;
  WalkerOffsetArray: TPointArray;

// overriden just so I can load maps from WaspLib maps folder
function TRSWalker.FindMap(Map: String): String; static; override;
var
  Mask: String = '.png;.bmp;';
  Files: TStringArray;
begin
  if FileExists(Map) then
    Exit(ExpandFileName(Map));

  Mask := StringReplace(Mask, '.', Map + '.', [rfReplaceAll]);

  Files := FindFile(ExtractFileDir(Map), Mask, False, False) +
           FindFile({$MACRO CURRENT_DIRECTORY}, Mask, True, False);

  if Length(Files) > 0 then
    Result := Files[0];
end;

// overriden to provide the ability to offset the map
procedure TRSWalker.Setup(Map: String; Manage: Boolean = True; Scaling: Int32 = 9); override;
var
  Path: String;
  Bitmap, Mask, Sample: TMufasaBitmap;
  X, Y: Int32;
begin
  Self.Name := Map.Lower();

  Path := Self.FindMap(Map);
  if (Path = '') then
    Self.Fatal('Unable to find map: ' + Map);

  Self.Scaling := Scaling;
  Self.ClickRandomness := 4;

  if Name.Contains('world') or Name.Contains('mainland') or Name.Contains('zeah') then
    Self.WebGraph := WaspWeb
  else if Name.Contains('agility') then
    Self.WebGraph := WaspAgility;

  Self.World := Self.LoadMap(Path);
  if Manage then
    AddOnTerminate(@Self.Free);

  // Fixed or resizable, doesn't matter.
  Sample := Self.World.Downsample(Self.Scaling);
  Bitmap := Self.GetCleanMinimap();
  Mask := Self.ScaleMinimap(Bitmap, Self.Scaling);

  for X := 0 to Mask.getWidth() - 1 do
    for Y := 0 to Mask.getHeight() - 1 do
      if (Mask.GetPixel(X, Y) <> 0) then
        Mask.SetPixel(X, Y, $FFFFFF);

  Self.Cache := TMatchTemplateRGBCache.Create(Sample.ToMatrix(), Mask.ToMatrix());

  Sample.Free();
  Bitmap.Free();
  Mask.Free();

  WalkerArray += Name;
  if Name.Contains('mainland') then
    WalkerOffsetArray += [3583, 0]
  else if Name.ContainsAll(['x', 'y']) then
  begin
    X := StrToInt(Name.After('x').Before('y'));
    Y := StrToInt(Name.After('x').After('y'));
    WalkerOffsetArray += [X, Y];
  end
  else
    WalkerOffsetArray += [0, 0];
end;

// overriden to take into account map offset on debug
procedure TRSWalker.DebugPosition; override;
var
  X1, Y1, X2, Y2, X, Y: Int32;
  P: TPoint;
  Bitmap, WorldBitmap, MinimapBitmap: TMufasaBitmap;
  Time: Double;
  Position: TPoint;
  Lines: TStringArray;
  WalkerOffset: TPoint;
begin
  WalkerOffset := WalkerOffsetArray[WalkerArray.Find(Name)];

  Freeze();

  Time := PerformanceTimer();
  Position := Self.GetMyPos();
  Time := PerformanceTimer() - Time;

  X1 := Max(0, (Position.X - WalkerOffset.X) - 200);
  Y1 := Max(0, (Position.Y - WalkerOffset.Y) - 200);
  X2 := Min(X1 + 400, Self.World.GetWidth()  - 1);
  Y2 := Min(Y1 + 400, Self.World.GetHeight() - 1);

  X := (Position.X - WalkerOffset.X) - X1;
  Y := (Position.Y - WalkerOffset.Y) - Y1;

  WorldBitmap := Self.World.Copy(X1, Y1, X2, Y2);
  WorldBitmap.LineTo(Point(0, Y), Point(X2 - X1, Y), $00FF00);
  WorldBitmap.LineTo(Point(X, 0), Point(X, Y2 - Y1), $00FF00);
  WorldBitmap.DrawBox(Box(X - 2, Y - 2, X + 2, Y + 2), $FFFFFF);

  MinimapBitmap := ScaleMinimap(GetCleanMinimap(), 1);

  P := MinimapBitmap.GetCenter();
  if RSClient.Mode = ERSClientMode.FIXED then
    P := P.Offset(0, 8).Rotate(-Minimap.GetCompassAngle(False), P);

  MinimapBitmap.DrawBoxFilled([P.X - 1, P.Y - 1, P.X + 1, P.Y + 1], False, $FFFFFF);
  MinimapBitmap.SetTransparentColor(0);

  Bitmap.Init();
  Bitmap.SetSize(400 + MinimapBitmap.GetWidth() + 30, 420);
  Bitmap.DrawClear($403027);

  Lines := [
    '('      + ToStr(Position.X, ', ', Position.Y) + ')',
    'Acc: '  + ToStr(Round(Self.Similarity, 3)),
    'Time: ' + ToStr(Round(Time)) + ' ms'
  ];

  Bitmap.SetFontName('Consolas');
  Bitmap.SetFontSize(18);
  Bitmap.SetFontAntialiasing(True);

  Bitmap.DrawText(Lines[0], [420, 20 + MinimapBitmap.GetHeight()], $FFFFFF);
  Bitmap.DrawText(Lines[1] + LineEnding + Lines[2], [420, 370], $FFFFFF);

  WorldBitmap.DrawTransparent(10, 10, Bitmap);
  WorldBitmap.Free();

  MinimapBitmap.DrawTransparent(420, 10, Bitmap);
  MinimapBitmap.Free();

  Bitmap.Debug();
  Bitmap.Free();

  UnFreeze();
end;

// overriden to take into account map offset
function TRSWalker.FullSearch(Templ, World: TMufasaBitmap; Position: TPoint; out Match: Single): TPoint; override;
const
  TEMPL_SIZE = 25;
  SLICE_SIZE = TEMPL_SIZE + 45;
  SCALING = 2;
var
  Slice, SliceScaled, TemplScaled: TMufasaBitmap;
  Matrix: TSingleMatrix;
  Area: TBox;
  WalkerOffset: TPoint;
begin
  WalkerOffset := WalkerOffsetArray[WalkerArray.Find(Name)];

  Area := [
    Max(0, Position.X - SLICE_SIZE),
    Max(0, Position.Y - SLICE_SIZE),
    Min(World.GetWidth()  - 1, Position.X + SLICE_SIZE),
    Min(World.GetHeight() - 1, Position.Y + SLICE_SIZE)
  ];

  Slice := World.Copy(Area.X1, Area.Y1, Area.X2, Area.Y2);
  SliceScaled := Slice.Downsample(SCALING);

  TemplScaled := Templ.Downsample(SCALING);
  with TemplScaled.GetCenter() do
    TemplScaled.Crop(X - TEMPL_SIZE, Y - TEMPL_SIZE, X + TEMPL_SIZE, Y + TEMPL_SIZE);

  Matrix := SliceScaled.MatchTemplate(TemplScaled, TM_CCOEFF_NORMED);

  with Matrix.ArgMax() do
  begin
    Match := Matrix[Y, X];

    Result.X := Area.X1 + (X + TEMPL_SIZE) * SCALING;
    Result.Y := Area.Y1 + (Y + TEMPL_SIZE) * SCALING;
    Result := Result.Offset(WalkerOffset);
  end;

  TemplScaled.Free();
  SliceScaled.Free();
  Slice.Free();
end;


// overriden to add antiban
procedure TRSWalker.WaitMoving(Destination: TPoint; WaitUntilDistance: Int32; DoAntiban: Boolean); overload;
var
  Timeout, Countdown: TCountDown;
  Position: record
    Current, Previous: TPoint;
  end;
begin
  Timeout.Init(Round(SRL.TruncatedGauss(20000, 25000)));

  Countdown.Init(Round(SRL.TruncatedGauss(500, 1500)));
  Countdown.Timeout := GetTickCount() + Round(SRL.TruncatedGauss(2500, 3500));

  Position.Previous := Self.GetMyPos();
  Position.Current := Position.Previous;

  // Break from the loop if:
  // - Haven't moved in 500ms
  // - Been walking for over 20 seconds
  // - Within `WaitUntilDistance` to the destination
  repeat
    Self.CheckRunEnergy();

    if DoAntiban then
    begin
      Antiban.WalkerTasks;
      DoAntiban := False;
    end;

    Position.Previous := Position.Current;
    Position.Current := Self.GetMyPos();
    if Position.Current <> Position.Previous then
      Countdown.Restart();

    if (@OnWalkingEvent <> nil) then
      OnWalkingEvent(@Self, Position.Current, Destination);

    if not Self.Enabled then
      Break;

    Wait(100);
  until Timeout.IsFinished() or Countdown.IsFinished() or (Position.Current.DistanceTo(Destination) <= WaitUntilDistance);
end;

function TRSWalker.WalkFinalStep(PlayerPoint, WorldPoint: TPoint; WaitUntilDistance: Int32; DoAntiban: Boolean): Boolean; overload;
var
  MinimapPoint: TPoint;
begin
  if (@Self.OnWalkEvent <> nil) then
    Self.OnWalkEvent(@Self, PlayerPoint, WorldPoint);
  if (@Self.OnWalkEventEx <> nil) then
    Self.OnWalkEventEx(@Self, PlayerPoint, WorldPoint);

  if not Self.Enabled then
    Exit(True);

  MinimapPoint := Self.WorldToMM(PlayerPoint, WorldPoint, Minimap.GetCompassAngle(False));
  if (not Minimap.IsPointOn(MinimapPoint)) then
    Exit(False);
  if (Minimap.Center.DistanceTo(MinimapPoint) < 5) then
    Exit(True);

  Result := Self.Click(MinimapPoint, 0);
  if Result then
    Self.WaitMoving(WorldPoint, WaitUntilDistance, DoAntiban);
end;

function TRSWalker.WalkStep(PlayerPoint, WorldPoint: TPoint; DoAntiban: Boolean): Boolean; overload;
var
  MinimapPoint: TPoint;
  WaitUntilDistance: Int32;
begin
  if (@Self.OnWalkEvent <> nil) then
    Self.OnWalkEvent(@Self, PlayerPoint, WorldPoint);
  if (@Self.OnWalkEventEx <> nil) then
    Self.OnWalkEventEx(@Self, PlayerPoint, WorldPoint);

  if not Self.Enabled then
    Exit(True);

  MinimapPoint := Self.WorldToMM(PlayerPoint, WorldPoint, Minimap.GetCompassAngle(False));
  if (not Minimap.IsPointOn(MinimapPoint)) then
    Exit(False);
  if (Minimap.Center.DistanceTo(MinimapPoint) < 5) then
    Exit(True);

  Result := Self.Click(MinimapPoint, Self.ClickRandomness);

  if Result then
  begin
    if (Random() < 0.15) then // 15% chance of randomness else mean
      WaitUntilDistance := Random(Distance(Minimap.Center, MinimapPoint))
    else
      WaitUntilDistance := SRL.NormalRange(0, Distance(Minimap.Center, MinimapPoint) + 10);

    Self.WaitMoving(WorldPoint, WaitUntilDistance, DoAntiban);
  end
end;

function TRSWalker.WalkPath(Path: TPointArray; WaitUntilDistance: Int32 = 0): Boolean; override;

  function BuildPath(TPA: TPointArray): TPointArray;
  var
    I, J: Int32;
    Line: TPointArray;
  begin
    for I := 1 to High(TPA) do
    begin
      Line := TPAFromLine(TPA[I-1], TPA[I]);

      J := 0;
      while J < High(Line) do
      begin
        Result += Line[J];

        Inc(J, Random(5, 15));
      end;
    end;

    Result += TPA[High(TPA)];
  end;

  function AdvancePath(var Index: Int32; PlayerPoint: TPoint): Boolean;
  var
    Angle: Double := Minimap.GetCompassAngle(False);
    Previous: Int32 := Index;
    Nearest, Furthest: Int32;
  begin
    Nearest := Self.Path.Find(Self.Path.Sorted(PlayerPoint)[0]);

    while (Nearest < High(Self.Path)) and (not Self.IsWalkable(Self.Path[Nearest+1], PlayerPoint, Angle)) do
      Inc(Nearest);

    Furthest := Nearest;
    while (Furthest < High(Self.Path)) and Self.IsWalkable(Self.Path[Furthest+1], PlayerPoint, Angle) do
      Inc(Furthest);

    // 15% chance of randomness else furthest
    Index := Furthest;
    if Random() < 0.15 then
      Index := Random(Nearest, Furthest);

    Result := Index > Previous;
  end;

var
  PlayerPoint: TPoint;
  Index, Fails: Int32;
  P: TPoint;
begin
  Self.Enabled := True;
  Self.Path := BuildPath([Self.GetMyPos()] + Path);

  while Self.Enabled and (Fails < 10) do
  begin
    PlayerPoint := Self.GetMyPos();

    if AdvancePath(Index, PlayerPoint) then
      Fails := 0
    else
    begin
      Inc(Fails);

      // Likely haven't moved far enough to advance to next point
      if (Fails < 5) then
      begin
        Wait(300);

        Continue;
      end;

      if (Fails mod 2 = 0) then
        Minimap.WaitFlag();
    end;

    if Index = High(Self.Path) then
    begin
      if Self.WalkFinalStep(PlayerPoint, Self.Path[Index], WaitUntilDistance, SRL.Dice(3)) then
        Exit(True);
    end else
      begin
        Self.WalkStep(PlayerPoint, Self.Path[Index], SRL.Dice(10));
        if SRL.Dice(35) then
      begin
        repeat
            P := SRL.RandomPoint(Mouse.Position(), 150);
        until P.DistanceTo(Mouse.Position) > 50; // Make sure we move at least 50 pixels
          ASyncMouse.Move(P);
      end;
        end;
  end;

  if Fails = 10 then
    Self.DebugLn('Failed to advance path');
end;



// Checks if we are within Distance of Tile
function TRSWalker.AtTile(Tile: TPoint; Distance: Int32 = 15): Boolean;
begin
  Result := Self.GetMyPos.DistanceTo(Tile) <= Distance;
end;

function TRSWalker.AtTile(TilesArray: TPointArray; Distance: Int32 = 15): Boolean; overload;
var
  i: Int32;
begin
  Result := False;

  for i := 0 to High(TilesArray) do
  begin
    if (Self.GetMyPos.DistanceTo(TilesArray[i]) <= Distance) then
      Exit(True);
  end;
end;

function TRSWalker.AtTile(T2DTileArray: T2DPointArray; Distance: Int32 = 15): Boolean; overload;
var
  Idx, i: Int32;
begin
  Result := False;

  for Idx := 0 to High(T2DTileArray) do
    for i := 0 to High(T2DTileArray[Idx]) do
      if (Self.GetMyPos.DistanceTo(T2DTileArray[Idx][i]) <= Distance) then
        Exit(True);

end;


// Returns the closest tile to the player
// If the Distance is the same for more than one, a random one will be returned
function TRSWalker.GetClosestTile(Tiles: TPointArray): TPoint;
var
  Tile: TPoint;
  ClosestDistances: TIntegerArray;
  Distances: TExtendedArray;
begin
  if Tiles = [] then
    Exit
  else if Length(Tiles) = 1 then
    Exit(Tiles[0]);

  for Tile in Tiles do
    Distances += Self.GetMyPos.DistanceTo(Tile);

   ClosestDistances := Distances.FindAll(Distances.Min());

  Result := Tiles[ClosestDistances[Random(0, High(ClosestDistances))]];
end;

function TRSWalker.GetClosestTile(TilesArray: T2DPointArray): TPoint; overload;
var
  Tiles, ClosesTiles: TPointArray;
begin
  if TilesArray = [] then
    Exit;

  for Tiles in TilesArray do
    ClosesTiles += Self.GetClosestTile(Tiles);

  Result := Self.GetClosestTile(ClosesTiles);
end;


function TRSWalker.WebWalk(Destination: TPointArray; WaitUntilDistance: Int32 = 0; PathRandomness: Extended = 0): Boolean; overload;
var
  P: TPoint;
begin
  Result := Self.WebWalk(Self.GetClosestTile(Destination), WaitUntilDistance, PathRandomness);
    if SRL.Dice(35) then
      begin
        repeat
            P := SRL.RandomPoint(Mouse.Position(), 150);
        until P.DistanceTo(Mouse.Position) > 50; // Make sure we move at least 50 pixels
          ASyncMouse.Move(P);
      end;
end;


// Returns all the an array of tiles that have the closest distance to the player
function TRSWalker.GetClosestTileCluster(TilesArray: T2DPointArray): TPointArray;
var
  Tiles: TPointArray;
begin
  if TilesArray = [] then
    Exit;

  for Tiles in TilesArray do
    Result += Self.GetClosestTile(Tiles);
end;

// Checks if the tile is currently visible
function TRSWalker.TileVisible(Tile: TPoint): Boolean; overload;
begin
  Result := MainScreen.IsVisible(Self.GetTileMS(Tile));
end;

function TRSWalker.TileVisible(Tiles: TPointArray): Boolean; overload;
var
  Tile: TPoint := Self.GetClosestTile(Tiles);
begin
  Result := Self.TileVisible(Tile);
end;

// Checks if we can make the tile visible by zooming out
function TRSWalker.TileWithinZoom(Tile: TPoint): Boolean;
begin
  Result := Minimap.PointInZoomRadius(Self.WorldToMM(Tile));
end;

function TRSWalker.TileWithinZoom(Tiles: TPointArray): Boolean; overload;
var
  Tile: TPoint := Self.GetClosestTile(Tiles);
begin
  Result := Self.TileWithinZoom(Tile);
end;



function TRSWalker.FacingTile(Tile: TPoint; Randomness: Int32 = 20): Boolean;
var
  Angle: Double;
begin
  Angle := MainScreen.PointToMM(Self.GetTileMS(Tile).Mean).ToPoint.AngleBetween(Minimap.Center);
  Result := (Angle <= (0 + Randomness)) or (Angle >= (360 - Randomness));
end;

// Attempts to rotate the screen in order to make Tile visible.
function TRSWalker.FaceTile(Tile: TPoint): Boolean;
begin
  if not Self.TileWithinZoom(Tile) then
    Exit;

  if not Self.FacingTile(Tile, 10) then
  begin
    MainScreen.FacePoint(Self.GetTileMS(Tile).Mean, 10);
    Result := Self.FacingTile(Tile, 10);
  end;
end;

function TRSWalker.FaceTile(Tiles: TPointArray): Boolean; overload;
var
  Tile: TPoint := Self.GetClosestTile(Tiles);
begin
  Result := Self.FaceTile(Tile);
end;

// Attempts to zoom out enough so Tile is visible.
function TRSWalker.ZoomToTile(Tile: TPoint): Boolean;
var
  ZoomLevel: Int32;
  MaxZoomLevel: Int32;
begin
  if Self.TileWithinZoom(Tile) then
    Exit(True);

  ZoomLevel := Minimap.ZoomToPoint(Self.WorldToMM(Tile));

  if Antiban.MaxZoom > 0 then MaxZoomLevel := Antiban.MaxZoom
  else MaxZoomLevel := 100;

  if (ZoomLevel >= Antiban.MinZoom) and (ZoomLevel <= MaxZoomLevel) then
    Options.SetZoomLevel(ZoomLevel);

  Result := Self.TileWithinZoom(Tile);
end;

function TRSWalker.ZoomToTile(Tiles: TPointArray): Boolean; overload;
var
  Tile: TPoint := Self.GetClosestTile(Tiles);
begin
  Result := Self.ZoomToTile(Tile);
end;


function TRSWalker.MakeTileVisible(Tile: TPoint): Boolean;
begin
  Result := Self.TileVisible(Tile) or ZoomToTile(Tile) or
            (Self.FaceTile(Tile) and Self.TileVisible(Tile));
end;

function TRSWalker.MakeTileVisible(Tiles: TPointArray): Boolean; overload;
var
  Tile: TPoint := Self.GetClosestTile(Tiles);
begin
  Result := MakeTileVisible(Tile);
end;


function TRSWalker.UntilTileVisible(Tile: TPoint; Interval, WaitTime: UInt32 = 0): Boolean;
begin
  Result := WaitUntil(Self.TileVisible(Tile), Interval, WaitTime);
end;

function TRSWalker.UntilTileVisible(Tiles: TPointArray; Interval, WaitTime: UInt32 = 0): Boolean; overload;
begin
  Result := WaitUntil(Self.TileVisible(Tiles), Interval, WaitTime);
end;



//Gives you a square with Distance number of tiles from the specified Tile
function TRSWalker.GetArea(Tile: TPoint; Distance: Int32): TPointArray;
var
  Idx1, Idx2: Int32;
  TPA: TPointArray;
begin
  for Idx1 := 0 to Distance do
    for Idx2 := 0 to Distance do
    begin
      TPA += [(Tile.X - (4 * Idx1)), (Tile.Y - (4 * Idx2))];
      TPA += [(Tile.X + (4 * Idx1)), (Tile.Y + (4 * Idx2))];
    end;

  for Idx1 := 0 to Distance do
    for Idx2 := 0 to Distance do
    begin
      TPA += [(Tile.X + (4 * Idx1)), (Tile.Y - (4 * Idx2))];
      TPA += [(Tile.X - (4 * Idx1)), (Tile.Y + (4 * Idx2))];
    end;

  TPA.ClearDuplicates;

  Result := TPA;
end;

//Same as above for multiple tiles.
function TRSWalker.GetArea(Tiles: TPointArray; Distance: Int32): T2DPointArray; overload;
var
  Tile: TPoint;
  Idx1, Idx2: Int32;
  TPA: TPointArray;
begin
  for Tile in Tiles do
  begin
    for Idx1 := 0 to Distance do
      for Idx2 := 0 to Distance do
      begin
        TPA += [(Tile.X - (4 * Idx1)), (Tile.Y - (4 * Idx2))];
        TPA += [(Tile.X + (4 * Idx1)), (Tile.Y + (4 * Idx2))];
      end;

    for Idx1 := 0 to Distance do
      for Idx2 := 0 to Distance do
      begin
        TPA += [(Tile.X + (4 * Idx1)), (Tile.Y - (4 * Idx2))];
        TPA += [(Tile.X - (4 * Idx1)), (Tile.Y + (4 * Idx2))];
      end;

    TPA.ClearDuplicates;
    Result += TPA;
  end;
end;

//Gives you an horizontal or vertical line of tiles with the specified Distance.
function TRSWalker.GetLine(Tile: TPoint; Distance: Int32; YAxis: Boolean): TPointArray;
var
  i: Int32;
  TPA: TPointArray;
begin

  for i := 0 to Distance do
  begin
    if YAxis then
    begin
      TPA += [Tile.X, (Tile.Y - (4 * i))];
      TPA += [Tile.X, (Tile.Y + (4 * i))];
    end
    else
    begin
      TPA += [(Tile.X - (4 * i)), Tile.Y];
      TPA += [(Tile.X + (4 * i)), Tile.Y];
    end
  end;

  TPA.ClearDuplicates;

  Result := TPA;
end;



function TRSWalker.WorldToMM(PlayerPoint: TPoint; WorldPoints: TPointArray; Radians: Double): TPointArray; overload;
var
  WorldPoint: TPoint;
begin
  for WorldPoint in WorldPoints do
    Result += Self.WorldToMM(PlayerPoint, WorldPoint, Radians);
end;

function TRSWalker.WorldToMM(WorldPoints: TPointArray): TPointArray; overload;
begin
  Result := Self.WorldToMM(Self.GetMyPos(), WorldPoints, Minimap.GetCompassAngle(False));
end;


//overriden to prevent running out memory due to the points being too far
function TRSWalker.GetTileMSEx(Me, Loc: TPoint; Height: Double = 0; Offx, Offy: Double = 0): TRectangle; override;
var
  angle: Double;
begin
  Loc   := Minimap.Center + (Loc - Me);
  if not Minimap.IsPointOn(Loc) then
    Exit;
  angle := Minimap.GetCompassAngle(False);
  Loc   := Loc.Rotate(angle, Minimap.Center);
  Result := Minimap.VecToMSRect(Vec3(Loc.x - offx, Loc.y - offy, Height), angle);
end;


function TRSWalker.GetTilePoly(Me, Loc: TPoint; Height: Double = 0; Offx, Offy: Double = 0): TPoly;
var
  Rect: TRectangle;
begin
  if Height = 0 then
    Result := Self.GetTileMSEx(Me, Loc, 0, Offx, Offy).ToTPA
  else
  begin
    Rect := Self.GetTileMSEx(Me, Loc, 0, Offx, Offy);
    Result := Rect.GetPoly(Self.GetTileMSEx(Me, Loc, Height, Offx, Offy));
  end;
end;

function TRSWalker.GetTilePoly(Loc: TPoint; Height: Double = 0): TPoly; overload;
begin
  Result := Self.GetTilePoly(Self.GetMyPos, Loc, Height);
end;


function TRSWalker.GetTileArrayMS(Me: TPoint; LocArray: TPointArray; Height: Double = 0; Offx, Offy: Double = 0): TRectArray;
var
  Loc: TPoint;
begin
  for Loc in LocArray.Sorted(Me) do
    Result += Self.GetTileMSEx(Me, Loc, Height, Offx, Offy);
end;

function TRSWalker.GetTileArrayMS(LocArray: TPointArray; Height: Double = 0): TRectArray; overload;
begin
  Result := Self.GetTileArrayMS(Self.GetMyPos, LocArray, Height);
end;


function TRSWalker.GetTileArrayPolys(Me: TPoint; LocArray: TPointArray; Height: Double = 0; Offx, Offy: Double = 0): TPolyArray;
var
  Loc: TPoint;
begin
  for Loc in LocArray do
    Result += Self.GetTilePoly(Me, Loc, Height, Offx, Offy);
end;

function TRSWalker.GetTileArrayPolys(LocArray: TPointArray; Height: Double = 0): TPolyArray; overload;
begin
    Result := Self.GetTileArrayPolys(Self.GetMyPos, LocArray, Height);
end;



//Might remove everything below this line at some point. Don't really like how I did this.
procedure TRSWalker.ActionWaitMoving(Action: ERSAction; Destination: TPoint; WaitUntilDistance: Int32);
var
  Timeout, Countdown: TCountDown;
  Position: record
    Current, Previous: TPoint;
  end;
begin
  Timeout.Init(Round(SRL.TruncatedGauss(20000, 25000)));

  Countdown.Init(Round(SRL.TruncatedGauss(500, 1500)));
  Countdown.Timeout := GetTickCount() + Round(SRL.TruncatedGauss(2500, 3500));

  Position.Previous := Self.GetMyPos();
  Position.Current := Position.Previous;

  // Break from the loop if:
  // - Haven't moved in 500ms
  // - Been walking for over 20 seconds
  // - Within `WaitUntilDistance` to the destination
  repeat
    Self.CheckRunEnergy();

    RSAction.DoAction(Action);

    Position.Previous := Position.Current;
    Position.Current := Self.GetMyPos();
    if Position.Current <> Position.Previous then
      Countdown.Restart();

    Wait(100);
  until Timeout.IsFinished() or Countdown.IsFinished() or (Position.Current.DistanceTo(Destination) <= WaitUntilDistance);
end;

function TRSWalker.ActionWalkFinalStep(Action: ERSAction; PlayerPoint, WorldPoint: TPoint; WaitUntilDistance: Int32): Boolean;
var
  MinimapPoint: TPoint;
begin
  if (@Self.OnWalkEvent <> nil) then
    Self.OnWalkEvent(@Self, PlayerPoint, WorldPoint);
  if (@Self.OnWalkEventEx <> nil) then
    Self.OnWalkEventEx(@Self, PlayerPoint, WorldPoint);

  if not Self.Enabled then
    Exit(True);

  MinimapPoint := Self.WorldToMM(PlayerPoint, WorldPoint, Minimap.GetCompassAngle(False));
  if (not Minimap.IsPointOn(MinimapPoint)) then
    Exit(False);
  if (Minimap.Center.DistanceTo(MinimapPoint) < 5) then
    Exit(True);

  Result := Self.Click(MinimapPoint, 0);
  if Result then
  begin
    if SRL.Dice(90) then
      Self.ActionWaitMoving(Action, WorldPoint, WaitUntilDistance)
    else
      Self.WaitMoving(WorldPoint, WaitUntilDistance);
  end;
end;

function TRSWalker.ActionWalkStep(Action: ERSAction; PlayerPoint, WorldPoint: TPoint): Boolean;
var
  MinimapPoint: TPoint;
  WaitUntilDistance: Int32;
begin
  if (@Self.OnWalkEvent <> nil) then
    Self.OnWalkEvent(@Self, PlayerPoint, WorldPoint);
  if (@Self.OnWalkEventEx <> nil) then
    Self.OnWalkEventEx(@Self, PlayerPoint, WorldPoint);

  if not Self.Enabled then
    Exit(True);

  MinimapPoint := Self.WorldToMM(PlayerPoint, WorldPoint, Minimap.GetCompassAngle(False));
  if (not Minimap.IsPointOn(MinimapPoint)) then
    Exit(False);
  if (Minimap.Center.DistanceTo(MinimapPoint) < 5) then
    Exit(True);

  Result := Self.Click(MinimapPoint, Self.ClickRandomness);

  if Result then
  begin
    if SRL.Dice(90) then
      RSAction.DoAction(Action);

    if (Random() < 0.15) then // 15% chance of randomness else mean
      WaitUntilDistance := Random(Distance(Minimap.Center, MinimapPoint))
    else
      WaitUntilDistance := SRL.NormalRange(0, Distance(Minimap.Center, MinimapPoint) + 10);

    if SRL.Dice(90) then
      Self.ActionWaitMoving(Action, WorldPoint, WaitUntilDistance)
    else
      Self.WaitMoving(WorldPoint, WaitUntilDistance);
  end;
end;

function TRSWalker.ActionWalkPath(Action: ERSAction; Path: TPointArray; WaitUntilDistance: Int32 = 0): Boolean;

  function BuildPath(TPA: TPointArray): TPointArray;
  var
    I, J: Int32;
    Line: TPointArray;
  begin
    for I := 1 to High(TPA) do
    begin
      Line := TPAFromLine(TPA[I-1], TPA[I]);

      J := 0;
      while J < High(Line) do
      begin
        Result += Line[J];

        Inc(J, Random(5, 15));
      end;
    end;

    Result += TPA[High(TPA)];
  end;

  function AdvancePath(var Index: Int32; PlayerPoint: TPoint): Boolean;
  var
    Angle: Double := Minimap.GetCompassAngle(False);
    Previous: Int32 := Index;
    Nearest, Furthest: Int32;
  begin
    Nearest := Self.Path.Find(Self.Path.Sorted(PlayerPoint)[0]);

    for Nearest := Nearest to High(Self.Path) do
      if Self.IsWalkable(Self.Path[Nearest], PlayerPoint, Angle) then
        Break;

    for Furthest := Nearest to High(Self.Path) do
      if not Self.IsWalkable(Self.Path[Furthest], PlayerPoint, Angle) then
        Break;

    // 15% chance of randomness else furthest
    Index := Furthest - 1;
    if Random() < 0.15 then
      Index := Random(Nearest, Furthest);

    Result := Index > Previous;
  end;

var
  PlayerPoint: TPoint;
  Index, Fails: Int32;
begin
  Self.Enabled := True;
  Self.Path := BuildPath([Self.GetMyPos()] + Path);

  while Self.Enabled and (Fails < 10) do
  begin
    PlayerPoint := Self.GetMyPos();

    if AdvancePath(Index, PlayerPoint) then
      Fails := 0
    else
    begin
      Inc(Fails);

      // Likely haven't moved far enough to advance to next point
      if (Fails < 5) then
      begin
        Wait(300);

        Continue;
      end;

      if (Fails mod 2 = 0) then
        Minimap.WaitFlag();
    end;

    if Index = High(Self.Path) then
    begin
      if Self.ActionWalkFinalStep(Action, PlayerPoint, Self.Path[Index], WaitUntilDistance) then
        Exit(True);
    end
    else if Index > High(Self.Path) then
      Exit
    else
      Self.ActionWalkStep(Action, PlayerPoint, Self.Path[Index]);
  end;

  RSAction.ClearVariables;

  if Fails = 10 then
    Self.DebugLn('Failed to advance path');
end;

function TRSWalker.ActionWebWalk(Action: ERSAction; Destination: TPoint; WaitUntilDistance: Int32 = 0; PathRandomness: Extended = 0): Boolean;
var
  Path: TPointArray;
begin
  if not InRange(PathRandomness, 0, 1) then
    Self.Fatal('TRSWalker.WebWalk `PathRandomness` must be within 0..1');

  Path   := Self.WebGraph.PathBetween(Self.GetMyPos, Destination, PathRandomness);
  Result := Self.ActionWalkPath(Action, Path, WaitUntilDistance);
end;


procedure TRSWalker.DebugTiles(Tiles: TPointArray);
var
  Bitmap: TMufasaBitmap;
  Tile: TPoint;
  ATPA: T2DPointArray;
  Rect: TRectangle;
  Rectangles: Array of TRectangle;
begin
  Bitmap.FromClient(MainScreen.Bounds);

  for Tile in Tiles do
    Rectangles += Self.GetTileMS(Tile);

  for Rect in Rectangles do
    ATPA += Rect.ToTPA.Connect;

  Bitmap.DrawATPA(ATPA);
  ShowBitmap(Bitmap);
  Bitmap.Free;
end;
