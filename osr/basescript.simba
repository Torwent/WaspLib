(*
BaseScript
==========
BaseScript and it's derivants are template records to be used in scripts.
They also contain template functions and procedures that can be used as is or overriden with
"inherited" to add functionality.
*)

{$DEFINE WL_BASESCRIPT_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

{$IFNDEF SCRIPT_ID}{$DEFINE SCRIPT_ID := ''}{$ENDIF}
{$IFNDEF SCRIPT_REVISION}{$DEFINE SCRIPT_REVISION := '1'}{$ENDIF}

(*
const WELCOME_SENTENCES
~~~~~~~~~~~~~~~~~~~~~~~
  Global WELCOME_SENTENCES constant used to store advertising senteces to display in the progress report.
*)
const
  WELCOME_SENTENCES: TStringArray = [
    'Join WaspScripts today!',
    'Road to max cape with',
    'No time to play legit?',
    'What are you waiting for?',
    'The best public color bots',
    'Learn how to make scripts at',
    'Get that 99 with',
    'Daily bans are not normal,',
    'Everything is open source',
    'Imagine AHK on steroids',
    'Unleash the power of Simba'
  ];

(*
type TBaseScript
~~~~~~~~~~~~~~~~
Record that holds common variables for most basic scripts.
The variables that are part of **TBaseScript** are the following:
 - **Name**: String that holds the script name to be displayed in the log and on screen progress report.
 - **Version**: String that holds the script version to be displayed in the log and on screen progress report.
 - **Self.IsSetup**: Boolean that let us know if the our **TBaseScript** already set it's variables up.
 - **TimeRunning**: TStopwatch variable that holds how long our **TBaseScript** has been running.
 - **Action**: String variable used to print in Simba output or on screen progress report the current action the script is performing.
 - **PreviousAction**: String variable used to register the previous action. This is used to avoid spamming the logs.
 - **ExtraInfo**: String variable we can use to print extra information in Simba output or in on screen progress report. E.G. current state of variables.
 - **ActionProfit**: Integer that holds information on how much profit (positive or negative) our script makes per action performed.
 - **TotalActions**: Integer used to count how many actions our script has done.
 - **TotalProfit**:  Integer that holds the total profit our script has done.
 - **TimeLimit**: Integer variable to set a time limit for our script in milliseconds before ending the current script.
 - **ActionLimit**: Integer variable to set total action limit before ending the script.

TBaseScript can be used as is or inherited from to extend it's functionality.

Example
-------
  TBaseWalkerScript = record(TBaseScript)
    RSW: TRSWalker;
  end;
*)
type
  TBaseScript = record(TSRLBaseRecord)
    ID,
    Revision,

    Welcome: String;

    TimeRunning: TStopwatch;
    ReportTimer: TTimer;

    Action: String;
    PreviousAction: String;

    ExtraInfo: String;

    ActionProfit: Int32;
    TotalActions: Int32;
    TotalProfit: Int32;

    TimeLimit: Int64;
    ActionLimit: Int32;

    OnAntiban: Boolean;
    IsSetup: Boolean;
  end;

(*
BaseScript.ShouldHandlePaint
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TBaseScript.ShouldHandlePaint(): Boolean;

Wrapper function used internally to decide if we should handle TWaspProgressReport.
*)
function TBaseScript.ShouldHandlePaint(): Boolean;
begin
  Result := WLSettings.RemoteInput.Enabled and WLSettings.RemoteInput.HUDReport and not WLSettings.RemoteInput.HUDDebug;
end;

(*
BaseScript.ShouldDrawPaint
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TBaseScript.ShouldDrawPaint(): Boolean;

Wrapper function used internally to decide if we should call TWaspProgressReport.Update().
To avoid unnecessary redraw, when Self.Action and Self.PreviousAction are the same, we do not redraw.
*)
function TBaseScript.ShouldDrawPaint(): Boolean;
begin
  if Self.ShouldHandlePaint() then
    Result := not ProgressReport.IsSetup or (Self.Action <> Self.PreviousAction);
end;

(*
BaseScript.BuildTextReport
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TBaseScript.BuildTextReport(): TStringArray;

Internal method used to build our text progress report.
To set custom messages simply override this method and pass in each line of you report into the Result array.
Keep in mind that editing this will probably mess up the HUD report so if you customize this you should also customize **TBaseScript.BuildHUDReport()**.

Example
-------

  function TBaseScript.BuildTextReport(): TStringArray; override;
  var
    ElapsedTime: UInt64;
    XPEarned: Int32;
  begin
    ElapsedTime := Self.TimeRunning.ElapsedTime();
    XPEarned := WL.PreviousXP - WL.InitialXP;

    //Keep in mind this is just a quick example without spacing adjustments. This won't look good unless you add some variable padding.

    Result += '[===============================]';
    Result += '[ ' + Self.Name + ' ]';                    //Self.Name is the script name, usually set in TBaseScript.Init();
    Result += '[===============================]';
    Result += '[ Runtime    :  ' + SRL.MsToTime(ElapsedTime, Time_Short) +' ];
    Result += '[ Xp gained  : ' + XPEarned + '(' + ToStr(NumberPerHour(XPEarned, ElapsedTime)) + ' / hr)     ]';
    Result += '[ Nuggets    : ' + NuggetsCount + '(' + ToStr(NumberPerHour(NuggetsCount, ElapsedTime)) + ' / hr)     ]';
    Result += '[ Coal       : ' + CoalCount + '(' + ToStr(NumberPerHour(CoalCount, ElapsedTime)) + ' / hr)     ]';
    Result += '[ Gold       : ' + GoldCount + '(' + ToStr(NumberPerHour(GoldCount, ElapsedTime)) + ' / hr)     ]';
    Result += '[ Mithril    : ' + MithrilCount + '(' + ToStr(NumberPerHour(MithrilCount, ElapsedTime)) + ' / hr)     ]';
    Result += '[ Adamantite : ' + AdamantiteCount + '(' + ToStr(NumberPerHour(AdamantiteCount, ElapsedTime)) + ' / hr)     ]';
    Result += '[ Runite     : ' + RuniteCount + '(' + ToStr(NumberPerHour(RuniteCount, ElapsedTime)) + ' / hr)     ]';
    Result += '[===============================]';
    Result += '[ ' + Self.Name + SRL.MsToTime(ShutdownTimer.TimeRemaining, Time_Short) + ' ]';
    Result += '[===============================]';
  end;
*)
function TBaseScript.BuildTextReport(): TStringArray;
var
  elapsedTime: UInt64;
begin
  if Self.Action = Self.PreviousAction then
      Exit;

  Self.DebugLn(Self.Action, Self.ExtraInfo);  //add action and extra info the the log.
  elapsedTime := Self.TimeRunning.ElapsedTime();

  Result += ' Action        : ' + Self.Action;

  Result += ' Runtime       : ' + SRL.MsToTime(elapsedTime, Time_Short).Trim();

  Result += ' Total Actions : ' + ToStr(Self.TotalActions);
  if Self.ActionLimit > -1 then
    Result[High(Result)] += '/' + ToStr(Self.ActionLimit);

  Result += ' Actions/Hour  : ' + ToStr(NumberPerHour(Self.TotalActions, elapsedTime));

  Result += ' Total Exp     : ' + SRL.FormatNumber(WL.XP.Previous - WL.XP.Start, 2);
  Result += ' Exp/Hour      : ' + SRL.FormatNumber(NumberPerHour(WL.XP.Previous - WL.XP.Start, elapsedTime), 2);

  Result += ' Total Profit  : ' + SRL.FormatNumber(Self.TotalProfit, 2);
  Result += ' Profit/Hour   : ' + SRL.FormatNumber(NumberPerHour(Self.TotalProfit, elapsedTime), 2);

  Result += ' ' + Self.Welcome + ' waspscripts.com';
end;

(*
BaseScript.BuildHUDReport
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TBaseScript.BuildHUDReport(): TStringArray;

Internal method used for custom HUD reports.
To set custom messages simply override this method and pass in each line of you report into the Result array.
Overriding **TBaseScript.BuildTextReport()** to set a custom report will likely need you to override this as well.
*)
function TBaseScript.BuildHUDReport(): TStringArray;
begin
  Result := [];
end;

(*
BaseScript.PrintReport
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TBaseScript.PrintReport(Sender: TObject);

Internal method to print our progress report ("proggie").
This is run on a timer setup by TBaseScript and also handles drawing the HUD progress report if it is enabled.
It also is responsible for debugging the script with SRL.Debug() if we enable it.
*)
procedure TBaseScript.PrintReport();
var
  i: Int32;
  str: String;
{$IFNDEF SRL_DISABLE_REMOTEINPUT}
  tmpArr: TStringArray;
{$ENDIF}
begin
  if not APIClient.IsSetup or APIClient.Timer.IsFinished() then
    APIClient.SubmitStats(APIClient.GetUUID());

  ProgressReport.ProgressArray := Self.BuildTextReport();

  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  if not Self.OnAntiban then
  begin
    if WLSettings.RemoteInput.HUDDebug then
      SRL.Debug(RSClient.Image())
    else if Self.ShouldDrawPaint() then
    begin
      tmpArr := Self.BuildHUDReport();

      if tmpArr <> [] then
        ProgressReport.Update(tmpArr)
      else
        ProgressReport.Update(ProgressReport.ProgressArray);
    end;
  end;
  {$ENDIF}

  if WLSettings.TextReport and (ProgressReport.ProgressArray <> []) then
  begin
    WriteLn();
    WriteLn(' ', PadL(Self.Name + ' Rev. ' + Self.Revision, 40, ' '));
  end;

  if WLSettings.TextReport and not Self.OnAntiban then
    for i := 0 to High(ProgressReport.ProgressArray) do
    begin
      str := ProgressReport.ProgressArray[i];

      if i < High(ProgressReport.ProgressArray) -1 then
        str := PadR(str, 40, ' ') + ProgressReport.ProgressArray[i+1];

      WriteLn str;
      i += 1;
    end;

  Self.PreviousAction := Self.Action;
end;

(*
CheckUpdates
~~~~~~~~~~~~
.. pascal:: procedure CheckUpdates(caption: String = 'Updates Available');

Checks for updates for SRL-T, WaspLib and the current script.
*)
procedure CheckUpdates(caption: String = 'Updates Available');
var
  latestSRLT, latestWL, latestRev, currentSRLT, currentWL, currentRev: String;
  isLatestSRLT, isLatestWL, isLatestRev: Boolean;
  msg: String;
begin
  APIClient.GetAllVersions({$macro SCRIPT_ID}, latestRev, latestSRLT, latestWL);

  if latestSRLT = '' then
    latestSRLT := 'Failed to check...';

  if latestWL = '' then
    latestWL := 'Failed to check...';

  if latestRev = '' then
    latestRev := 'Failed to check...';

  currentSRLT := GetPackageVersion('srl-t');
  currentWL := GetPackageVersion('wasplib');
  currentRev := {$macro SCRIPT_REVISION};

  isLatestSRLT := currentSRLT = latestSRLT;
  isLatestWL   := currentWL   = latestWL;
  isLatestRev  := currentRev  = latestRev;

  if isLatestSRLT and isLatestWL and isLatestRev then
    Exit;

  msg := LINEENDING + 'The following seems to be outdated:' + LINEENDING + LINEENDING;

  if not isLatestSRLT then
    msg += '- SRL-T (Current version: ' + currentSRLT + ' Latest version: ' + latestSRLT + ').' + LINEENDING;

  if not isLatestWL then
    msg += '- WaspLib (Current version: ' + currentWL + ' Latest version: ' + latestWL + ').' + LINEENDING;

  if not isLatestRev then
    msg += '- Script (Current revision: ' + currentRev + ' Latest revision: ' + latestRev + ').' + LINEENDING;

  msg += LINEENDING;

  MessageDlg(caption, msg, mtWarning,[mbClose]);
end;

(*
BaseScript.Init
~~~~~~~~~~~~~~~
.. pascal:: procedure TBaseScript.Init(MaxActions: Int32; MaxTime: Int64);

Method used to setup the variables of TBaseScript.
If **MaxActions** and/or **MaxTime** -1 that will make
`TBaseScript.ShouldStop() = True` when `TBaseScript.TotalActions = MaxAtions` or
`TBaseScript.TimeRunning.ElapsedTime = MaxTime`.

Can be used as is or overriden to do additional tasks.

Example
-------

  var Script: TBaseScript;

  begin
    Script.Init(-1, 2 * ONE_DAY);
  end;
*)
procedure TBaseScript.Init(maxActions: Int32; maxTime: Int64);
begin
  {$IFNDEF SCRIPT_CHAINER}
  ClearDebug();
  {$ENDIF}
  Self.Name := ScriptName.Before('.simba').Replace('_', ' ').Capitalize();

  AddOnTerminate(@ForceSaveScreenshot);

  if Login.Players = [] then
    Login.AddPlayer(ToStr(Random()),''); //make a random username for a random biohash if no users were added.

  //TotalConsumableCost := 0;
  Self.DisableDebugging := True;
  Self.ID := {$macro SCRIPT_ID};
  Self.Revision := {$macro SCRIPT_REVISION};

  {$IFNDEF FORMS_V2}
  CheckUpdates(Self.Name);
  {$ENDIF}

  GenerateLog(Self.Name);
  WriteFileContents(WL.LogFile, Self.Name + ' revision ' + Self.Revision + LineEnding, True);

  Self.Welcome := WELCOME_SENTENCES.RandomValue();

  Self.ActionLimit := -1;
  if maxActions > -1 then
    Self.ActionLimit := Self.TotalActions + maxActions;

  Self.TimeRunning.Start();
  ProgressReport.PTimeRunning := @Self.TimeRunning;

  if maxTime > -1 then
    Self.TimeLimit := Self.TimeRunning.ElapsedTime + maxTime
  else
    Self.TimeLimit := -1;

  WL.Activity.Init(260000);

  if Self.IsSetup then
    Exit;

  Self.IsSetup := True;
  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  if WLSettings.RemoteInput.Enabled then
  begin
    {$IFDEF SCRIPT_GUI}
    RSClient.RemoteInput.Setup();
    {$ENDIF}
    if WLSettings.RemoteInput.HUDReport then
      ProgressReport.Setup();
  end;
  {$ENDIF}

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  Antiban.Setup();

  //wasp-stats
  if not APIClient.Disabled then
    APIClient.Disabled := not WLSettings.Stats;
  StatsPayload.Setup(Self.ID);
  APIClient.TimeStamp := GetTickCount();
  //override me to add more stuff.
end;



procedure TBaseScript.SetAction(Action: String);
begin
  Self.Action := Action;
  Self.PrintReport();
end;

(*
BaseScript.DoAntiban
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TBaseScript.DoAntiban(checkBreaks: Boolean = True; checkSleeps: Boolean = True): Boolean;

Method used to call Antiban.DoAntiban(checkBreaks, checkSleeps).

Example
-------

  Script.DoAntiban();
*)
function TBaseScript.DoAntiban(checkBreaks: Boolean = True; checkSleeps: Boolean = True): Boolean;
var
  timeCache: UInt64;
begin
  Antiban.DismissRandom();
  Self.TimeRunning.Pause();
  WL.Activity.Pause();
  APIClient.Timer.Pause();
  timeCache := GetTickCount();
  Self.OnAntiban := True;

  checkBreaks := checkBreaks and WLSettings.Breaks;
  checkSleeps := checkSleeps and WLSettings.Sleep.Enabled;

  try
    if WLSettings.Antiban.Enabled or checkBreaks or checkSleeps then
      Result := Antiban.DoAntiban(checkBreaks, checkSleeps);
  except
    WriteLn(GetExceptionMessage());
  end;

  Self.TimeRunning.Resume();
  WL.Activity.Resume();
  APIClient.Timer.Resume();
  timeCache := GetTickCount() - timeCache;
  APIClient.TimeStamp += timeCache;
  Self.OnAntiban := False;

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();
end;

(*
BaseScript.ShouldStop
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TBaseScript.ShouldStop(): Boolean;

Method used to check if we reached the TBaseScript goals and it's time to stop it.

.. note:: This doesn't stop the script. This simply returns true/false when called and it's up to you to stop the script.

Example
-------

  if Script.ShouldStop() then
    TerminateScript();
*)
function TBaseScript.ShouldStop(): Boolean;
begin
  Result := ((Self.ActionLimit > -1) and (Self.TotalActions >= Self.ActionLimit)) or
            ((Self.TimeLimit > -1) and (Self.TimeRunning.ElapsedTime >= Self.TimeLimit));

  if Result then
    SaveScreenshot('ScriptEnding/shouldstop' + Self.Name, True);
end;


(*
type TBaseWalkerScript
~~~~~~~~~~~~~~~~~~~~~~
Record that holds common variables for most scripts that use walker.
This record extends **TBaseScript** and has all of it's variables too.
The extra variables that are part of **TBaseWalkerScript** are:
 - **RSW**: TRSWalker variable that holds our walker, for more information check the following page: https://ollydev.github.io/SRL-Development/walker.html?highlight=walker
*)
type
  TBaseWalkerScript = record(TBaseScript)
    RSW: TRSWalker;
  end;

(*
BaseWalkerScript.Init
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TBaseWalkerScript.Init(MaxActions: Int32; MaxTime: Int64); override;

Method used to setup the variables of TBaseScript.
If **MaxActions** and **MaxTime** serve the same purpose of TBaseScript.Init().

Can be used as is or overriden to do additional tasks.
*)
procedure TBaseWalkerScript.Init(maxActions: Int32; maxTime: Int64); override;
begin
  inherited;

  Self.RSW.OnWalkingEvent := @WalkerTasks;
end;

(*
type TBaseBankScript
~~~~~~~~~~~~~~~~~~~~
Record that holds common variables for most scripts that use a bank.
This record inherits from **TBaseWalkerScript** and which inherits from **TBaseScript's**.
The extra variables that are part of **TBaseBankScript** are:
 - **Self.ScriptBank**: PRSObject pointer that points to our current bank TRSObject, for more info check: https://torwent.github.io/WaspLib/waspobject.html#type-trsobject
 - **Self.ScriptBanker**: PRSNPC pointer that points to our current banker TRSNPC, for more info check: https://torwent.github.io/WaspLib/waspobject.html#type-trsmmdot
 - **BankTab**: Integer variable used to cache the current bank tab that contains items for our script.
 - **ItemLeftAmount**: Integer variable used to cache items left to make/build/whatever to pre-hover the bank.
 - **HoveringBank**: Boolean variable that holds information if we are currently already hovering the bank. This is so we don't try to rehover the bank and don't need to check the uptext if we already are doing it.
 - **BankEmpty**: Boolean variable that that is set to true when we ran out of an item our script needs. This is used so next time we need to fetch the item we check the deposit box instead.
 - **CollectEmpty**: Boolean variable that that is set to true when the collect box is empty. Normally, if this and **BankEmpty** are true the script ends.
 - **CollectTimer**: TCountDown variable used to reset **CollectEmpty** after a couple of minutes.
*)
type
  TBaseBankScript = record(TBaseWalkerScript)
    BankTab: Int32;

    ItemLeftAmount: Int32;
    HoveringBank: Boolean;
    BankEmpty: Boolean;       //Used to cache if Bank doesn't have more of a certain item.
    CollectEmpty: Boolean;    //Used to cache if CollectBox doesn't have more of a certain item.
    CollectTimer: TCountDown; //Used to reset CollectEmpty after a while.
  end;

(*
BaseBankScript.Init
~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TBaseBankScript.Init(MaxActions: Int32; MaxTime: Int64); override;

Method used to setup the variables of TBaseScript.
If **MaxActions** and **MaxTime** serve the same purpose of TBaseScript.Init().

Can be used as is or overriden to do additional tasks.
*)
procedure TBaseBankScript.Init(maxActions: Int32; maxTime: Int64); override;
begin
  inherited;

  Self.BankTab := -1;
  Self.CollectTimer.Init(600000);

  //override me to add more stuff.
end;

(*
BaseBankScript.Terminate
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TBaseBankScript.Terminate(): Boolean;

Helper method to be called at the end of the life cycle of a TBaseBankScript.
By default it simply attempts to open the TBaseBankScript.CurrentBank but it's meant to
be overriden and inherited or completely be remade for proper termination of the TBaseBankScript.

This is likely required if you want to chain several scripts together.

.. note:: Consider taking a look at script_chainer.simba: https://github.com/Torwent/wasp-mini/blob/master/script_chainer.simba

Example
-------

  Script1.Init();
  repeat
    //do stuff...
  until Script1.ShouldStop();

  Script1.Terminate();

  Script2.Init();
  repeat
    //do stuff...
  until Script2.ShouldStop();
*)
function TBaseBankScript.Terminate(): Boolean;
var
  i: Int32;
begin
  for i := 0 to 5 do
  begin
    if MainScreen.HasInterface() then
    begin
      if Result := Bank.IsOpen then Break
      else MainScreen.CloseInterface;
    end;

    if Result := Bank.WalkOpen() then
      Break;
  end;
  //override me to add more stuff.
end;

(*
BaseBankScript.CountItemsLeft
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TBaseBankScript.CountItemsLeft(Item: TRSItem);

Set's TBaseBankScript.ItemLeftAmount to be used by TBaseBankScript.ShouldHover().

.. note:: For some scripts this might need to be overriten and rewritten.
*)
procedure TBaseBankScript.CountItemsLeft(item: TRSItem);
begin
  Self.ItemLeftAmount := Inventory.CountItem(item);
end;

(*
BaseBankScript.ShouldHoverBank
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TBaseBankScript.ShouldHoverBank(): Boolean;

Method used to decide if we should pre-hover the bank or not.
It uses the amount of items left in the inventory stored by TBaseBankScript.CountItemsLeft()
in TBaseBankScript.ItemLeftAmount() along with the player BioHash to decide if we want to
pre-hover the bank.

.. note:: This function simply returns true/false and doesn't actualy hover the bank.

Example
-------

  if Script.ShouldHoverBank() then
    Script.HoverBank();
*)
function TBaseBankScript.ShouldHoverBank(): Boolean;
begin
  Result := ((Self.ItemLeftAmount = 1) and SRL.Dice(10 + (90 * BioHash))) or
            ((Self.ItemLeftAmount = 2) and SRL.Dice(5 + (75 * BioHash))) or
            ((Self.ItemLeftAmount = 3) and SRL.Dice(5 + (60 * BioHash))) or
            ((Self.ItemLeftAmount = 4) and SRL.Dice(45 * BioHash)) or
            ((Self.ItemLeftAmount = 5) and SRL.Dice(30 * BioHash)) or
            ((Self.ItemLeftAmount = 6) and SRL.Dice(10 * BioHash)) or
            SRL.Dice(5 * BioHash);
end;

(*
BaseBankScript.HoverBank
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TBaseBankScript.HoverBank(): Boolean;

Moves the mouse to the closest RSObjects.Banks

Example
-------

  BankScript.HoverBank();
*)
function TBaseBankScript.HoverBank(): Boolean;
begin
  Result := Self.HoveringBank := Bank.Hover();
end;


(*
BaseBankScript.Withdraw
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TBaseBankScript.Withdraw(item: TRSBankWithdrawItem): Boolean;

Withdraws **item** from the bank.

Example
-------
  if Bank.IsOpen() then
    BankScript.Withdraw(['Shark', 1, True]);
*)
function TBaseBankScript.Withdraw(item: TRSBankWithdrawItem): Boolean;
var
  invCount, stackCount: Int32;
  useButton: Boolean;
begin
  if Self.BankTab = -1 then
  begin
    Self.BankTab := Bank.FindItemTab(item.Item);
    Self.BankEmpty := Self.BankTab = -1;

    if Self.BankEmpty then
      Exit;
  end;

  stackCount := Inventory.CountItemStack(item.Item);
  invCount   := Inventory.Count();

  if (invCount = 28) then //maybe no space to withdraw the item.
  begin
    //no space and we don't have the item or the item is not stackable. we can't withdraw.
    if not Inventory.ContainsItem(item.Item) or (stackCount <= 0) then
      Exit;
  end;

  useButton := item.Quantity <> 1; //I'm gonna assume 1 quantity that it's a tool.

  if Bank.WithdrawItem(Self.BankTab, item, useButton) then
    Result := WaitUntil((Inventory.Count() > invCount) or (Inventory.CountItemStack(item.Item) > stackCount), 100, 3000);

  if not Result then
  begin
    Bank.UnHoverIncinerator();
    Self.BankEmpty := not Bank.IsSearchOpen() and
                      not WaitUntil(Bank.ContainsItem(Self.BankTab, item), 300, 3000);

    if Bank.IsSearchOpen() then
      Bank.CloseSearch();
  end;

  Self.BankEmpty := Self.BankEmpty and Bank.IsOpen();

  if Self.BankEmpty then
    SaveScreenshot('bankempty' + DIRECTORYSEPARATOR + 'bankempty', MainScreen.Bounds());

  if Self.CollectEmpty and Self.CollectTimer.IsFinished() then
    Self.CollectEmpty := False;
end;

(*
BaseBankScript.HandleCollectBox
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TBaseBankScript.HandleCollectBox(items: TRSItemArray): Boolean;

Collects **items** from the collectbox.

Example
-------
  if CollectBox.IsOpen() then
    BankScript.HandleCollectBox();
*)
function TBaseBankScript.HandleCollectBox(items: TRSItemArray): Boolean;
begin
  Self.CollectEmpty := True;

  if Result := CollectBox.ContainsAny(items) then
  begin
    Self.CollectEmpty := CollectBox.CollectToBank();
    Self.BankEmpty := not Self.CollectEmpty;
  end;
end;


procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  MM2MS.SetupZoom();
  if (Bitmap = RSClient.Image) then
    Bitmap.Clear();

  inherited(Bitmap);
end;
