(*
Utility types, contants and variables
=====================================

This file contains types, contants and variables that need to be pre-loaded for wasplib to compile.
*)

{$DEFINE WL_UTILTYPES_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

type
(*
type EWLBankLocation
~~~~~~~~~~~~~~~~~~~~

EWLBankLocation is a enumerator that contains all bank locations supported by WaspLib.
*)
  EWLBankLocation = (
    AL_KHARID_BANK,
    ARDOUGNE,
    CASTLE_WARS_BANK,
    CATHERBY_BANK,
    CRAFTING_GUILD_BANK,
    DRAYNOR_VILLAGE_BANK,
    EDGEVILLE_BANK,
    FALADOR_BANK,
    GRAND_EXCHANGE_BANK,
    LUNAR_ISLE_BANK,
    MINING_GUILD_BANK,
    PRIFDDINAS_BANK,
    SEERS_VILLAGE_BANK,
    MOR_UL_REK_BANK,
    VARROCK,
    WINTERTODT_BANK,
    SHILO_VILLAGE_BANK,
    FOSSIL_ISLAND_BANK
  );

function EWLBankLocation.GetString(i: Int32): String; static;
begin
  Result := ToString(EWLBankLocation(i)).ToLower().Replace('_bank', '').Replace('_', ' ');
end;

function EWLBankLocation.GetStrings(): TStringArray; static;
var
  i: Int32;
begin
  for i := 0 to Ord(High(EWLBankLocation)) do
    Result += EWLBankLocation.GetString(i);
end;

function EWLBankLocation.IndexOf(value: String): Int32; static;
var
  i: Int32;
begin
  value := value.ToLower();
  for i := 0 to Ord(High(EWLBankLocation)) do
    if value = EWLBankLocation.GetString(i) then
      Exit(i);

  Result := -1;
end;

function EWLBankLocation.Find(value: String): EWLBankLocation; static;
var
  i: Int32;
begin
  value := value.ToLower().Replace('''','');
  for i := 0 to Ord(High(EWLBankLocation)) do
    if value = EWLBankLocation.GetString(i) then
      Exit(EWLBankLocation(i));
end;

type
(*
type EWLCombatLocation
~~~~~~~~~~~~~~~~~~~~~~

EWLCombatLocation is a enumerator that contains all the combat locations supported by WaspLib.
As in... the locations that have mapped coordinates!
*)
  EWLCombatLocation = (
    ABYSS,
    ASGARNIAN_ICE_DUNGEON,
    CATACOMBS_OF_KOUREND,
    CHASM_OF_FIRE,
    CORSAIR_COVE,
    CORSAIR_COVE_DUNGEON,
    DEATH_PLATEAU,
    FREMMENNIK_SLAYER_CAVE,
    GIANTS_DEN,
    GIANTS_PLATEAU,
    GOD_WARS_DUNGEON,
    IORWERTH_DUNGEON,
    JORMUNGANDS_PRISON,
    KALPHITE_CAVE,
    KALPHITE_LAIR,
    KARUULM_SLAYER_DUNGEON,
    KRAKEN_COVE,
    LUMBRIDGE,
    LUNAR_ISLE,
    MOS_LEHARMLESS_CAVE,
    MOURNER_TUNNELS,
    SLAYER_TOWER_FLOORS,
    SLAYER_TOWER_GROUNDFLOOR,
    SMOKE_DEVIL_DUNGEON,
    SMOKE_DUNGEON,
    STRONGHOLD_SLAYER_CAVE,
    TAVERLY_DUNGEON,
    VARROCK_SEWERS,
    ZANARIS
  );

function EWLCombatLocation.GetString(i: Int32): String; static;
begin
  Result := ToString(EWLCombatLocation(i)).ToLower().Replace('_', ' ');
end;

function EWLCombatLocation.GetStrings(): TStringArray; static;
var
  i: Int32;
begin
  for i := 0 to Ord(High(EWLCombatLocation)) do
    Result += EWLCombatLocation.GetString(i);
end;

function EWLCombatLocation.IndexOf(value: String): Int32; static;
var
  i: Int32;
begin
  value := value.ToLower();
  for i := 0 to Ord(High(EWLCombatLocation)) do
    if value = EWLCombatLocation.GetString(i) then
      Exit(i);

  Result := -1;
end;

function EWLCombatLocation.Find(value: String): EWLCombatLocation; static;
var
  i: Int32;
begin
  value := value.ToLower().Replace('''','');
  for i := 0 to Ord(High(EWLCombatLocation)) do
    if value = EWLCombatLocation.GetString(i) then
      Exit(EWLCombatLocation(i));
end;

type WLSettings = record class var
  MaxActions: UInt32;
  MaxTime:    UInt64;

  Breaks, TextReport, Stats: Boolean;
  SaveVideo:
  record
    Enabled: Boolean;
    Time: Int32;
  end;
  Sleep:
  record
    Enabled: Boolean;
    Hour, HourOverride: String;
    Length, LengthOverride: Single;
  end;
  Antiban:
  record
    Enabled, Camera, Mouse, Chat, GameTabs, Bank: Boolean;
  end;

  RemoteInput:
  record
    Enabled, BlockInput, HUDReport, HUDDebug, HUDTransparent: Boolean;
  end;

  BankLocation: EWLBankLocation;
end;

begin
  WLSettings.Breaks        := True;
  WLSettings.Sleep.Enabled := True;
  WLSettings.Antiban       := [True, True, True, True, True, True];

  WLSettings.TextReport  := True;
  WLSettings.RemoteInput := [True, False, True, False, False];

  WLSettings.Stats     := True;
  WLSettings.SaveVideo := [False, 20];

  WLSettings.BankLocation := EWLBankLocation.GRAND_EXCHANGE_BANK
end;
