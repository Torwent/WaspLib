(*
TRSWalkerObject
===============
Methods to handle TRSWalkerObjects.
TRSWalkerObject can be anything that you want to interact with on the mainscreen.
They are divided in 2 main categories and one of them in 3 sub-categories but the usage is only limited by your imagination:
  - RSObjects (TRSWalkerObjects that don't have a dot on the minimap)
  - MMDots:   (TRSWalkerObjects that have a dot on the minimap)
    -RSNPCs
    -RSGroundItems
    -RSPlayers

How do they work?
~~~~~~~~~~~~~~~~~
TRSWalkerObjects are very customizable and can be used to interact with almost everything.
For some niche use cases it might be worth do something custom or override some methods to get the behavior you want.

The default way they work is:
- WaspLib checks if you are in the TRSWalkerObject.Coordinates range.
  If not and you used one of the **Walk** methods, it will walk to that location.
- Being in the TRSWalkerObject location, then we check if our TRSWalkerObject is a TRSObject or a TRSMMDot.
  for a TRSObject we stick with the TRSWalkerObject.Coordinates, for TRSMMDots, the coordinates are changed to the minimap dots that within the radius specified when the TRSWalkerObject was setup.
- WaspLib then convert the coordinate along with the TRSWalkerObject.ShapeArray information to a TCuboidArray on the mainscreen (https://en.wikipedia.org/wiki/Cuboid).
- This TCuboidArray is the "bounds" of our targets. Each one should accurately surround each of our possible targets.
- Then WaspLib runs MainScreen.FindObject() inside of each TCuboid. For more info on how this works read the TRSObjectFinder documentation (https://torwent.github.io/SRL-T/mainscreen.html#type-trsobjectfinder).
- An ATPA of the found colors inside each cuboid is then returned.
- If the method used is related to hovering or clicking, we hover the closest target and then check if TRSWalkerObject.UpText matches the uptext.
- If it does and we are using a clicking method, we click it.
- If we use a **select** method, if the option is not in the uptext we right click the target and select that option.


This is the default behavior but TRSWalkerObjects are very customizable and functionality can be toggled on with TRSWalkerObject.Filter:
- Filter.Walker: Disables walker for the TRSWalkerObject. Coordinates are ignored and still use the minimap dots that are visible on the
  minimap if we are talking about a TRSMMDot, otherwise only MainScreen.FindObject() is used.
- Filter.MinimapDot: Disables the usage of minimap dots for TRSMMDots. TRSObjects have this off by default. Disabling this for TRSMMDots is only useful if the the Player, NPC or Item is in a fixed position.
- Filter.Finder: Disables color checking. The returned cuboids by Walker and MM2MS are our targets. This is useful for things that are "invisible" like agility shortcuts and/or things that have colors that are just unreliable.
- UpText: Ignore all uptext when hovering the targets
- Filter.Skip: This is an internal filter that you probably don't want to use directaly. Decides which TRSWalkerObjects setup is skipped during wasplib's setup process.

.. note:: You cannot disable Filter.Walker, Filter.MinimapDot, Filter.Finder all at the same time. You need one of them enabled and keep in mind that TRSObjects already have Filter.MinimapDot disabled.
*)
{$DEFINE WL_WALKEROBJECT_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

const
  USE_ASYNC_HOVER: Boolean = False;

type
(*
type TRSWalkerObject
~~~~~~~~~~~~~~~~~~~~
.. pascal::
  TRSWalkerObject = record
    Filter: record
      Walker:     Boolean;
      MinimapDot: Boolean;
      Finder:     Boolean;
      UpText:     Boolean;
      Skip:       Boolean;
    end;
    ShapeArray: TRSMainScreenShapeArray;
    Coordinates: TPointArray;
    Finder: TRSObjectFinder;
    UpText: TStringArray;
    ActionUpText: TStringArray;
  class var
    CurrentUpText: TStringArray;
    RedClicked: Boolean;
    Walker: PRSWalker;
    Regions: TBoxArray;
  end;

Parent record of all TRSWalkerObjects.
*)
  TRSWalkerObject = record
    Filter: record
      Walker:     Boolean;
      MinimapDot: Boolean;
      Finder:     Boolean;
      UpText:     Boolean;
      Skip:       Boolean;
    end;

    ShapeArray: TRSMainScreenShapeArray;
    Coordinates: TPointArray;

    Finder: TRSObjectFinder;
    UpText: TStringArray;
    ActionUpText: TStringArray;
  class var
    CurrentUpText: TStringArray;
    RedClicked: Boolean;
    Walker: PRSWalker;
    Regions: TBoxArray;
  end;

  PRSWalkerObjectArray = array of ^TRSWalkerObject;


(*
Walker.InternalSetup
~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSWalker.InternalSetup(); override;

This is an internal TRSWalker function and you shouldn't touch it unless you know what you are doing.
This is overriden so it sets up the TRSWalkerObject.Walker pointer and TRSWalkerObject.Regions which are used to know when to enable TRSWalkerObject.Filter.Skip.
TRSWalkerObjects coordinates that are outside our TRSWalkerObject.Regions boxes are skipped on WaspLib's setup process.
*)
procedure TRSWalker.InternalSetup(); override;
begin
  inherited;

  TRSWalkerObject.Walker := @Self;
  TRSWalkerObject.Regions := [[0, 0, Self.Map.Map.getWidth()-1, Self.Map.Map.getHeight()-1]];
end;

(*
Walker.Setup
~~~~~~~~~~~~
.. pascal:: procedure TRSWalker.Setup(Regions: TBoxArray; Scaling: Integer = 8); override;

You shouldn't modify this unless you know what you are doing, otherwise you might break TRSWalkerObjects.
This is overriden so it sets up TRSWalkerObject.Regions which are used to know when to enable TRSWalkerObject.Filter.Skip.
TRSWalkerObjects coordinates that are outside our TRSWalkerObject.Regions boxes are skipped on WaspLib's setup process.
*)
procedure TRSWalker.Setup(Regions: TBoxArray; Scaling: Integer = 8); override;
begin
  inherited;
  TRSWalkerObject.Regions := Regions;
end;

(*
Walker.Click
~~~~~~~~~~~~
.. pascal:: function TRSWalker.Click(MinimapPoint: TPoint; Randomness: Int32): Boolean; override;

You shouldn't modify this unless you know what you are doing, otherwise you might break TRSWalkerObjects.
This is overriden so if we redclick our current TRSWalkerObject target while mainscreen walking we disable walker.
When we start the walking process towards a TRSWalkerObject, TRSWalkerObject.CurrentUpText is temporarily set so we
know what we are looking for while walking. Once we click the target TRSWalkerObject.CurrentUpText is cleared.
*)
function TRSWalker.Click(MinimapPoint: TPoint; Randomness: Int32): Boolean; override;
var
  p: TPoint;
  line: TPointArray;
  i, j: Int32;
  hoveringTarget: Boolean;
  msUpText, str: String;
begin
  if MainScreen.IsUpText('>') and not TRSWalkerObject.CurrentUpText.Contains('Use') then
  begin
    ChooseOption.Select('Cancel');
    Exit;
  end;

  Result := True;

  if Self.ScreenWalk then
  begin
    repeat
      i += 1;
      p := MinimapPoint.Random(-randomness, randomness);
      if i >= 15 then
      begin
        line := TPointArray.CreateFromLine(p, Minimap.Center());
        for j := 0 to High(line) do
          if Minimap.PointInZoomRectangle(line[j]) then
          begin
            p := line[j];
            Break;
          end;
      end;
    until Minimap.PointInZoomRectangle(p);

    Mouse.Move(Minimap.PointToMsRect(p).Mean());
    msUpText := MainScreen.GetUpText();

    for str in TRSWalkerObject.CurrentUpText do
      if str in msUpText then
      begin
        hoveringTarget := True;
        Break;
      end;

    if not hoveringTarget and not ('Walk here' in msUpText) then
      Exit(ChooseOption.Select('Walk here'));
  end else
  begin
    repeat
      P := MinimapPoint.Random(-Randomness, Randomness);
    until Minimap.IsPointOn(P);

    Mouse.Move(P);
  end;

  Mouse.Click(MOUSE_LEFT);

  // 15% chance of spam clicking
  if (Randomness > 0) and (Random < Antiban.GetUniqueNumber(0.15, 0.1, 0.2)) then
    for i := 0 to Round(Antiban.GetUniqueNumber(2, 1, 3)) do
    begin
      Mouse.Click(Mouse.Position, MOUSE_LEFT);

      Wait(20, 150, wdLeft);
    end;

  TRSWalkerObject.RedClicked := Self.ScreenWalk and hoveringTarget and MainScreen.DidRedClick();

  if TRSWalkerObject.RedClicked then
    Self.Enabled := False;
end;

(*
TRSWalkerObject._Setup
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSWalkerObject._Setup();

Base internal TRSWalkerObject setup method. You probably won't need to call this directly, it's called by the next setup methods automatically.
*)
procedure TRSWalkerObject._Setup();
begin
  Self.Filter.MinimapDot := True;
  Self.Filter.Finder     := True;
  Self.Filter.UpText     := True;
end;

(*
TRSWalkerObject.Setup
~~~~~~~~~~~~~~~~~~~~~
.. pascal::
  procedure TRSWalkerObject.Setup(coordinates: TPointArray);
  procedure TRSWalkerObject.Setup(upText: TStringArray); overload;

TRSWalkerObject setup methods. You usually need to call of this.

The method that takes in coordinates should be called first.
That is because `TRSWalkerObject.Setup(coordinates: TPointArray)` is where
we decide if TRSWalkerObject.Filter.Skip is going to be true or not.

Keep in mind if you don't use a TRSWalker in your script and want to use TRSWalkerObjects, you will need to manually setup them in your script
because they will all be skipped.
So you need to set `TRSWalkerObject.Filter.Skip := False` and then call `TRSWalkerObject.Setup(upText: TStringArray)`

Normal usage in the following example.

Example
-------

  //Example with walker:
  var
    rsw: TRSWalker;
    obj: TRSObject; //This is a type of TRSWalkerObject.
  begin
    rsw.Setup();
    obj.Setup([[200, 200]]);
    obj.Setup(['My', 'uptext']);
  end;


  //Example without walker:
  var
    obj: TRSObject; //This is a type of TRSWalkerObject.
  begin
    obj.Setup(['My', 'uptext']);
  end;
*)
procedure TRSWalkerObject.Setup(coordinates: TPointArray);
begin
  Self.Filter.Skip := TRSWalkerObject.Walker = nil;
  if Self.Filter.Skip then
    Exit;

  coordinates := TRSWalkerObject.Regions.Filter(coordinates);

  Self.Filter.Skip := coordinates = [];
  if Self.Filter.Skip then
    Exit;

  Self.Filter.Walker := True;
  Self.Coordinates := coordinates;
  SetLength(Self.ShapeArray, Length(coordinates));
end;

procedure TRSWalkerObject.Setup(upText: TStringArray); overload;
begin
  if Self.Filter.Skip then
    Exit;

  Self._Setup();

  Self.UpText := upText;

  Self.Finder.ClusterDistance := 3;
  Self.Finder.Erode := 2;
  Self.Finder.Grow := 4;
end;

(*
TRSWalkerObject.GetCuboidArray
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
  function TRSWalkerObject.GetCuboidArrayEx(out floorTiles, roofTiles: TRectArray): TCuboidArray;
  function TRSWalkerObject.GetCuboidArray(): TCuboidArray;

Internal TRSWalkerObject method responsible for returning a TCuboidArray of our target on the 3D world (on mainscreen and outside of it).
You will probably never need to use this directly.
You can visually see this in action by using the `Debug()` methods, this is responsible for the white lines surounding the targets.
*)
function TRSWalkerObject.GetCuboidArrayEx(out floorTiles, roofTiles: TRectArray): TCuboidArray;
var
  me: TPoint;
begin
  me := TRSWalkerObject.Walker^.GetMyPos();

  floorTiles := TRSWalkerObject.Walker^.GetTileArrayMS(me, Self.Coordinates, Self.ShapeArray.GetShape(0));
  if not Self.ShapeArray.ZeroHeight() then
  begin
    roofTiles := TRSWalkerObject.Walker^.GetTileArrayMS(me, Self.Coordinates, Self.ShapeArray);
    Exit(floorTiles.GetCuboids(roofTiles));
  end;

  roofTiles := floorTiles;
  Result := floorTiles.GetCuboids();
end;

function TRSWalkerObject.GetCuboidArray(): TCuboidArray;
var
  me: TPoint;
  coordinates: TPointArray;
begin
  me := TRSWalkerObject.Walker^.GetMyPos();
  coordinates := Self.Coordinates.Sorted(me);
  Result := TRSWalkerObject.Walker^.GetCuboidArrayMS(me, coordinates, Self.ShapeArray, [0, 0]);
end;

(*
TRSWalkerObject.FindOnMainScreen
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalkerObject.FindOnMainScreen(cuboidArray: TCuboidArray): T2DPointArray;

Internal TRSWalkerObject method responsible for filtering a TCuboidArray by what's visible in the mainscren.
This is meant to filter TRSWalkerObject.GetCuboidArray() so targets that are outside of the mainscreen are filtered out.
You will probably never need to use this directly.
*)
function TRSWalkerObject.FindOnMainScreen(cuboidArray: TCuboidArray): T2DPointArray;
var
  i: Int32;
  tpa: TPointArray;
  tempFinder: TRSObjectFinder;
begin
  if Self.Filter.Finder then
    tempFinder := Self.Finder.Unlimited();

  cuboidArray := MainScreen.Filter(cuboidArray);

  for i := 0 to High(cuboidArray) do
  begin
    if Self.Filter.Finder then
    begin
      tpa := MainScreen.FindObject(tempFinder, cuboidArray[i].Bounds()).Merge();
      if tpa = [] then
        Continue;

      tpa := cuboidArray[i].Filter(tpa);
      if tpa <> [] then
        Result += tpa;
      Continue;
    end;

    tpa := cuboidArray[i].Connect().ShapeFill();
    if tpa <> [] then
      Result += tpa;
  end;
end;

(*
TRSWalkerObject.OnMainScreen
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalkerObject.OnMainScreen(cuboidArray: TCuboidArray): Boolean;

Internal TRSWalkerObject method that returns true or false if we have TCuboids visible on the mainscreen.
You probably don't need to use this directly.
*)
function TRSWalkerObject.OnMainScreen(cuboidArray: TCuboidArray): Boolean;
var
  i: Int32;
  tempFinder: TRSObjectFinder;
begin
  if Self.Filter.Finder then
    tempFinder := Self.Finder.Unlimited;

  cuboidArray := MainScreen.Filter(cuboidArray);
  for i := 0 to High(cuboidArray) do
  begin
    if not Self.Filter.Finder then
      Exit(True);

    if MainScreen.FindObject(tempFinder, cuboidArray[i].Bounds) <> [] then
      Exit(True);
  end;
end;


(*
TRSWalkerObject._UpTextCheck
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalkerObject._UpTextCheck(out shouldExit: Boolean): Boolean;

Internal TRSWalkerObject helper method that is used by all hovering methods.
You probably don't need to use this directly.
*)
function TRSWalkerObject._UpTextCheck(out shouldExit: Boolean): Boolean;
var
  strArray: TStringArray;
  upText: String;
begin
  shouldExit := True;

  if (MainScreen.Mode = ERSClientMode.FIXED) and MainScreen.HasInterface() then
    Exit;

  if Self.Filter.UpText then
  begin
    strArray := Self.UpText;
    if Self.ActionUpText <> [] then
      strArray := Self.ActionUpText;

    if TRSWalkerObject.CurrentUpText <> strArray then
      TRSWalkerObject.CurrentUpText := strArray;
  end;

  upText := MainScreen.GetUpText();

  if ('>' in upText) and not TRSWalkerObject.CurrentUpText.Contains('Use') then
  begin
    ChooseOption.Select('Cancel');
    Exit;
  end;

  if Self.Filter.UpText and (Self.UpText in upText) then
    Exit(True);

  shouldExit := False;
end;

(*
TRSWalkerObject._WalkUpTextCheck
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalkerObject._WalkUpTextCheck(out shouldExit: Boolean): Boolean;

Internal TRSWalkerObject helper method that is used by all walking hover methods.
You probably don't need to use this directly.
*)
function TRSWalkerObject._WalkUpTextCheck(out shouldExit: Boolean): Boolean;
var
  upText: String;
  strArray: TStringArray;
begin
  shouldExit := True;

  if (MainScreen.Mode = ERSClientMode.FIXED) and MainScreen.HasInterface() then
    Exit;


  if Self.Filter.UpText then
  begin
    strArray := Self.UpText;
    if Self.ActionUpText <> [] then
      strArray := Self.ActionUpText;

    if TRSWalkerObject.CurrentUpText <> strArray then
      TRSWalkerObject.CurrentUpText := strArray;
  end;

  upText := MainScreen.GetUpText();

  if ('>' in upText) and not TRSWalkerObject.CurrentUpText.Contains('Use') then
  begin
    ChooseOption.Select('Cancel');
    Exit;
  end;

  if TRSWalkerObject.RedClicked or (Self.Filter.UpText and (Self.UpText in upText)) then
    Exit(True);

  shouldExit := False;
end;


(*
TRSWalkerObject._ClickHelper
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalkerObject._ClickHelper(leftClick: Boolean): Boolean;

Internal TRSWalkerObject helper method that is used by other clicking methods.
You probably don't need to use this directly.

This is what's responsible for deciding if we click a target we are hovering or not.
*)
function TRSWalkerObject._ClickHelper(leftClick: Boolean): Boolean;
begin
  if TRSWalkerObject.CurrentUpText <> [] then
    TRSWalkerObject.CurrentUpText := [];

  if TRSWalkerObject.RedClicked then
  begin
    TRSWalkerObject.RedClicked := False;
    Exit(True);
  end;

  if ChooseOption.IsOpen() then
  begin
    if Self.Filter.UpText and ChooseOption.Select(Self.UpText) then
      Exit(True);
    ChooseOption.Close();
    Exit;
  end;

  if leftClick then
    Mouse.Click(MOUSE_LEFT);

  Result := MainScreen.DidRedClick() or
            (not leftClick and Self.Filter.UpText and ChooseOption.Select(Self.UpText));

  if Result and SRL.Dice(0.5 - (0.5 * BioHash)) then
  begin
    case Random of
      0.000..0.899: Antiban.SmallRandomMouse();
      else Antiban.RandomMouse();
    end;
  end;
end;

(*
TRSWalkerObject._SelectHelper
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalkerObject._SelectHelper(action: TStringArray): Boolean;

Internal TRSWalkerObject helper method that is used by other select methods.
You probably don't need to use this directly.

This is what is responsible for deciding if we just left click a target we are hovering or right click it and choose an option.
*)
function TRSWalkerObject._SelectHelper(action: TStringArray): Boolean;
begin
  if TRSWalkerObject.CurrentUpText <> [] then
    TRSWalkerObject.CurrentUpText := [];

  if TRSWalkerObject.RedClicked then
  begin
    TRSWalkerObject.RedClicked := False;
    Exit(True);
  end;

  if ChooseOption.IsOpen() and ChooseOption.Select(action) then
    Exit(True);

  if MainScreen.IsUpText(action) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Exit(MainScreen.DidRedClick());
  end;

  Result := ChooseOption.Select(action);
end;


type
(*
type TRSObject
~~~~~~~~~~~~~~

TRSObjects are a type of TRSWalkerObject.
This are meant to be TRSWalkerObjects that do not have a minimap dot so TRSObject.Filter.MinimapDot is False by default and shouldn't be changed.
*)
  TRSObject = type TRSWalkerObject;
  TRSObjectArray = array of TRSObject;
  PRSObject = ^TRSObject;
  PRSObjectArray = array of PRSObject;

procedure PRSObjectArray.Del(const Index: Integer; const Count: Integer = 1);
begin
  Delete(Self, Index, Count);
end;

function PRSObjectArray.IndexOf(value: TPoint): Int32; overload;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    if Self[i]^.Coordinates.Contains(value) then
      Exit(i);

  Result := -1;
end;

function PRSObjectArray.GetClosest(): TRSObject;
var
  me: TPoint;
  i, hi: Int32;
  tpa, tmp: TPointArray;
begin
  if Self = [] then
    Exit;

  if TRSWalkerObject.Walker = nil then
    Exit;

  me := TRSWalkerObject.Walker^.GetMyPos();

  hi := High(Self);
  for i := 0 to hi do
  begin
    if Self[i]^.Coordinates = [] then
    begin
      Self.Del(i); //remove the empty ones so next times are faster since we don't have to check them.
      hi -= 1;
      i -= 1;
      Continue;
    end;

    tmp := Self[i]^.Coordinates.SortFrom(me);
    tpa += tmp.First();
  end;

  if tpa = [] then
    Exit;

  tpa := tpa.SortFrom(me);
  Result := Self[Self.IndexOf(tpa.First())]^;
end;


(*
TRSObject.Setup
~~~~~~~~~~~~~~~
.. pascal::
  procedure TRSObject.SetupEx(shape: Vector3; coordinates: TPointArray); overload;
  procedure TRSObject.Setup(size, height: Double; coordinates: TPointArray); overload;
  procedure TRSObject.Setup(height: Double; coordinates: TPointArray); overload;

All this extend the basic `TRSWalkerObject.Setup(coordinates: TPointArray)`.
For TRSObjects this are the methods that should be used for setting them up initially.

In TRSObject.Setup(shape: Vector3; coordinates: TPointArray), **shape** should be a vector3 of the object shape in number of tiles:
- shape.X: number of tiles of the object from west to east.
- shape.Y: number of tiles of the object from north to south.
- shape.Z: object height, this value has to be guessed, I recommend you try several values and debug it until it looks good to you.
           As some examples, player and npcs height is around 7, bank chests 4, yew/magic trees 14/16.

In TRSObject.Setup(size, height: Double; coordinates: TPointArray), **size** and **height** are used
to create a Vector3 "shape" and call TRSObject.Setup(shape: Vector3; coordinates: TPointArray).
In this case, **shape.X** and **shape.Y** would be both equal to **size**.

Lastly, TRSObject.Setup(height: Double; coordinates: TPointArray) also calls TRSObject.Setup(shape: Vector3; coordinates: TPointArray)
and sets the **shape.X** and **shape.Y** to 1.
*)
procedure TRSObject.SetupEx(shape: Vector3; coordinates: TPointArray); overload;
begin
  Self.Setup(coordinates);

  if Self.Filter.Skip then
    Exit;

  Self.ShapeArray.SetShape(shape);
end;

procedure TRSObject.Setup(size, height: Double; coordinates: TPointArray); overload;
begin
  Self.SetupEx([size, size, height], coordinates);
end;

procedure TRSObject.Setup(height: Double; coordinates: TPointArray); overload;
begin
  Self.Setup(1, height, coordinates);
end;


(*
TRSObject.FindEx
~~~~~~~~~~~~~~~~
.. pascal:: function TRSObject.FindEx(out floorTiles, roofTiles: TRectArray; out cuboidArray: TCuboidArray; out atpa: T2DPointArray): Boolean;

TRSObject method used to find a TRSObject. If found returns true, if not returns false.
This "extended" method in particular is only meant for debugging and should be avoided outside of development/debugging.
This is what is used when you call `Debug(TRSObject)`.

*)
function TRSObject.FindEx(out floorTiles, roofTiles: TRectArray; out cuboidArray: TCuboidArray; out atpa: T2DPointArray): Boolean;
begin
  MM2MS.SetupZoom();

  if Self.Filter.Walker then
  begin
    cuboidArray := Self.GetCuboidArrayEx(floorTiles, roofTiles);

    if cuboidArray = [] then
      Exit;

    atpa := Self.FindOnMainScreen(cuboidArray);
  end

  else if Self.Filter.Finder then
    atpa := MainScreen.FindObject(Self.Finder).SortFrom(MainScreen.GetPlayerBox().Center());

  Result := atpa <> [];
end;

(*
TRSObject.Find
~~~~~~~~~~~~~~
.. pascal::
  function TRSObject.Find(out atpa: T2DPointArray): Boolean; overload;
  function TRSObject.Find(): Boolean; overload;

TRSObject methods used to find a TRSObject. If found returns true, if not returns false.

Example
-------

  WriteLn RSObjects.GEBank.Find(atpa); //Be in ge and with a walker setup there.
  Debug(atpa);
*)
function TRSObject.Find(out atpa: T2DPointArray): Boolean; overload;
var
  cuboidArray: TCuboidArray;
begin
  MM2MS.SetupZoom();

  if Self.Filter.Walker then
  begin
    cuboidArray := Self.GetCuboidArray();

    if cuboidArray = [] then
      Exit;

    atpa := Self.FindOnMainScreen(cuboidArray);
  end

  else if Self.Filter.Finder then
  begin
    atpa := MainScreen.FindObject(Self.Finder).SortFrom(MainScreen.GetPlayerBox().Center());
  end;

  Result := atpa <> [];
end;

function TRSObject.IsVisible(): Boolean; overload;
var
  cuboidArray: TCuboidArray;
begin
  MM2MS.SetupZoom();

  if Self.Filter.Walker then
  begin
    cuboidArray := Self.GetCuboidArray();

    if cuboidArray = [] then
      Exit;

    Exit(Self.OnMainScreen(cuboidArray));
  end;

  if Self.Filter.Finder then
    Result := MainScreen.FindObject(Self.Finder) <> [];
end;


(*
TRSObject.Draw
~~~~~~~~~~~~~~
.. pascal:: procedure TRSObject.Draw(out bitmap: TMufasaBitmap);

Internal method used to draw found TRSObjects in a TMufasaBitmap.

Example
-------

  Bitmap.FromClient()
  RSObjects.GEBank.Draw(Bitmap); //Be in ge and with a walker setup there.
  Bitmap.Debug();
  Bitmap.Free();
*)
procedure TRSObject.Draw(out bitmap: TMufasaBitmap);
var
  floorTiles, roofTiles: TRectArray;
  cuboidArray: TCuboidArray;
  atpa: T2DPointArray;
  i: Int32;
begin
  Self.FindEx(floorTiles, roofTiles, cuboidArray, atpa);

  bitmap.DrawATPA(atpa);
  if atpa <> [] then
    bitmap.DrawTPA(atpa[0], SRLColors.BLACK);

  for i := 0 to High(floorTiles) do
  begin
    bitmap.DrawRect(floorTiles[i], SRLColors.WHITE);
    bitmap.DrawRect(roofTiles[i], SRLColors.WHITE);
    bitmap.DrawTPA(cuboidArray[i].Connect(), SRLColors.YELLOW);
  end;
end;

(*
TRSObject.SaveDebug
~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSObject.SaveDebug();

Saves a debug image of the TRSObject to Simba\Screenshots\RSObjects

Example
-------

  RSObjects.GEBank.SaveDebug(); //Be in ge and with a walker setup there.
*)
procedure TRSObject.SaveDebug();
var
  Bitmap: TMufasaBitmap;
  filePath: String;
begin
  Bitmap.FromClient();

  Self.Draw(Bitmap);
  Bitmap.DrawBoxFilled(Chat.GetDisplayNameBox(), False, $00FFFF);

  filePath := GetScreenshotPath('TRSObject');

  Bitmap.SaveToFile(filePath);
  WriteLn('Send ', filePath, ' to Torwent on discord!');
  Bitmap.Debug();

  WriteLn('Position: ', TRSWalkerObject.Walker^.GetMyPos(), ' ZoomLevel: ', MM2MS.ZoomLevel);
  WriteLn('RSObject: ', Self);
  Bitmap.Free();
end;


(*
TRSObject._AsyncHoverHelper
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
  function TRSObject._AsyncHoverHelper(): Boolean;
  function TRSObject._AsyncHoverHelper(attempts: Int32): Boolean; overload;

Internal helper methods used to hover a TRSObject target asynchronously.
You should not use this directly.
*)
function TRSObject._AsyncHoverHelper(): Boolean;
var
  shouldExit: Boolean;
  atpa: T2DPointArray;
begin
  Result := Self._UpTextCheck(shouldExit);
  if shouldExit then
    Exit;

  if Self.Find(atpa) then
  begin
    ASyncMouse.Move(atpa[0].RandomValue());
    Result := True;
  end;
end;

function TRSObject._AsyncHoverHelper(attempts: Int32): Boolean; overload;
  function GetDestination(attempt: Int32; atpa: T2DPointArray): TPointArray;
  begin
    if attempt < 2 then
      Exit(atpa[0]); // 0 for the closest one.

    if Length(atpa) > (attempt - 2) then
      Exit(atpa[attempt - 2]);

    Result := atpa.RandomValue();
  end;

var
  shouldExit: Boolean;
  attempt: Int32;
  atpa: T2DPointArray;
  tpa: TPointArray;
  angle: Double;
begin
  Result := Self._UpTextCheck(shouldExit);
  if shouldExit then
    Exit;

  for attempt := 0 to attempts do
  begin
    if Self.Find(atpa) then
    begin
      tpa := GetDestination(attempt, atpa);
      ASyncMouse.Move(tpa.RandomValue());

      while AsyncMouse.IsMoving() or tpa.Contains(AsyncMouse.Position()) do
      begin
        if Self.Filter.UpText and MainScreen.IsUpText(Self.UpText) then
          Exit(True);

        if not Self.Find(atpa) then
          Continue;

        tpa := GetDestination(attempt, atpa);
        AsyncMouse.ChangeDestination(tpa.RandomValue());
        //Wait(100); //Delay for less CPU usage??? Have to think about it.
      end;

      if not Self.Filter.UpText then
        Exit(True);
    end;

    if MainScreen.IsUpText(Self.UpText) then
      Exit(True);

    //will rotate the screen for the last attempt if hasn't hovered properly yet
    if attempt = (attempts - 1) then
    begin
      angle := Minimap.GetCompassAngle() + Random(-50, 50);
      Minimap.SetCompassAngle(angle, 10);
    end;
  end;
end;

(*
TRSObject._HoverHelper
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSObject._HoverHelper(attempts: Int32): Boolean;

Internal helper method used to hover a TRSObject target.
You should not use this directly.
*)
function TRSObject._HoverHelper(attempts: Int32): Boolean;
var
  shouldExit: Boolean;
  attempt: Int32;
  atpa: T2DPointArray;
  tpa: TPointArray;
  angle: Double;
begin
  Result := Self._UpTextCheck(shouldExit);
  if shouldExit then
    Exit;

  for attempt := 0 to attempts do
  begin
    if Self.Find(atpa) then
    begin
      if attempt < 2 then
        tpa := atpa[0] // 0 for the closest one.
      else if Length(atpa) > (attempt - 2) then
        tpa := atpa[attempt - 2]
      else
        tpa := atpa[Random(0, High(atpa))];

      Mouse.Move(tpa[Random(0, High(tpa))]);
      if not Self.Filter.UpText then
        Exit(True);
    end;

    if MainScreen.IsUpText(Self.UpText) then
      Exit(True);

    //will rotate the screen for the last attempt if hasn't hovered properly yet
    if attempt = (attempts - 1) then
    begin
      angle := Minimap.GetCompassAngle() + Random(-50, 50);
      Minimap.SetCompassAngle(angle, 10);
    end;
  end;
end;

(*
TRSObject._AsyncWalkHoverHelper
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSObject._AsyncWalkHoverHelper(attempts: Int32): Boolean;

Internal helper method used to walk and hover a TRSObject target asynchronously.
You should not use this directly.

This is responsible for deciding wether we should walk to a TRSObject target or not before attempting to hover it asynchronously.
*)
function TRSObject._AsyncWalkHoverHelper(attempts: Int32): Boolean;
  function GetDestination(attempt: Int32; atpa: T2DPointArray): TPointArray;
  begin
    if attempt < 2 then
      Exit(atpa[0]); // 0 for the closest one.

    if Length(atpa) > (attempt - 2) then
      Exit(atpa[attempt - 2]);

    Result := atpa.RandomValue();
  end;
var
  shouldExit: Boolean;
  attempt: Int32;
  atpa: T2DPointArray;
  tpa: TPointArray;
  angle: Double;
begin
  if not Self.Filter.Walker then
    Exit(Self._HoverHelper(attempts));

  Result := Self._WalkUpTextCheck(shouldExit);
  if shouldExit then
    Exit;

  for attempt := 0 to attempts do
  begin
    if Self.Find(atpa) then
    begin
      tpa := GetDestination(attempt, atpa);

      ASyncMouse.Move(tpa);

      while AsyncMouse.IsMoving() or tpa.Contains(AsyncMouse.Position()) do
      begin
        if Self.Filter.UpText and MainScreen.IsUpText(Self.UpText) then
          Exit(True);

        if not Self.Find(atpa) then
          Continue;
        tpa := GetDestination(attempt, atpa);
        AsyncMouse.ChangeDestination(tpa.RandomValue());
        //Wait(100); //Delay for less CPU usage??? Have to think about it.
      end;

      if not Self.Filter.UpText then
        Exit(True);
    end;

    if MainScreen.IsUpText(Self.UpText) then
      Exit(True);

    if not TRSWalkerObject.Walker^.AtTile(Self.Coordinates, 50) then
    begin
      TRSWalkerObject.Walker^.WebWalk(Self.Coordinates, 30, 0.15);
      Continue;
    end;

    if attempt = (attempts - 1) then
    begin
      if not TRSWalkerObject.Walker^.AtTile(Self.Coordinates, 25) then
      begin
        TRSWalkerObject.Walker^.WebWalk(Self.Coordinates, 25, 0.15);
        Continue;
      end;

      angle := Minimap.GetCompassAngle() + Random(-50, 50);
      Minimap.SetCompassAngle(angle, 10);
    end;
  end;
end;

(*
TRSObject._WalkHoverHelper
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSObject._WalkHoverHelper(attempts: Int32): Boolean;

Internal helper method used to walk and hover a TRSObject target.
You should not use this directly.

This is responsible for deciding wether we should walk to a TRSObject target or not before attempting to hover it.
*)
function TRSObject._WalkHoverHelper(attempts: Int32): Boolean;
var
  shouldExit: Boolean;
  attempt: Int32;
  atpa: T2DPointArray;
  tpa: TPointArray;
  angle: Double;
begin
  if not Self.Filter.Walker then
    Exit(Self._HoverHelper(attempts));

  Result := Self._WalkUpTextCheck(shouldExit);
  if shouldExit then
    Exit;

  for attempt := 0 to attempts do
  begin
    if Self.Find(atpa) then
    begin
      if attempt < 2 then
        tpa := atpa[0]
      else if Length(atpa) > (attempt - 2) then
        tpa := atpa[attempt - 2]
      else
        tpa := atpa.RandomValue();

      Mouse.Move(tpa.RandomValue());
      if not Self.Filter.UpText then
        Exit(True);
    end;

    if MainScreen.IsUpText(Self.UpText) then
      Exit(True);

    if not TRSWalkerObject.Walker^.AtTile(Self.Coordinates, 50) then
    begin
      TRSWalkerObject.Walker^.WebWalk(Self.Coordinates, 30, 0.15);
      Continue;
    end;

    if attempt = (attempts - 1) then
    begin
      if not TRSWalkerObject.Walker^.AtTile(Self.Coordinates, 25) then
      begin
        TRSWalkerObject.Walker^.WebWalk(Self.Coordinates, 25, 0.15);
        Continue;
      end;

      angle := Minimap.GetCompassAngle() + Random(-50, 50);
      Minimap.SetCompassAngle(angle, 10);
    end;
  end;
end;


(*
TRSObject.AsyncHover
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSObject.AsyncHover(): Boolean;

Method used to asynchronously hover a TRSObject target if it's found on the mainscreen.
AsyncMouse is very powerful but you shouldn't use it without a good reason for it.

Example
-------

  RSObjects.GEBank.AsyncHover(); //Be in GE with a walker setup there.
  repeat
    WriteLn 'This will print while the mouse is moving because it's asynchronously!';
  until MainScreen.IsUpText('Exch');
*)
function TRSObject.AsyncHover(): Boolean;
begin
  Result := Self._AsyncHoverHelper();
end;

(*
TRSObject.Hover
~~~~~~~~~~~~~~~
.. pascal:: function TRSObject.Hover(attempts: Int32 = 2; async: Boolean = True): Boolean;

Method used to hover a TRSObject target if it's found on the mainscreen.
It can hover synchronously and asynchronously.

Example
-------

  RSObjects.GEBank.Hover(2, true); //Be in GE with a walker setup there.
  repeat
    WriteLn 'This will print while the mouse is moving because it's asynchronously!';
  until MainScreen.IsUpText('Exch');

  Mouse.Move(Inventory.Bounds());

  RSObjects.GEBank.Hover(2, False);
  repeat
    WriteLn 'This will only print after the mouse has finished moving because it's not asynchronous!';
  until MainScreen.IsUpText('Exch');
*)
function TRSObject.Hover(attempts: Int32 = 2; async: Boolean = USE_ASYNC_HOVER): Boolean;
begin
  if ChooseOption.IsOpen() then
  begin
    if Self.Filter.UpText and ChooseOption.HasOption(Self.UpText) then
      Exit(True);
    ChooseOption.Close();
  end;

  if Self.Filter.Walker and not TRSWalkerObject.Walker^.MakePointVisible(Self.Coordinates) then
    Exit;

  Result := (async and Self._AsyncHoverHelper(attempts)) or Self._HoverHelper(attempts);
end;

(*
TRSObject.WalkHover
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSObject.WalkHover(attempts: Int32 = 2; async: Boolean = True): Boolean;

Method used to walk and hover a TRSObject target if it's found on the mainscreen after walking.
It can hover synchronously and asynchronously.
Keep in mind the walking portion is not made asynchronously, only the final moments of the method
when it's time to hover the TRSObject target can be made asynchronously.

Example
-------

  //Be in varrock with a varrock map loaded.
  rsw.WebWalk(WaspWeb.LOCATION_VARROCK);

  RSObjects.GEBank.WalkHover(2, true); //keep in mind that walking is not async.
  repeat
    WriteLn 'This will print while the mouse is moving because it's asynchronously!';
  until MainScreen.IsUpText('Exch');

  rsw.WebWalk(WaspWeb.LOCATION_VARROCK);

  RSObjects.GEBank.WalkHover(2, False);
  repeat
    WriteLn 'This will only print after the mouse has finished moving because it's not asynchronous!';
  until MainScreen.IsUpText('Exch');
*)
function TRSObject.WalkHover(attempts: Int32 = 2; async: Boolean = USE_ASYNC_HOVER): Boolean;
begin
  if ChooseOption.IsOpen() then
  begin
    if Self.Filter.UpText and ChooseOption.HasOption(Self.UpText) then
      Exit(True);
    ChooseOption.Close();
  end;

  if not Self.Filter.Walker then
    Exit;

  if Self.Filter.UpText and (TRSWalkerObject.CurrentUpText <> Self.UpText) then
    TRSWalkerObject.CurrentUpText := Self.UpText;

  if not TRSWalkerObject.Walker^.MakePointVisible(Self.Coordinates) and
     not TRSWalkerObject.Walker^.WebWalk(Self.Coordinates, 30, 0.15) then
      Exit;

  Result := (async and Self._AsyncWalkHoverHelper(attempts)) or Self._WalkHoverHelper(attempts);
end;


(*
TRSObject.Click
~~~~~~~~~~~~~~~
.. pascal:: function TRSObject.Click(leftClick: Boolean = True; attempts: Int32 = 2): Boolean;

Method used to click a TRSObject target if it's found on the mainscreen.
This hovers the TRSObject target asynchronously.

Example
-------

  //Be in ge with a ge map loaded.
  WriteLn RSObjects.GEBank.Click();
*)
function TRSObject.Click(leftClick: Boolean = True; attempts: Int32 = 2): Boolean;
begin
  Result := Self.Hover(attempts) and Self._ClickHelper(leftClick);
end;


(*
TRSObject.SelectOption
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSObject.SelectOption(action: TStringArray; attempts: Int32 = 2): Boolean;

Method used to select an option on a TRSObject target if it's found on the mainscreen.
This hovers the TRSObject target asynchronously.

Example
-------

  //Be in ge with a ge map loaded.
  WriteLn RSObjects.GEBank.SelectOption(['Collect']);
*)
function TRSObject.SelectOption(action: TStringArray; attempts: Int32 = 2): Boolean;
begin
  Self.ActionUpText := action;
  Result := Self.Hover(attempts) and Self._SelectHelper(action);
end;


(*
TRSObject.WalkClick
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSObject.WalkClick(leftClick: Boolean = True; attempts: Int32 = 2): Boolean;

Method used to walk and click a TRSObject target if it's found on the mainscreen.
This hovers the TRSObject target asynchronously.

Example
-------

  //Be in ge with a ge map loaded, preferably far away so it has to walk.
  WriteLn RSObjects.GEBank.WalkClick();
*)
function TRSObject.WalkClick(leftClick: Boolean = True; attempts: Int32 = 2): Boolean;
begin
  Result := Self.WalkHover(attempts) and Self._ClickHelper(leftClick);
end;

(*
TRSObject.WalkSelectOption
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSObject.WalkSelectOption(action: TStringArray; attempts: Int32 = 2): Boolean;

Method used to walk and select an option on a TRSObject target if it's found on the mainscreen.
This hovers the TRSObject target asynchronously.

Example
-------

  //Be in ge with a ge map loaded, preferably far away so it has to walk.
  WriteLn RSObjects.GEBank.WalkSelectOption(['Collect']);
*)
function TRSObject.WalkSelectOption(action: TStringArray; attempts: Int32 = 2): Boolean;
begin
  Self.ActionUpText := action;
  Result := Self.WalkHover(attempts) and Self._SelectHelper(action);
end;


type
(*
type TRSMMDot
~~~~~~~~~~~~~

TRSMMDot are a type of TRSWalkerObject.
This are meant to be TRSWalkerObjects that have a minimap dot so TRSMMDot.Filter.MinimapDot is True by default and shouldn't be changed.
This also have a **DotType** variable for the type of ERSMinimapDot they have (PLAYER, NPC, ITEM) and a **DotFilter** which is used to
filter mmdots in/out of circles and/or polygons so we only focus on the TRSMMDots we want.
*)
  TRSMMDot = record(TRSWalkerObject)
    ClosestDot: TPoint;
    DotType: ERSMinimapDot;
    DotFilter: TRSDotFilterArray;
  end;

(*
TRSMMDot.Setup
~~~~~~~~~~~~~~
.. pascal::
  procedure TRSMMDot.SetupEx(radius: Int32; shape: Vector3; coordinates: TPointArray); overload;
  procedure TRSMMDot.Setup(radius: Int32; size, height: Double; coordinates: TPointArray); overload;
  procedure TRSMMDot.Setup(radius: Int32; height: Double; coordinates: TPointArray); overload;

All this extend the basic `TRSWalkerObject.Setup(coordinates: TPointArray)` specifically for TRSMMDots.
For TRSMMDots this are the methods that should be used for setting them up initially.

In TRSMMDot.Setup(radius: Int32; shape: Vector3; coordinates: TPointArray),
**radius** is used to create a simple TRSDotFilterArray of that radius with **cordinates** and their center point.
**shape** should be a vector3 of the target shape in number of tiles:

- shape.X: Number of tiles of the target from west to east.

- shape.Y: Number of tiles of the target from north to south.

- shape.Z: Target height, this value has to be guessed, I recommend you try several values and debug it until it looks good to you. As some examples, player and npcs height is around 7, bank chests 4, yew/magic trees 14/16.


For NPCs that can move and are 1x2 tiles or any uneven number of tiles,
I recommend you just set **shape.X** and **shape.Y** to the largest one. So a cow I would recommend making the shape 2x2.


The other methods all call this first one with certain default values:

- Size makes shape.X and shape.Y equal to size.

- If size is omited, shape.X and shape.Y are set to 1.
*)
procedure TRSMMDot.SetupEx(radius: Int32; shape: Vector3; coordinates: TPointArray); overload;
var
  p: TPoint;
begin
  Self.Setup(coordinates);

  if Self.Filter.Skip then
    Exit;

  for p in coordinates do
    Self.DotFilter.Setup([p.X, p.Y, radius], True);

  Self.ShapeArray.SetShape(shape);
end;

procedure TRSMMDot.Setup(radius: Int32; size, height: Double; coordinates: TPointArray); overload;
begin
  Self.SetupEx(radius, [size, size, height], coordinates);
end;

procedure TRSMMDot.Setup(radius: Int32; height: Double; coordinates: TPointArray); overload;
begin
  Self.Setup(radius, 1, height, coordinates);
end;


(*
TRSMMDot._GetWMMPolys
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMMDot._GetWMMPolys(out mmTPA, dots: TPointArray; out dotFilters: TRSDotFilterArray; out floorTiles, roofTiles: TRectArray): TCuboidArray;

Internal helper TRSMMDot method used for debugging.
You probably dont need to use this directly. You can see what this does in action by calling `Debug(TRSMMDot)`.
*)
function TRSMMDot._GetWMMPolys(out mmTPA, dots: TPointArray; out dotFilters: TRSDotFilterArray; out floorTiles, roofTiles: TRectArray): TCuboidArray;
var
  me: TPoint;
  angle: Double;
begin
  me := TRSWalkerObject.Walker^.GetMyPos();
  angle := Minimap.GetCompassAngle(False);

  mmTPA := TRSWalkerObject.Walker^.WorldToMM(me, Self.Coordinates, angle);

  dotFilters.ClearExpired();
  dotFilters := TRSWalkerObject.Walker^.WorldToMM(me, Self.DotFilter, angle);
  dots := Minimap.GetFilteredDotArray(Self.DotType, dotFilters);

  floorTiles := Minimap.GetTileArrayMS(dots, Self.ShapeArray.GetShape(0), [-2, -2], angle);

  if not Self.ShapeArray.ZeroHeight() then
  begin
    roofTiles := Minimap.GetTileArrayMS(dots, Self.ShapeArray, [-2, -2], angle);
    Exit(floorTiles.GetCuboids(roofTiles));
  end;

  roofTiles := floorTiles;
  Result := floorTiles.GetCuboids();
end;

(*
TRSMMDot._GetMMPolys
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMMDot._GetMMPolys(out dots: TPointArray; out floorTiles, roofTiles: TRectArray): TCuboidArray;

Internal helper TRSMMDot method used for debugging.
You probably dont need to use this directly. You can see what this does in action by calling `Debug(TRSMMDot)`.
This is used instead of TRSMMDot._GetWMMPolys() when TRSMMDot.Filter.Walker is disabled.
*)
function TRSMMDot._GetMMPolys(out dots: TPointArray; out floorTiles, roofTiles: TRectArray): TCuboidArray;
var
  angle: Double;
begin
  angle := Minimap.GetCompassAngle(False);

  dots := Minimap.Getdots(Self.DotType);
  floorTiles := Minimap.GetTileArrayMS(dots, Self.ShapeArray.GetShape(0), [-2, -2], angle);

  if not Self.ShapeArray.ZeroHeight() then
  begin
    roofTiles := Minimap.GetTileArrayMS(dots, Self.ShapeArray, [-2, -2], angle);
    Exit(floorTiles.GetCuboids(roofTiles));
  end;

  Result := floorTiles.GetCuboids();
end;


(*
TRSMMDot.GetCuboidArray
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
  function TRSMMDot.GetCuboidArrayEx(out mmTPA, dots: TPointArray; out dotFilters: TRSDotFilterArray; out floorTiles: TRectArray; out roofTiles: TRectArray): TCuboidArray; overload;
  function TRSMMDot.GetCuboidArray(): TCuboidArray; override;

Internal TRSMMDot method responsible for returning a TCuboidArray of our target on the 3D world (on mainscreen and outside of it).
This uses the previous 2 helper methods to do this.
You will probably never need to use this directly.
You can visually see this in action by using the `Debug()` methods, this is responsible for the white lines surounding the targets.
*)
function TRSMMDot.GetCuboidArrayEx(out mmTPA, dots: TPointArray; out dotFilters: TRSDotFilterArray; out floorTiles: TRectArray; out roofTiles: TRectArray): TCuboidArray; overload;
begin
  if Self.Filter.Walker and Self.Filter.MinimapDot then
    Exit(Self._GetWMMPolys(mmTPA, dots, dotFilters, floorTiles, roofTiles));

  if Self.Filter.Walker then
    Exit(Self.GetCuboidArrayEx(floorTiles, roofTiles));

  if Self.Filter.MinimapDot then
    Exit(Self._GetMMPolys(dots, floorTiles, roofTiles));
end;

function TRSMMDot.GetCuboidArray(): TCuboidArray; override;
var
  angle: Double;
  dots: TPointArray;
begin
  if Self.Filter.Walker and Self.Filter.MinimapDot then
  begin
    angle := Minimap.GetCompassAngle(False);
    dots := Minimap.GetFilteredDotArray(Self.DotType, TRSWalkerObject.Walker^.WorldToMM(Self.DotFilter, angle));
    if dots = [] then
      Exit;

    dots := dots.SortFrom(Minimap.Center());

    Exit(Minimap.GetCuboidArrayMS(dots, Self.ShapeArray, [-2, -2], angle));
  end;

  if Self.Filter.Walker then
  begin
    Result := inherited;
    Exit;
  end;

  if Self.Filter.MinimapDot then
  begin
    dots := Minimap.GetDots(Self.DotType);
    if dots = [] then
      Exit;

    dots := dots.SortFrom(Minimap.Center());

    if Self.ShapeArray = [] then
      Self.ShapeArray.SetShape([1, 1, 1]);

    Exit(Minimap.GetCuboidArrayMS(dots, Self.ShapeArray, [-2, -2]));
  end;
end;


(*
TRSMMDot.FindEx
~~~~~~~~~~~~~~~
.. pascal:: function TRSMMDot.FindEx(out mmPoints, dots: TPointArray; out DotFilters: TRSDotFilterArray; out floorTiles: TRectArray; out roofTiles: TRectArray; out cuboidArray: TCuboidArray; out atpa: T2DPointArray): Boolean;

TRSMMDot methods used to find a TRSMMDot. If found returns true, if not returns false.
This "extended" method in particular is only meant for debugging and should be avoided outside of development/debugging.
This is what is used when you call `Debug(TRSMMDot)`.
*)
function TRSMMDot.FindEx(out mmPoints, dots: TPointArray; out DotFilters: TRSDotFilterArray; out floorTiles: TRectArray; out roofTiles: TRectArray; out cuboidArray: TCuboidArray; out atpa: T2DPointArray): Boolean;
begin
  MM2MS.SetupZoom();

  if Self.Filter.Walker or Self.Filter.MinimapDot then
  begin
    cuboidArray := Self.GetCuboidArrayEx(mmPoints, dots, dotFilters, floorTiles, roofTiles);

    if cuboidArray = [] then
      Exit;

    atpa := Self.FindOnMainScreen(cuboidArray);
  end

  else if Self.Filter.Finder then
    atpa := MainScreen.FindObject(Self.Finder).SortFrom(MainScreen.GetPlayerBox().Center());

  if Result := (atpa <> []) then
    if TRSWalkerObject.Walker <> nil then
      Self.ClosestDot := TRSWalkerObject.Walker^.MSToWorld(atpa.First().Mean()); //not the best way since we are reversing operations but will do for now.
end;

(*
TRSMMDot.Find
~~~~~~~~~~~~~
.. pascal::
  function TRSMMDot.Find(out atpa: T2DPointArray): Boolean; overload;
  function TRSMMDot.Find(): Boolean; overload;

TRSMMDot methods used to find a TRSMMDot. If found returns true, if not returns false.

Example
-------

  WriteLn RSNPCs.LumbridgeCook.Find(atpa); //Be in lumbridge castle and with a walker setup there.
  Debug(atpa);
*)
function TRSMMDot.Find(out atpa: T2DPointArray): Boolean; overload;
var
  cuboidArray: TCuboidArray;
begin
  MM2MS.SetupZoom();

  if Self.Filter.Walker or Self.Filter.MinimapDot then
  begin
    cuboidArray := Self.GetCuboidArray();

    if cuboidArray = [] then
      Exit;

    atpa := Self.FindOnMainScreen(cuboidArray);
  end

  else if Self.Filter.Finder then
  begin
    atpa := MainScreen.FindObject(Self.Finder).SortFrom(MainScreen.GetPlayerBox().Center());
  end;

  if Result := (atpa <> []) then
    if TRSWalkerObject.Walker <> nil then
      Self.ClosestDot := TRSWalkerObject.Walker^.MSToWorld(ATPA[0].Mean());
end;

function TRSMMDot.IsVisible(): Boolean; overload;
var
  cuboidArray: TCuboidArray;
begin
  MM2MS.SetupZoom();

  if Self.Filter.Walker or Self.Filter.MinimapDot then
  begin
    cuboidArray := Self.GetCuboidArray();

    if cuboidArray = [] then
      Exit;

    Exit(Self.OnMainScreen(cuboidArray));
  end;

  if Self.Filter.Finder then
    Result := MainScreen.FindObject(Self.Finder) <> [];
end;

(*
TRSMMDot._GetBaseRecord
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMMDot._GetBaseRecord(): TRSMMDot;

Internal method used for casting custom TRSMMDots back to the base record.
*)
function TRSMMDot._GetBaseRecord(): TRSMMDot;
begin
  Result := Self;
end;

(*
TRSMMDot.Draw
~~~~~~~~~~~~~
.. pascal:: procedure TRSMMDot.Draw(out bitmap: TMufasaBitmap);

Internal method used to draw found TRSMMDot in a TMufasaBitmap.

Example
-------

  Bitmap.FromClient()
  RSNPCs.LumbridgeCook.Draw(Bitmap); //Be in Lumbridge castle and with a walker setup there.
  Bitmap.Debug();
  Bitmap.Free();
*)
procedure TRSMMDot.Draw(out Bitmap: TMufasaBitmap);
var
  mmPoints, dots: TPointArray;
  dotFilters: TRSDotFilterArray;
  floorTiles, roofTiles: TRectArray;
  cuboidArray: TCuboidArray;
  atpa: T2DPointArray;
  i: Int32;
begin
  Self.FindEx(mmPoints, dots, dotFilters, floorTiles, roofTiles, cuboidArray, atpa);

  //Minimap drawing
  for i := 0 to High(mmPoints) do
    bitmap.DrawCrosshairs(mmPoints[i], 4, SRLColors.BLUE);

  for i := 0 to High(dotFilters) do
  begin
    if dotFilters[i].HasTimer and dotFilters[i].Timer.IsFinished() then
      Continue;

    if dotFilters[i].TPA <> [] then
    begin
      if dotFilters[i].Inside then
        bitmap.DrawTPA(dotFilters[i].TPA.Connect(), SRLColors.LIME)
      else
        bitmap.DrawTPA(dotFilters[i].TPA.Connect(), SRLColors.RED);
    end;

    if dotFilters[i].Circle <> [] then
    begin
      if dotFilters[i].Inside then
        bitmap.DrawCircle(dotFilters[i].Circle.Mean(), dotFilters[i].Circle.Radius, SRLColors.LIME)
      else
        bitmap.DrawCircle(dotFilters[i].Circle.Mean(), dotFilters[i].Circle.Radius, SRLColors.RED);
    end;
  end;

  bitmap.DrawATPA(atpa);
  if atpa <> [] then
    bitmap.DrawTPA(atpa[0], SRLColors.BLACK);

  for i := 0 to High(dots) do
  begin
    bitmap.DrawCrosshairs(dots[i], 2, SRLColors.GREEN_SPRING);
    bitmap.DrawRect(floorTiles[i], SRLColors.WHITE);
    bitmap.DrawRect(roofTiles[i], SRLColors.WHITE);
    bitmap.DrawTPA(cuboidArray[i].Connect(), SRLColors.YELLOW);
  end;
end;


(*
TRSMMDot.SaveDebug
~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSMMDot.SaveDebug();

Saves a debug image of the TRSMMDot to Simba\Screenshots\RSMMDots

Example
-------

  RSNPCs.LumbridgeCook.SaveDebug(); //Be in Lumbridge castle and with a walker setup there.
*)
procedure TRSMMDot.SaveDebug();
var
  Bitmap: TMufasaBitmap;
  filePath: String;
begin
  Bitmap.FromClient();

  Self.Draw(Bitmap);
  Bitmap.DrawBoxFilled(Chat.GetDisplayNameBox(), False, $00FFFF);

  filePath := GetScreenshotPath('TRSMMDot');
  Bitmap.SaveToFile(filePath);
  WriteLn('Send ', filePath, ' to Torwent on discord!');
  Bitmap.Debug();

  WriteLn('Position: ', TRSWalkerObject.Walker^.GetMyPos(), ' ZoomLevel: ', MM2MS.ZoomLevel);
  WriteLn('RSObject: ', Self);
  Bitmap.Free();
end;


(*
TRSMMDot._AsyncHoverHelper
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
  function TRSMMDot._AsyncHoverHelper(): Boolean;
  function TRSMMDot._AsyncHoverHelper(attempts: Int32): Boolean; overload;

Internal helper methods used to hover a TRSMMDot target asynchronously.
You should not use this directly.
*)
function TRSMMDot._AsyncHoverHelper(): Boolean;
var
  shouldExit: Boolean;
  atpa: T2DPointArray;
begin
  if Self.Filter.MinimapDot and (Minimap.GetDots(Self.DotType) = []) then
    Exit;

  Result := Self._UpTextCheck(shouldExit);
  if shouldExit then
    Exit;

  if Self.Find(atpa) then
  begin
    AsyncMouse.Move(ATPA[0].RandomValue());
    Result := True;
  end;
end;

function TRSMMDot._AsyncHoverHelper(attempts: Int32): Boolean; overload;
  function GetDestination(attempt: Int32; atpa: T2DPointArray): TPointArray;
  begin
    if attempt < 2 then
      Exit(Result := atpa[0]); // 0 for the closest one.

    if Length(atpa) > (attempt - 2) then
      Exit(atpa[attempt - 2]);

    Result := atpa.RandomValue();
  end;
var
  shouldExit: Boolean;
  attempt: Int32;
  atpa: T2DPointArray;
  tpa: TPointArray;
  angle: Double;
begin
  if Self.Filter.MinimapDot and (Minimap.GetDots(Self.DotType) = []) then
    Exit;

  Result := Self._UpTextCheck(shouldExit);
  if shouldExit then
    Exit;

  for attempt := 0 to attempts do
  begin
    if Self.Find(atpa) then
    begin
      tpa := GetDestination(attempt, atpa);

      if Self.DotType = ERSMinimapDot.ITEM then
        ASyncMouse.Move(tpa.Mean())
      else
        AsyncMouse.Move(tpa.RandomValue());

      while AsyncMouse.IsMoving() or tpa.Contains(AsyncMouse.Position()) do
      begin
        if Self.Filter.UpText and MainScreen.IsUpText(Self.UpText) then
          Exit(True);

        if not Self.Find(atpa) then
          Continue;
        tpa := GetDestination(attempt, atpa);

        if Self.DotType = ERSMinimapDot.ITEM then
          AsyncMouse.ChangeDestination(tpa.Mean())
        else
          AsyncMouse.ChangeDestination(tpa.RandomValue());
        //Wait(100); //Delay for less CPU usage??? Have to think about it.
      end;

      if not Self.Filter.UpText then
        Exit(True);
    end;

    if MainScreen.IsUpText(Self.UpText) then
      Exit(True);

    //will rotate the screen for the last attempt if hasn't hovered properly yet
    if attempt = (attempts - 1) then
    begin
      angle := Minimap.GetCompassAngle() + Random(-50, 50);
      Minimap.SetCompassAngle(angle, 10);
    end;
  end;
end;


(*
TRSMMDot._HoverHelper
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMMDot._HoverHelper(attempts: Int32): Boolean;

Internal helper method used to hover a TRSMMDot target.
You should not use this directly.
*)
function TRSMMDot._HoverHelper(attempts: Int32): Boolean;
var
  shouldExit: Boolean;
  attempt: Int32;
  atpa: T2DPointArray;
  tpa: TPointArray;
  angle: Double;
begin
  if Self.Filter.MinimapDot and (Minimap.GetDots(Self.DotType) = []) then
    Exit;

  Result := Self._UpTextCheck(shouldExit);
  if shouldExit then
    Exit;

  for attempt := 0 to attempts do
  begin
    if Self.Find(atpa) then
    begin
      if attempt < 2 then
        tpa := atpa[0]
      else if Length(atpa) > (attempt - 2) then
        tpa := atpa[attempt - 2]
      else
        tpa := atpa.RandomValue();

      if Self.DotType = ERSMinimapDot.ITEM then
        Mouse.Move(tpa.Mean())
      else
        Mouse.Move(tpa.RandomValue());

      if not Self.Filter.UpText then
        Exit(True);
    end;

    if MainScreen.IsUpText(Self.UpText) then
      Exit(True);

    //will rotate the screen for the last attempt if hasn't hovered properly yet
    if attempt = (attempts - 1) then
    begin
      angle := Minimap.GetCompassAngle() + Random(-50, 50);
      Minimap.SetCompassAngle(angle, 10);
    end;
  end;
end;

(*
TRSMMDot._AsyncWalkHoverHelper
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMMDot._AsyncWalkHoverHelper(attempts: Int32): Boolean;

Internal helper method used to walk and hover a TRSMMDot target asynchronously.
You should not use this directly.

This is responsible for deciding wether we should walk to a TRSMMDot target or not before attempting to hover it asynchronously.
*)
function TRSMMDot._AsyncWalkHoverHelper(attempts: Int32): Boolean;
  function GetDestination(attempt: Int32; atpa: T2DPointArray): TPointArray;
  begin
    if attempt < 2 then
      Exit(atpa[0]); // 0 for the closest one.

    if Length(atpa) > (attempt - 2) then
      Exit(atpa[attempt - 2]);

    Result := atpa.RandomValue();
  end;
var
  shouldExit: Boolean;
  attempt: Int32;
  atpa: T2DPointArray;
  tpa: TPointArray;
  angle: Double;
begin
  if not Self.Filter.Walker then
    Exit(Self._HoverHelper(attempts));

  Result := Self._WalkUpTextCheck(shouldExit);
  if shouldExit then
    Exit;

  for attempt := 0 to attempts do
  begin
    if Self.Find(atpa) then
    begin
      tpa := GetDestination(attempt, atpa);

      if Self.DotType = ERSMinimapDot.ITEM then
        ASyncMouse.Move(tpa.Mean())
      else
        AsyncMouse.Move(tpa.RandomValue());

      while AsyncMouse.IsMoving() or tpa.Contains(AsyncMouse.Position()) do
      begin
        if Self.Filter.UpText and MainScreen.IsUpText(Self.UpText) then
          Exit(True);

        if not Self.Find(atpa) then
          Continue;
        tpa := GetDestination(attempt, atpa);

        if Self.DotType = ERSMinimapDot.ITEM then
          AsyncMouse.ChangeDestination(tpa.Mean())
        else
          AsyncMouse.ChangeDestination(tpa.RandomValue());
        //Wait(100); //Delay for less CPU usage??? Have to think about it.
      end;

      if not Self.Filter.UpText then
        Exit(True);
    end;

    if MainScreen.IsUpText(Self.UpText) then
      Exit(True);

    if not TRSWalkerObject.Walker^.AtTile(Self.Coordinates, 50) then
    begin
      TRSWalkerObject.Walker^.WebWalk(Self.Coordinates, 30, 0.15);
      Continue;
    end;

    if attempt = (attempts - 1) then
    begin
      if not TRSWalkerObject.Walker^.AtTile(Self.Coordinates, 25) then
      begin
        TRSWalkerObject.Walker^.WebWalk(Self.Coordinates, 25, 0.15);
        Continue;
      end;

      angle := Minimap.GetCompassAngle() + Random(-50, 50);
      Minimap.SetCompassAngle(angle, 10);
    end;
  end;
end;



(*
TRSMMDot._WalkHoverHelper
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMMDot._WalkHoverHelper(attempts: Int32): Boolean;

Internal helper method used to walk and hover a TRSMMDot target.
You should not use this directly.

This is responsible for deciding wether we should walk to a TRSMMDot target or not before attempting to hover it.
*)
function TRSMMDot._WalkHoverHelper(attempts: Int32): Boolean;
var
  shouldExit: Boolean;
  attempt: Int32;
  atpa: T2DPointArray;
  tpa: TPointArray;
  angle: Double;
begin
  if not Self.Filter.Walker then
    Exit(Self._HoverHelper(attempts));

  Result := Self._WalkUpTextCheck(shouldExit);
  if shouldExit then
    Exit;

  for attempt := 0 to attempts do
  begin
    if Self.Find(atpa) then
    begin
      if attempt < 2 then
        tpa := atpa[0]
      else if Length(atpa) > (attempt - 2) then
        tpa := atpa[attempt - 2]
      else
        tpa := atpa.RandomValue();

      if Self.DotType = ERSMinimapDot.ITEM then
        Mouse.Move(tpa.Mean())
      else
        Mouse.Move(tpa.RandomValue());

      if not Self.Filter.UpText then
        Exit(True);
    end;

    if MainScreen.IsUpText(Self.UpText) then
      Exit(True);

    if not TRSWalkerObject.Walker^.AtTile(Self.Coordinates, 50) then
    begin
      TRSWalkerObject.Walker^.WebWalk(Self.Coordinates, 30, 0.15);
      Continue;
    end;

    if attempt = (attempts - 1) then
    begin
      if not TRSWalkerObject.Walker^.AtTile(Self.Coordinates, 25) then
      begin
        TRSWalkerObject.Walker^.WebWalk(Self.Coordinates, 25, 0.15);
        Continue;
      end;

      angle := Minimap.GetCompassAngle() + Random(-50, 50);
      Minimap.SetCompassAngle(angle, 10);
    end;
  end;
end;


(*
TRSMMDot.AsyncHover
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMMDot.AsyncHover(): Boolean;

Method used to asynchronously hover a TRSMMDot target if it's found on the mainscreen.
AsyncMouse is very powerful but you shouldn't use it without a good reason for it.
NPCs are a good reason because they often move while the mouse is moving towards them.

Example
-------

  //Be in Lumbridge castle with a walker setup there.
  RSNPCs.LumbridgeCook.AsyncHover();
  repeat
    WriteLn 'This will print while the mouse is moving because it's asynchronously!';
  until MainScreen.IsUpText('Exch');
*)
function TRSMMDot.AsyncHover(): Boolean;
begin
  Result := Self._AsyncHoverHelper();
end;

(*
TRSMMDot.Hover
~~~~~~~~~~~~~~
.. pascal:: function TRSMMDot.Hover(attempts: Int32 = 2; async: Boolean = True): Boolean;

Method used to hover a TRSMMDot target if it's found on the mainscreen.
It can hover synchronously and asynchronously.
For NPCs that move, asynchronously is highly recommended.

Example
-------

  //Be in Lumbridge castle with a walker setup there.
  RSNPCs.LumbridgeCook.Hover(2, true);
  repeat
    WriteLn 'This will print while the mouse is moving because it's asynchronously!';
  until MainScreen.IsUpText('ook');

  Mouse.Move(Inventory.Bounds());

  RSNPCs.LumbridgeCook.Hover(2, False);
  repeat
    WriteLn 'This will only print after the mouse has finished moving because it's not asynchronous!';
  until MainScreen.IsUpText('ook');
*)
function TRSMMDot.Hover(attempts: Int32 = 2; Async: Boolean = USE_ASYNC_HOVER): Boolean; overload;
begin
  if ChooseOption.IsOpen() then
  begin
    if Self.Filter.UpText and ChooseOption.HasOption(Self.UpText) then
      Exit(True);
    ChooseOption.Close();
  end;

  if Self.Filter.UpText and (TRSWalkerObject.CurrentUpText <> Self.UpText) then
    TRSWalkerObject.CurrentUpText := Self.UpText;

  if Self.Filter.Walker and not TRSWalkerObject.Walker^.MakePointVisible(Self.Coordinates) then
    Exit;

  Result := (Async and Self._AsyncHoverHelper(attempts)) or Self._HoverHelper(attempts);
end;

(*
TRSMMDot.WalkHover
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMMDot.WalkHover(attempts: Int32 = 2; async: Boolean = True): Boolean;

Method used to walk and hover a TRSMMDot target if it's found on the mainscreen after walking.
It can hover synchronously and asynchronously.
Keep in mind the walking portion is not made asynchronously, only the final moments of the method
when it's time to hover the TRSMMDot target can be made asynchronously.

For NPCs that move, asynchronously is highly recommended.

Example
-------

  //Be in Lumbridge castle with a walker setup there.
  rsw.WebWalk(WaspWeb.LOCATION_LUMBRIDGE);

  RSNPCs.LumbridgeCook.WalkHover(2, true); //keep in mind that walking is not async.
  repeat
    WriteLn 'This will print while the mouse is moving because it's asynchronously!';
  until MainScreen.IsUpText('ook');

  rsw.WebWalk(WaspWeb.LOCATION_LUMBRIDGE);

  RSNPCs.LumbridgeCook.WalkHover(2, False);
  repeat
    WriteLn 'This will only print after the mouse has finished moving because it's not asynchronous!';
  until MainScreen.IsUpText('ook');
*)
function TRSMMDot.WalkHover(attempts: Int32 = 2; Async: Boolean = USE_ASYNC_HOVER): Boolean;
begin
  if ChooseOption.IsOpen() then
  begin
    if Self.Filter.UpText and ChooseOption.HasOption(Self.UpText) then
      Exit(True);
    ChooseOption.Close();
  end;

  if not Self.Filter.Walker then
    Exit;

  if Self.Filter.UpText and (TRSWalkerObject.CurrentUpText <> Self.UpText) then
    TRSWalkerObject.CurrentUpText := Self.UpText;

  if not TRSWalkerObject.Walker^.MakePointVisible(Self.Coordinates) and
     not TRSWalkerObject.Walker^.WebWalk(Self.Coordinates, 30, 0.15) then
      Exit;

  Result := (Async and Self._AsyncWalkHoverHelper(attempts)) or Self._WalkHoverHelper(attempts);
end;


(*
TRSMMDot.Click
~~~~~~~~~~~~~~
.. pascal:: function TRSMMDot.Click(leftClick: Boolean = True; attempts: Int32 = 2): Boolean;

Method used to click a TRSMMDot target if it's found on the mainscreen.
This hovers the TRSMMDot target asynchronously.

For NPCs that move, asynchronously is highly recommended.

Example
-------

  //Be in Lumbridge castle with a walker map of it loaded.
  WriteLn RSNPCs.LumbridgeCook.Click();
*)
function TRSMMDot.Click(leftClick: Boolean = True; attempts: Int32 = 2): Boolean;
begin
  Result := Self.Hover(attempts) and Self._ClickHelper(leftClick);
end;

(*
TRSMMDot.SelectOption
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMMDot.SelectOption(action: TStringArray; attempts: Int32 = 2): Boolean;

Method used to select an option on a TRSMMDot target if it's found on the mainscreen.
This hovers the TRSMMDot target asynchronously.

For NPCs that move, asynchronously is highly recommended.

Example
-------

  //Be in Lumbridge castle with a walker map of it loaded.
  WriteLn RSNPCs.LumbridgeCook.SelectOption(['Examine']);
*)
function TRSMMDot.SelectOption(action: TStringArray; attempts: Int32 = 2): Boolean;
begin
  Self.ActionUpText := action;
  Result := Self.Hover(attempts) and Self._SelectHelper(action);
end;


(*
TRSMMDot.WalkClick
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMMDot.WalkClick(leftClick: Boolean = True; attempts: Int32 = 2): Boolean;

Method used to walk and click a TRSMMDot target if it's found on the mainscreen.
This hovers the TRSMMDot target asynchronously.

For NPCs that move, asynchronously is highly recommended.

Example
-------

  //Be in Lumbridge castle with a walker map of it loaded.
  WriteLn RSNPCs.LumbridgeCook.WalkClick();
*)
function TRSMMDot.WalkClick(leftClick: Boolean = True; attempts: Int32 = 2): Boolean;
begin
  Result := Self.WalkHover(attempts) and Self._ClickHelper(leftClick);
end;

(*
TRSMMDot.WalkSelectOption
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMMDot.WalkSelectOption(action: TStringArray; attempts: Int32 = 2): Boolean;

Method used to walk and select an option on a TRSMMDot target if it's found on the mainscreen.
This hovers the TRSMMDot target asynchronously.

Example
-------

  //Be in Lumbridge castle with a walker map of it loaded.
  WriteLn RSNPCs.LumbridgeCook.WalkSelectOption(['Examine']);
*)
function TRSMMDot.WalkSelectOption(action: TStringArray; attempts: Int32 = 2): Boolean;
begin
  Self.ActionUpText := action;
  Result := Self.WalkHover(attempts) and Self._SelectHelper(action);
end;


type
(*
type TRSNPC
~~~~~~~~~~~

TRSNPC are a type of TRSMMDot and TRSWalkerObject.
This are meant to be TRSMMDot that have a yellow minimap dot so TRSNPC.Filter.MinimapDot is True by default and shouldn't be changed.
*)
  TRSNPC = type TRSMMDot;
  TRSNPCArray = array of TRSNPC;
  PRSNPC = ^TRSNPC;
  PRSNPCArray = array of PRSNPC;

(*
type TRSGroundItem
~~~~~~~~~~~~~~~~~~

TRSGroundItem are a type of TRSMMDot and TRSWalkerObject.
This are meant to be TRSMMDot that have a red minimap dot so TRSGroundItem.Filter.MinimapDot is True by default and shouldn't be changed.
*)
  TRSGroundItem = type TRSMMDot;
  TRSGroundItemArray = array of TRSGroundItem;
  PRSGroundItem = ^TRSGroundItem;
  PRSGroundItemArray = array of PRSGroundItem;

(*
type TRSPlayer
~~~~~~~~~~~~~~

TRSPlayer are a type of TRSMMDot and TRSWalkerObject.
This are meant to be TRSMMDot that have a white minimap dot so TRSPlayer.Filter.MinimapDot is True by default and shouldn't be changed.
*)
  TRSPlayer = type TRSMMDot;
  TRSPlayerArray = array of TRSPlayer;

procedure PRSNPCArray.Del(const Index: Integer; const Count: Integer = 1);
begin
  Delete(Self, Index, Count);
end;

procedure PRSGroundItemArray.Del(const Index: Integer; const Count: Integer = 1);
begin
  Delete(Self, Index, Count);
end;


(*
TRSNPC.Setup
~~~~~~~~~~~~
.. pascal:: procedure TRSNPC.Setup(upText: TStringArray); override;

TRSNPC setup method that extends TRSWalkerObject.Setup(upText: TStringArray);
This is the method that should be used to setup TRSNPCs as it ensures that the
TRSNPC.DotType is ERSMinimapDot.NPC.
*)
procedure TRSNPC.Setup(upText: TStringArray); override;
begin
  if Self.Filter.Skip then
    Exit;

  Self._Setup();

  Self.UpText := upText;

  Self.Finder.ClusterDistance := 3;
  Self.Finder.Erode := 2;
  Self.Finder.Grow := 4;
  Self.DotType := ERSMinimapDot.NPC;
end;

(*
TRSGroundItem.Setup
~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSGroundItem.Setup(upText: TStringArray); override;

TRSGroundItem setup method that extends TRSWalkerObject.Setup(upText: TStringArray);
This is the method that should be used to setup TRSGroundItems as it ensures that the
TRSGroundItem.DotType is ERSMinimapDot.ITEM.
*)
procedure TRSGroundItem.Setup(upText: TStringArray); override;
begin
  if Self.Filter.Skip then
    Exit;

  Self._Setup();

  Self.UpText := upText;

  Self.Finder.ClusterDistance := 3;
  Self.Finder.Erode := 2;
  Self.Finder.Grow := 4;
  Self.DotType := ERSMinimapDot.ITEM;
end;

(*
TRSPlayer.Setup
~~~~~~~~~~~~~~~
.. pascal:: procedure TRSPlayer.Setup(upText: TStringArray); override;

TRSPlayer setup method that extends TRSWalkerObject.Setup(upText: TStringArray);
This is the method that should be used to setup TRSPlayers as it ensures that the
TRSPlayer.DotType is ERSMinimapDot.PLAYER.
*)
procedure TRSPlayer.Setup(upText: TStringArray); override;
begin
  if Self.Filter.Skip then
    Exit;

  Self._Setup();

  Self.UpText := upText;

  Self.Finder.ClusterDistance := 3;
  Self.Finder.Erode := 2;
  Self.Finder.Grow := 4;
  Self.DotType := ERSMinimapDot.PLAYER;
end;


function PRSNPCArray.IndexOf(value: TPoint): Int32; overload;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    if Self[i]^.Coordinates.Contains(value) then
      Exit(i);

  Result := -1;
end;

function PRSNPCArray.GetClosest(): TRSNPC;
var
  me: TPoint;
  i, hi: Int32;
  tpa, tmp: TPointArray;
begin
  if Self = [] then
    Exit;

  if TRSWalkerObject.Walker = nil then
    Exit;

  me := TRSWalkerObject.Walker^.GetMyPos();

  hi := High(Self);
  for i := 0 to hi do
  begin
    if Self[i]^.Coordinates = [] then
    begin
      Self.Del(i); //remove the empty ones so next times are faster since we don't have to check them.
      hi -= 1;
      Continue;
    end;

    tmp := Self[i]^.Coordinates.SortFrom(me);
    tpa += tmp.First();
  end;

  if tpa = [] then
    Exit;

  tpa := tpa.SortFrom(me);
  Result := Self[Self.IndexOf(tpa.First())]^;
end;

(*
Debug
~~~~~
.. pascal::
  procedure Debug(rsobject: TRSObject); overload;
  procedure Debug(mmdot: TRSMMDot); overload;

Methods used to debug TRSObjects and TRSMMDots.

Example
-------

  //Run in ge with a walker map setup there.
  Debug(RSObjects.GEBank);

  //Run in Lumbridge castle with a walker map setup there.
  Debug(RSNPCs.LumbridgeCook);
*)
procedure Debug(rsobject: TRSObject); overload;
var
  bitmap: TMufasaBitmap;
begin
  bitmap.FromClient();
  rsobject.Draw(bitmap);
  bitmap.Debug();
  bitmap.Free();
end;

procedure Debug(mmdot: TRSMMDot); overload;
var
  bitmap: TMufasaBitmap;
begin
  bitmap.FromClient();
  mmDot.Draw(bitmap);
  bitmap.Debug();
  bitmap.Free();
end;

var
  DebugObjectArray: TRSObjectArray;
  DebugMMDotArray: array of TRSMMDot;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
var
  DebugObject: TRSObject;
  DebugDot: TRSMMDot;
begin
  inherited;

  for DebugObject in DebugObjectArray do
    DebugObject.Draw(Bitmap);

  for DebugDot in DebugMMDotArray do
    DebugDot.Draw(Bitmap);
end;
