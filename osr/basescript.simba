{$DEFINE WL_BASESCRIPT_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  TBaseScript = record
    Name: String;
    Version: String;

    IsSetup: Boolean;

    TimeRunning: TStopwatch;
    StatsDebugTick: Int64;

    Action, PreviousAction: String;
    ExtraInfo: String;

    ActionProfit: Int32;
    TotalActions: Int32;
    TotalProfit: Int32;

    TimeLimit: Int64;
    ActionLimit: Int32;
  end;

  TBaseWalkerScript = record(TBaseScript)
    RSW: TRSWalker;
  end;

  TBaseBankScript = record(TBaseWalkerScript)
    ScriptBank:   PRSObject;    //Current bank for the script.
    ScriptBanker: PRSNPC;       //Current banker npc for the script.

    BankTab: Int32;           //BankTab cache.

    ItemLeftAmount: Int32;         //Used to cache items left to make/build/whatever to pre-hover the bank.
    HoveringBank: Boolean;    //Used to cache uptext result.
    BankEmpty: Boolean;       //Used to cache if Bank doesn't have more of a certain item.
    CollectEmpty: Boolean;    //Used to cache if CollectBox doesn't have more of a certain item.
    CollectTimer: TCountDown; //Used to reset CollectEmpty after a while.
  end;


procedure TBaseScript.Init(MaxActions: Int32; MaxTime: Int64); //override me to add more stuff.
begin
  if MaxActions > -1 then ActionLimit := TotalActions + MaxActions
  else ActionLimit := -1;

  TimeRunning.Start;

  if MaxTime > -1 then TimeLimit := TimeRunning.ElapsedTime + MaxTime
  else TimeLimit := -1;


  WL.Activity.Init(260000);

  if IsSetup then Exit;
  IsSetup := True;

  {$IFDEF SRL_USE_REMOTEINPUT}
  if RemoteInputEnabled then
  begin
    RSClient.RemoteInput.Setup;
    if ProgressReportEnabled then ProgressReport.Setup;
  end;
  {$ENDIF}

  Antiban.Setup;

  //override me to add more stuff.
end;

function TBaseScript.DoAntiban(CheckBreaks: Boolean = True; CheckSleeps: Boolean = True): Boolean;
begin
  Antiban.DismissRandom;
  TimeRunning.Pause;
  WL.Activity.Pause;

  try
    Result := Antiban.DoAntiban(CheckBreaks, CheckSleeps);
  finally
    TimeRunning.Resume;
    WL.Activity.Resume;
  end;
end;

procedure TBaseScript.ProcessWhileWaiting;
var
  Str: String;
  ProgressArray: TStringArray;

  TitleLength: Int32;
  ElapsedTime: UInt64;
begin
  TotalProfit := TotalActions * ActionProfit;

  if (GetTickCount - StatsDebugTick) > 1000 then
  begin
    ElapsedTime := TimeRunning.ElapsedTime;

    Str := Name + ' ' + Version;
    TitleLength := Str.Len;

    Str    := PadL((' ' + Str + ' '), 10, ' ');
    Str    := PadR(Str, 90 - TitleLength, ' ');

    TitleLength   := Str.Len;

    ProgressArray += Str;

    ProgressArray += PadR((' Action        : ' + Action), Round(TitleLength/2), ' ') +
                           ' Runtime       : ' + SRL.MsToTime(ElapsedTime, Time_Short);

    ProgressArray += PadR((' Total Actions : ' + ToStr(TotalActions)), Round(TitleLength/2), ' ') +
                           ' Actions/Hour  : ' + ToStr(NumberPerHour(TotalActions, ElapsedTime));

    ProgressArray += PadR((' Total Profit  : ' + SRL.FormatNumber(TotalProfit)), Round(TitleLength/2), ' ') +
                           ' Profit/Hour   : ' + SRL.FormatNumber(NumberPerHour(TotalProfit, ElapsedTime));

    ProgressArray += ' Join WaspBots on Discord: https://discord.gg/Duv2Mhzn9X';
    ProgressArray += ' BioHash       : ' + ToStr(BioHash);

    ProgressArray += ExtraInfo;

    {$IFDEF SRL_USE_REMOTEINPUT}
    if RemoteInputEnabled and ProgressReportEnabled and not ScriptDebugEnabled then
      ProgressReport.Update(ProgressArray);
    {$ENDIF}

    if Action <> PreviousAction then
      for Str in ProgressArray do
        Writeln(Str); 

    PreviousAction := Action;
    
    StatsDebugTick := GetTickCount;
  end;

  if ScriptDebugEnabled then SRL.Debug(RSClient.Image);
end;

function TBaseScript.ShouldStop: Boolean;
begin
  Result := ((ActionLimit > -1) and (TotalActions >= ActionLimit)) or
            ((TimeLimit > -1) and (TimeRunning.ElapsedTime >= TimeLimit));
end;


procedure TBaseWalkerScript.Init(MaxActions: Int32; MaxTime: Int64); override;//override me to add more stuff.
begin
  inherited;

  RSW.OnWalkingEvent := @WalkerTasks;
end;



procedure TBaseBankScript.Init(MaxActions: Int32; MaxTime: Int64); override;//override me to add more stuff.
begin
  inherited;

  BankTab := -1;
  CollectTimer.Init(600000);

  //override me to add more stuff.
end;

procedure TBaseBankScript.SetupWLBanks;
begin
  case CurrentBankLocation of
    EWaspBankLocation.AL_KHARID:
      begin
		    RSW.Setup('mainland');
		    ScriptBank := @RSObjects.AlKharidBank;
      end;

    EWaspBankLocation.ARDOUGNE_NORTH:
      begin
		    RSW.Setup('x5723y3038');
		    ScriptBank := @RSObjects.ArdougneNorthBank;
      end;

    EWaspBankLocation.ARDOUGNE_SOUTH:
      begin
		    RSW.Setup('x5723y3038');
		    ScriptBank := @RSObjects.ArdougneSouthBank;
      end;

    EWaspBankLocation.CASTLE_WARS:
      begin
		    RSW.Setup('mainland');
		    ScriptBank := @RSObjects.CastleWarsBank;
      end;

    EWaspBankLocation.CATHERBY:
      begin
		    RSW.Setup('mainland');
		    ScriptBank := @RSObjects.CatherbyBank;
      end;

    EWaspBankLocation.CRAFT_GUILD:
      begin
		    RSW.Setup('x6953y3166');
		    ScriptBank := @RSObjects.CraftGuildBank;
      end;

    EWaspBankLocation.DRAYNOR:
      begin
		    RSW.Setup('x7617y3214');
		    ScriptBank := @RSObjects.DraynorBank;
      end;

    EWaspBankLocation.EDGEVILLE:
      begin
		    RSW.Setup('x7536y2363');
		    ScriptBank := @RSObjects.EdgevilleBank;
      end;

    EWaspBankLocation.FALADOR_EAST:
      begin
		    RSW.Setup('x7051y2796');
		    ScriptBank := @RSObjects.FaladorEastBank;
      end;

    EWaspBankLocation.FALADOR_WEST:
      begin
		    RSW.Setup('x7051y2796');
		    ScriptBank := @RSObjects.FaladorWestBank;
      end;

    EWaspBankLocation.GRAND_EXCHANGE:
      begin
		    RSW.Setup('x7789y2306');
		    ScriptBank := @RSObjects.GEBank;
      end;

    EWaspBankLocation.LUNAR_ISLAND:
      begin
		    RSW.Setup('x4127y1027');
		    ScriptBank := @RSObjects.LunarBank;
      end;

    EWaspBankLocation.MINING_GUILD:
      begin
		    RSW.Setup('x6291y497');
		    ScriptBank := @RSObjects.MiningGuildBank;
      end;

    EWaspBankLocation.PRIFDDINNAS:
      begin
		    RSW.Setup('x3583y1905');
		    ScriptBank := @RSObjects.PrifddinasBank;
      end;

    EWaspBankLocation.SEERS:
      begin
		    RSW.Setup('mainland');
		    ScriptBank := @RSObjects.SeersBank;
      end;

    EWaspBankLocation.TZHAAR:
      begin
		    RSW.Setup('x4333y310');
		    ScriptBank := @RSObjects.TzhaarBank;
      end;

    EWaspBankLocation.VARROCK_EAST:
      begin
		    RSW.Setup('x7536y2363');
		    ScriptBank := @RSObjects.VarrockEastBank;
      end;

    EWaspBankLocation.VARROCK_WEST:
      begin
		    RSW.Setup('x7789y2306');
		    ScriptBank := @RSObjects.VarrockWestBank;
      end;

    EWaspBankLocation.WINTERTODT:
      begin
		    RSW.Setup('x1549y224');
		    ScriptBank := @RSObjects.WintertodtBank;
      end;
  end;
end;


function TBaseBankScript.Terminate: Boolean;//override me to add more stuff.
begin
  for 0 to 5 do
  begin
    if MainScreen.HasInterface then
    begin
      if Result := Bank.IsOpen then Break
      else MainScreen.CloseInterface;
    end;

    if Result := Bank.WalkOpen(ScriptBank) then Break;
  end;
  //override me to add more stuff.
end;

procedure TBaseBankScript.CountItemsLeft(Item: TRSItem);
begin
  ItemLeftAmount := Inventory.CountItem(Item);
end;

function TBaseBankScript.ShouldHover: Boolean;
begin
  Result := ((ItemLeftAmount = 1) and SRL.Dice(10 + (90 * BioHash))) or
            ((ItemLeftAmount = 2) and SRL.Dice(5 + (75 * BioHash))) or
            ((ItemLeftAmount = 3) and SRL.Dice(5 + (60 * BioHash))) or
            ((ItemLeftAmount = 4) and SRL.Dice(45 * BioHash)) or
            ((ItemLeftAmount = 5) and SRL.Dice(30 * BioHash)) or
            ((ItemLeftAmount = 6) and SRL.Dice(10 * BioHash)) or
            SRL.Dice(5 * BioHash);
end;


function TBaseBankScript.Hover: Boolean;
begin
  Result := HoveringBank := Bank.Hover(ScriptBank);
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  MM2MS.SetupZoom;
  if (Bitmap = RSClient.Image) then
    Bitmap.Clear;

  inherited(Bitmap);
end;
