(*
Items Extensions
================
This file contains useful methods to extend the **TRSItem** and allow things like 'Prayer potion(1..4)' to be used.
*)
{$DEFINE WL_ITEMS_EX_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

(*
TRSItem.Reorder
~~~~~~~~~~~~~~~
.. pascal:: function TRSItem.Reorder(LowToHi: Boolean = True): TRSItem;

Used to retrieve reordered items.
Items that have several "doses" or "portions" like a Saradomin brew (1..4) might need to be reordered sometimes.

When we want to consume them, we usually want to prioritize lower dosage items to get inventory space.
However when we are withdrawing it from the bank, we want to prioritize the highest dosage items to maximize trips length.

This function reorders depending on what you set in **LowToHi**. By default it reorders items from low to high.
*)
function TRSItem.Reorder(LowToHi: Boolean = True): TRSItem;
var
  str, first, last: String;
  i, j: Int32;
begin
  str := ToStr(Self);

  if not str.Contains('..') then
    Exit(Self);

  i := StrToInt(str.Before('..')[High(str.Before('..'))]);
  j := StrToInt(str.After('..')[Low(str.Before('..'))]);

  if (LowToHi and (i > j)) or (not LowToHi and (i < j)) then
  begin
    first := ToStr(j);
    last  := ToStr(i);
  end
  else
  begin
    first := ToStr(i);
    last  := ToStr(j);
  end;

  Result := str.Replace('(' + ToStr(i) + '..' + ToStr(j) + ')', '(' + first + '..' + last + ')');
end;

(*
TRSItem.GetPortions
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSItem.GetPortions(): Int32;

Get the amount of portions in the multi dose item (an item with "(x..z)").
*)
function TRSItem.GetPortions(): Int32;
var
  str: String;
  i, j: Int32;
begin
  str := ToStr(Self);

  if not str.Contains('..') then
    Exit(1);

  i := StrToInt(str.Before('..')[High(str.Before('..'))]);
  j := StrToInt(str.After('..')[Low(str.Before('..'))]);

  if i > j then
    Result := i
  else
    Result := j
end;

(*
TRSItem.GetPortion
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSItem.GetPortion(): Int32;

Get the portion number of one specific Item.

Example
-------
  Item := 'Saradomin brew(4)';

  WriteLn Item.GetPortion; //This will print 4.
*)
function TRSItem.GetPortion(): Int32;
var
  Str: String;
begin
  Str := ToStr(Self);

  if not Str.Contains('(') then
    Exit(1);

  Result := StrToInt(Str.Before(')')[High(Str.Before(')'))]);
end;

(*
Item.GetArray
~~~~~~~~~~~~~
.. pascal:: function TRSItem.GetArray(): TRSItemArray;

Used to retrieve an item array of our multi dose/portion item.

Example
-------
  var
    Item: TRSItem;
  begin
    Item := 'Saradomin brew(1..4)';

    WriteLn Item.GetArray();
    //This will print: ['Saradomin brew(1)', 'Saradomin brew(2)', 'Saradomin brew(3)', 'Saradomin brew(4)']
  end;
*)
function TRSItem.GetArray(): TRSItemArray;
var
  str: String;
  i, first, last: Int32;
begin
  str := ToStr(Self);

  if not str.Contains('..') then
    Exit([Self]);

  first := StrToInt(str.Before('..')[High(str.Before('..'))]);
  last :=  StrToInt(str.After('..')[Low(str.Before('..'))]);
  if first < last then
  begin
    for i := first to last do
      Result += str.Replace(ToStr(first) + '..' + ToStr(last), ToStr(i));
  end
  else if first > last then
  begin
    for i := first downto last do
      Result += str.Replace(ToStr(first) + '..' + ToStr(last), ToStr(i));
  end;
end;

(*
Item.GetSingle
~~~~~~~~~~~~~~
.. pascal:: function TRSItem.GetSingle(Lo: Boolean = True): TRSItem;

Used to retrieve the lowest or highest dose of our multi dose/portion item.

Example
-------
  var
    Item: TRSItem;
  begin
    Item := 'Saradomin brew(1..4)';

    WriteLn Item.GetSingle(True); //This will print: 'Saradomin brew(1)'
  end;
*)
function TRSItem.GetSingle(lo: Boolean = True): TRSItem;
var
  str: String;
  i, j: Int32;
begin
  str := ToStr(Self);

  if not str.Contains('..') then
    Exit(Self);

  i := StrToInt(str.Before('..')[High(str.Before('..'))]);
  j :=  StrToInt(str.After('..')[Low(str.Before('..'))]);

  if (lo and (i > j)) or (not lo and (i < j)) then
    Result := str.Replace(ToStr(i) + '..' + ToStr(j), ToStr(j))
  else
    Result := str.Replace(ToStr(i) + '..' + ToStr(j), ToStr(i));
end;


