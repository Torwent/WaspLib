{$DEFINE WL_ANTIBAN_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

{$H-}
procedure OnStartAntibanTask(Task: PAntibanTask);
var
  str: String;
begin
  if Length(ProgressReport.ProgressArray) < 1 then
    Exit;

  str := ' Action        : Antiban';
  ProgressReport.ProgressArray[0] := str;
  str := ' Runtime       : ' + SRL.MsToTime(ProgressReport.PTimeRunning^.ElapsedTime, Time_Short).Strip();
  ProgressReport.ProgressArray[1] := str;

  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  if WLSettings.RemoteInput.Enabled and WLSettings.RemoteInput.HUDReport and not WLSettings.RemoteInput.HUDDebug then
    ProgressReport.Update();
  {$ENDIF}
end;

procedure OnBreakingTask(Task: PBreakTask; var countdown: TCountdown);
var
  str: String;
begin
  if Length(ProgressReport.ProgressArray) < 1 then
    Exit;

  str := ' Breaking      : ' + SRL.MsToTime(countdown.TimeRemaining(), Time_Short).Strip();
  ProgressReport.ProgressArray[0] := str;
  str := ' Runtime       : ' + SRL.MsToTime(ProgressReport.PTimeRunning^.ElapsedTime, Time_Short).Strip();
  ProgressReport.ProgressArray[1] := str;

  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  if WLSettings.RemoteInput.Enabled and WLSettings.RemoteInput.HUDReport and not WLSettings.RemoteInput.HUDDebug then
    ProgressReport.Update();
  {$ENDIF}
end;

procedure OnSleepingTask(Task: PSleepTask; var Countdown: TCountdown);
var
  str: String;
begin
  if Length(ProgressReport.ProgressArray) < 1 then
    Exit;

  str := ' Sleeping      : ' + SRL.MsToTime(countdown.TimeRemaining(), Time_Short).Strip();
  ProgressReport.ProgressArray[0] := str;
  str := ' Runtime       : ' + SRL.MsToTime(ProgressReport.PTimeRunning^.ElapsedTime, Time_Short).Strip();
  ProgressReport.ProgressArray[1] := str;

  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  if WLSettings.RemoteInput.Enabled and WLSettings.RemoteInput.HUDReport and not WLSettings.RemoteInput.HUDDebug then
    ProgressReport.Update();
  {$ENDIF}
end;
{$H+}

function TAntiban.TimeRunningAtClock(timeOfDay: String; randomness: Double = 0.10): Int64; override;
begin
  Result := inherited(timeOfDay.Replace('.', ':').Replace('-', ':').Replace(',', ':'), randomness);
end;

procedure TAntiban.AdjustZoom(); override;
var
  zoom, newZoom: Int32;
  attempts: Int32;
begin

  if Self.MaxZoom = 0 then
    Self.MaxZoom := 100;

  if MainScreen.HasInterface() then
    Exit;

  zoom := EnsureRange(MM2MS.GetZoomLevel(), 0, 100);

  repeat
    Inc(attempts);
    if attempts > 100 then
      Exit;

    newZoom := SRL.SkewedRand(zoom, Self.MinZoom, Self.MaxZoom);
  until Abs(zoom - newZoom) > 15;

  Self.DebugLn('Adjust zoom: ' + ToString(newZoom));
  RSMouseZoom.SetZoomLevel(newZoom);
end;

//by Flight
procedure TAntiban.SmallCameraRotation();
begin
  Self.DebugLn('Small camera rotation');
  Minimap.SetCompassAngle(Minimap.GetCompassAngle+(Random(-15,15)));
end;


// POV antibans
procedure TAntiban.RandomPOVTask();
begin
  case Random(10) of
    0..4: Self.AdjustZoom();
    5..7: Self.SmallCameraRotation();
    else  Self.RandomRotate();
  end;
end;


// Mouse antibans
procedure TAntiban.SmallRandomMouse(); override;
var
  b: TBox;
  P: TPoint;
  t: TCountDown;
begin
  Self.DebugLn('Random Mouse (Small)');

  b := Box(Mouse.Position(), 350, 350);
  t.Init(30000);
  repeat
    P := SRL.RandomPoint(b);
    if t.IsFinished() then
    begin
      WriteLn('Box: ', b);
      WriteLn('Point: ', P);
      Self.Fatal('Timed out!');
    end;
  until P.DistanceTo(b.Center()) < 50; // Make sure we move at least 50 distance

  ASyncMouse.Move(P);
end;

procedure TAntiban.RandomRightClick(); override;
begin
  Self.DebugLn('Random Right Click');

  Mouse.Move(RootInterface.Bounds(), True, MOUSE_DISTRIBUTION_RANDOM);

  if ChooseOption.Open() then
  begin
    if Random < 0.50 then
      Mouse.Move(ChooseOption.Bounds);

    if not Self.BioDice(60) or not ChooseOption.Select('Examine') then
    begin
      Self.BioWait(500, 6000, wdLeft);
      ChooseOption.Close();
    end;
  end;
end;

procedure TAntiban.RandomMouseTask();
begin
  case Random(10) of
    0..1: Self.RandomRightClick;
    2..4: Self.RandomMouse;
    else  Self.SmallRandomMouse;
  end;
end;

// GameTabs antibans
procedure TAntiban.RandomTab(); override;
begin
  Self.DebugLn('Random GameTab');

  if Random() < 0.80 then
  begin
    if Self.BioDice(50) then
    begin
      GameTabs.Open(ERSGameTab(SRL.NormalRange(Ord(ERSGameTab.COMBAT), Ord(ERSGameTab.MAGIC))));
      System.Wait(300, 3000, wdLeft);
    end;

    GameTabs.Open(ERSGameTab(Random(Ord(ERSGameTab.COMBAT), Ord(ERSGameTab.MAGIC))));
  end else
  begin
    if Random() < 0.50 then
    begin
      GameTabs.Open(ERSGameTab(SRL.NormalRange(Ord(ERSGameTab.CLAN), Ord(ERSGameTab.MUSIC))));
      System.Wait(0, 2500, wdLeft);
    end;

    GameTabs.Open(ERSGameTab(Random(Ord(ERSGameTab.CLAN), Ord(ERSGameTab.MUSIC))));
  end;
end;

procedure TAntiban.ToggleTab();
var
  currentTab: ERSGameTab;
begin
  currentTab := GameTabs.GetCurrentTab();
  Self.DebugLn('Toggling GameTabs');
  Self.RandomTab();
  Self.BioWait(500, 7000, wdLeft);
  GameTabs.Open(currentTab);
end;


procedure TAntiban.MoveItems(items: TRSItemArray);
var
  currentSlots, newSlots, tmp: TIntegerArray;
  i: Int32;
begin
  Self.DebugLn('Moving items');

  if Inventory.GetSelectedSlot() > -1 then
  begin
    Inventory.SetSelectedSlot(-1);
    Self.BioWait(50, 250, wdLeft);
  end;

  if not Inventory.FindItems(items, currentSlots) then
    Exit;

  newSlots := Inventory.RandomPattern();

  SetLength(newSlots, Length(currentSlots));
  WriteLn newSlots;
  tmp := currentSlots.Intersection(newSlots);
  WriteLn tmp;
  currentSlots := currentSlots.Difference(tmp);
  currentSlots := currentSlots.Sorted();
  WriteLn currentSlots;
  newSlots := newSlots.Difference(tmp);

  WriteLn newSlots;
  for i := 0 to High(currentSlots) do
  begin
    Inventory.Drag(currentSlots[i], newSlots[i]);
    Self.BioWait(50, 250, wdLeft);
  end;
end;


procedure TAntiban.CheckCharges();
const
  ITEM_LIST: TRSItemArray = [
    'Infernal axe', 'Crystal axe', 'Infernal harpoon', 'Crystal harpoon',
    'Infernal pickaxe', 'Crystal pickaxe', 'Bryophyta''s staff',
    'Ring of endurance', 'Ring of suffering (ri)', 'Ring of suffering (r)',
    'Amulet of blood fury', 'Dodgy necklace', 'Tome of fire',
    'Bonecrusher necklace', 'Amulet of chemistry',
    'Celestial ring', 'Celestial signet',
    'Sanguinesti staff'
  ];
var
  equippedArray: TRSItemArray;
  item: TRSItem;
begin
  if not Equipment.Open() then
    Exit;

  for item in ITEM_LIST do
    if Equipment.ContainsItem(item) then
      equippedArray += item;

  if equippedArray = [] then
    Exit;

  item := equippedArray.RandomValue();

  Self.DebugLn('Checking ' + ToStr(item) + ' charges');

  Equipment.ClickItem(item, 'Check');
end;

procedure TAntiban.CheckSlayerHelm();
const
  ITEM_LIST: TRSItemArray = [
    'Slayer helmet', 'Slayer helmet (i)',
    'Black slayer helmet', 'Black slayer helmet (i)',
    'Green slayer helmet', 'Green slayer helmet (i)',
    'Red slayer helmet', 'Red slayer helmet (i)',
    'Purple slayer helmet', 'Purple slayer helmet (i)',
    'Turquoise slayer helmet', 'Turquoise slayer helmet (i)',
    'Hydra slayer helmet', 'Hydra slayer helmet (i)',
    'Twisted slayer helmet', 'Twisted slayer helmet (i)'
  ];
var
  i: Int32;
begin
  if not Equipment.Open() then
    Exit;

  for i := 0 to High(ITEM_LIST) do
  begin
    if Equipment.ContainsItem(ITEM_LIST[i]) then
      Break;
    if i = High(ITEM_LIST) then
      Exit;
  end;

  Self.DebugLn('Checking slayer task progress in' + ToStr(ITEM_LIST[i]) + '.');

  Equipment.ClickItem(ITEM_LIST[i], 'Check');
end;

procedure TAntiban.CheckSlayerBracelet(); //TODO: Add equipping if it expired in the equipment
var
  item: TRSItem;
  inInventory: Boolean;
begin
  item := 'null';

  if Inventory.Open() then
  begin
    if Inventory.ContainsItem('Bracelet of slaughter') then
      item := 'Bracelet of slaughter'
    else if Inventory.ContainsItem('Expeditious bracelet') then
      item := 'Expeditious bracelet';

    inInventory := True;
  end;

  if (item = 'null') and Equipment.Open() then
  begin
    if Equipment.ContainsItem('Bracelet of slaughter') then
      item := 'Bracelet of slaughter'
    else if Equipment.ContainsItem('Expeditious bracelet') then
      item := 'Expeditious bracelet';

    inInventory := False;
  end;

  if item = 'null' then
    Exit;

  Self.DebugLn('Checking ' + ToStr(item) + ' state.');

  if inInventory then
    Inventory.ClickItem(Item, 'Check')
  else
    Equipment.ClickItem(Item, 'Check');
end;


procedure TAntiban.OpenSkill(Skill: ERSSkill; time: Int32; ReturnToCurrentTab: Boolean);
var
  Tab: ERSGameTab;
begin
  Self.DebugLn('Opening skill: ' + ToString(Skill));

  if ReturnToCurrentTab then
    Tab := GameTabs.GetCurrentTab();

  if Stats.MouseOver(Skill) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WaitUntil(MainScreen.IsScrollOpen(), 100, 3000);
    Self.BioWait(time);

    while MainScreen.IsScrollOpen() do
      MainScreen.CloseInterface();

    if ReturnToCurrentTab then
      GameTabs.Open(Tab);
  end;
end;

procedure TAntiban.OpenSkills();
begin
  if Self.Skills = [] then
  begin
    Self.DebugLn('OpenSkills: No skills declared');
    Exit;
  end;

  Self.OpenSkill(Self.Skills[Random(Length(Self.Skills))], SRL.TruncatedGauss(1000, 10000), SRL.Dice(50));
end;

procedure TAntiban.RandomAchievementTab();
begin
  Self.DebugLn('Random Achievement Tab');
  Achievements.OpenTab(ERSAchievementTab(Random(0, Ord(High(ERSAchievementTab)))));
end;

procedure TAntiban.ToggleAchievementTabs();
var
  currentTab: ERSAchievementTab;
  time: Int32;
  done: Int64;
begin
  currentTab := Achievements.GetCurrentTab();
  Self.DebugLn('Toggling Achievement tabs');
  Self.RandomAchievementTab();

  time := Round(SRL.TruncatedGauss(500*BioHash, 7000*BioHash));
  done := GetTickCount() + time;

  if Self.BioDice(50) then
  begin
    case Achievements.GetCurrentTab() of
      ERSAchievementTab.QUESTS, ERSAchievementTab.DIARIES:
        Achievements.RandomScroll(Achievements.GetScrollPosition() < 50);
    end;
  end;

  repeat
    System.Wait(50, 150);
  until GetTickCount() > done;

  Achievements.OpenTab(currentTab);
end;


procedure TAntiban.RandomGameTabTask();
begin
  case Random(13) of
    0..3:   Self.RandomTab();
    4..9:   Self.ToggleTab();
    10..11: Self.ToggleAchievementTabs();
    12:     Self.CheckCharges();
  end;
end;


// Toggling random stuff antibans
procedure TAntiban.ToggleRun();
begin
  Self.DebugLn('Toggling run');

  if Minimap.IsRunEnabled() then
  begin
    Minimap.DisableRun();
    Self.BioWait(1000, 4000);
    Minimap.EnableRun();
    Exit;
  end;

  Minimap.EnableRun();
  Self.BioWait(1000, 4000);
  Minimap.DisableRun();
end;

procedure TAntiban.ToggleQPray();
begin
  Self.DebugLn('Toggling quick pray');
  if Minimap.IsPrayerEnabled() then
  begin
    Minimap.DisablePrayer();
    Self.BioWait(1000, 4000);
    Minimap.EnablePrayer();
    Exit;
  end;

  Minimap.EnablePrayer();
  Self.BioWait(1000, 4000);
  Minimap.DisablePrayer();
end;


// Chatbox antibans
procedure TAntiban.ChatScrolling();
begin
  Self.DebugLn('Random scrolling on chat');
  Chat.RandomScroll(False);
  Self.BioWait(5000, 8000);
  Chat.SetScrollPosition(100);
end;

procedure TAntiban.RandomChatButton();
var
  ChatButton: ERSChatButton := ERSChatButton(Random(0, (Length(ERSChatButton) - 2)));
begin
  Self.DebugLn('Opening ' + ToStr(ChatButton) + ' chat button');

  ChatButtons.Open(ChatButton);
end;

procedure TAntiban.ToggleChatButton();
var
  CurrentButton: ERSChatButton := ChatButtons.GetActive;
begin
  Self.DebugLn('Toggling chat buttons');
  Self.RandomChatButton;
  Self.BioWait(3000, 5000);
  ChatButtons.Open(CurrentButton);
end;

procedure TAntiban.RandomChatButtonState();
var
  RandomButton: ERSChatButton := ERSChatButton(Random(2, (Length(ERSChatButton) - 2)));
  RandomState: ERSChatButtonState;
begin
  case RandomButton of
    ERSChatButton.GAME_CHAT:    RandomState := ERSChatButtonState.FILTERED;
    ERSChatButton.PUBLIC_CHAT:  RandomState := ERSChatButtonState(Random(1, Length(ERSChatButtonState)));
    ERSChatButton.PRIVATE_CHAT: RandomState := ERSChatButtonState(Random(1, 3));
    ERSChatButton.CHANNEL_CHAT: RandomState := ERSChatButtonState(Random(1, 3));
    ERSChatButton.CLAN_CHAT:    RandomState := ERSChatButtonState(Random(1, 3));
    ERSChatButton.TRADE_CHAT:   RandomState := ERSChatButtonState(Random(1, 3));
  end;

  Self.DebugLn('Changing ' + ToStr(RandomButton) + ' state to ' + ToStr(RandomState));
  ChatButtons.ChangeState(RandomButton, RandomState);
end;

procedure TAntiban.RandomChatTask();
begin
  case Random(25) of
    0..5:   Self.RandomChatButton();
    6..17:  Self.ToggleChatButton();
    18..24: Self.ChatScrolling();
  end;
end;


// Bank antibans
procedure TAntiban.BankScrolling();
begin
  if not Bank.IsOpen then
    Exit;

  Self.DebugLn('Random scrolling on bank');
  //Chatbox.RandomScroll;
end;

procedure TAntiban.RandomBankTab();
var
  tab: Int32;
begin
  if not Bank.IsOpen() then
    Exit;

  tab := Random(Bank.CountTabs());
  Self.DebugLn('Opening bank tab ' + ToStr(tab));
  Bank.OpenTab(tab);
end;

procedure TAntiban.ToggleBankTab();
var
  currentTab: Int32;
begin
  if not Bank.IsOpen() then
    Exit;

  Self.DebugLn('Toggling bank tabs');
  currentTab := Bank.GetCurrentTab();
  Self.RandomBankTab();
  Self.BioWait(3000, 4000, wdLeft);
  Bank.OpenTab(currentTab);
end;

(* TODO: Fix bank buttons
procedure TAntiban.RandomBankButton();
var
  RandomButton: ERSBankButton;
  BankButton: TRSButton;
begin
  if not Bank.IsOpen then
    Exit;

  RandomButton := ERSBankButton(Random(2, 10));
  BankButton := Bank.GetButton(RandomButton);
  Self.DebugLn('Clicking ' + ToStr(RandomButton) + ' bank button');
  BankButton.Enable;
end;
*)

procedure TAntiban.RandomBankTask();
begin
  case Random(0, 12) of
    0..2: Self.RandomBankTab;
    1..8: Self.ToggleBankTab;
  end;
end;


//by Flight
procedure TAntiBan.HoverMSTile(dotType: ERSMinimapDot; rightClick: Boolean = False);
var
  tries: Int32;
  a: Double;
  rDot: TPoint;
  msBox: TBox;
  dots,cTPA: TPointArray;
  cArr: TIntegerArray;
begin
  dots := Minimap.GetDots(dotType);
  if dots.Len() < 1 then Exit;
  a := Minimap.GetCompassAngle(False);
  repeat
    Inc(tries);
    rDot := dots[Random(Low(dots),High(dots))];
    msBox := Minimap.VectorToMSRect(Vec3(rDot.X + 2, rDot.Y + 2, 0), 1, 1, a).Bounds();
    if MainScreen.Bounds.Contains(msBox) then
    begin
      Self.DebugLn('Hovering random ' + toStr(dotType));
      cArr := GetColors(TPAFromBox(msBox));
      SRL.FindColors(cTPA, CTS1(cArr.GetRarest(), 30), msBox);
      Mouse.HumanMove(cTPA.Mean());
      if rightClick then
        Mouse.Click(MOUSE_RIGHT);

      wait(1500, 2700);
      if rightClick then
        ChooseOption.Close();
      Exit;
    end;
  until(tries > 10);
end;

//by Flight
procedure TAntiban.HoverMSNPCs();
begin
  Self.HoverMSTile(ERSMinimapDot.NPC);
end;

//by Flight
procedure TAntiban.HoverMSPlayers();
begin
  Self.HoverMSTile(ERSMinimapDot.PLAYER);
end;

//by Flight
procedure TAntiban.HoverMSItems();
begin
  Self.HoverMSTile(ERSMinimapDot.ITEM);
end;



procedure TAntiban.SetupTasks();
begin
  if Self.Tasks <> [] then
    Exit;

  if WLSettings.Antiban.Camera then
  begin
    Self.AddTask(3  * ONE_MINUTE, @Self.AdjustZoom, 0.33);
    Self.AddTask(7  * ONE_MINUTE, @Self.RandomPOVTask, 0.33);
  end;

  if WLSettings.Antiban.Mouse then
    Self.AddTask(8  * ONE_MINUTE, @Self.RandomMouseTask, 0.33);

  if WLSettings.Antiban.Chat then
    Self.AddTask(9  * ONE_MINUTE, @Self.RandomChatTask, 0.33);

  if WLSettings.Antiban.Mouse then
    Self.AddTask(10 * ONE_MINUTE, @Self.LoseFocus, 0.33);

  if WLSettings.Antiban.GameTabs then
    Self.AddTask(12 * ONE_MINUTE, @Self.RandomGameTabTask, 0.33);

  if WLSettings.Antiban.Bank then
    Self.AddTask(13 * ONE_MINUTE, @Self.RandomBankTask, 0.33);

  if WLSettings.Antiban.GameTabs then
    Self.AddTask(18 * ONE_MINUTE, @Self.HoverSkills, 0.33);

  Self.OnStartTask := @OnStartAntibanTask;
end;

procedure TAntiban.SetupBreaks();
begin
  if Self.Breaks <> [] then
    Exit;

  Self.AddBreak(30  * ONE_MINUTE, 2  * ONE_MINUTE, 0.33, 0.01);
  Self.AddBreak(45  * ONE_MINUTE, 5  * ONE_MINUTE, 0.33, 0.15);
  Self.AddBreak(60  * ONE_MINUTE, 10 * ONE_MINUTE, 0.33, 0.2 + BioHash);
  Self.AddBreak(120 * ONE_MINUTE, 30 * ONE_MINUTE, 0.33, 0.5 + BioHash);

  Self.OnBreaking := @OnBreakingTask;
end;

procedure TAntiban.SetupSleep();
begin
  if Self.Sleeps <> [] then
    Exit;

  Self.SetSleepHour();
  Self.SetSleepLength();
  Self.AddSleep(WLSettings.Sleep.Hour, WLSettings.Sleep.Length, 0.1, 0.8 + BioHash);

  Self.OnSleeping := @OnSleepingTask;
end;


procedure TAntiban.WalkingTasks();
begin
  case Random(0, 500) of //only about 1% chance of antiban while walking
    0:
    begin
      if not WLSettings.Antiban.Chat then Exit
      else if (Random(20) <= 17) then Self.RandomChatButton();
      //else Self.RandomChatButtonState();    //TODO...
    end;

    1..5:
    begin
      if not WLSettings.Antiban.Camera then Exit
      else if (Random(10) <= 3) then Self.RandomRotate();
    end;

    6..10:
    begin
      if not WLSettings.Antiban.Mouse then Exit
      else if (Random(10) <= 3) then Self.RandomRightClick()
      else Self.SmallRandomMouse();
    end;

    10, 14:
    begin
      if not WLSettings.Antiban.GameTabs then Exit
      else if (Random(10) <= 9) then Self.RandomTab()
      else Self.CheckCharges();
    end;
  end;
end;

procedure TAntiban.WalkingTasks({$H-}Walker: PRSWalker; Position: TPoint; Destination: TPoint);{$H+} overload;
begin
  Self.WalkingTasks();
end;


procedure TAntiban.Setup(); //override me to add stuff!
begin
  Mouse.Speed      := 10 + Self.GetBehavior(EBioBehavior.MOUSE_SPEED);
  Mouse.Gravity    := 8  + Round(Self.GetBehavior(EBioBehavior.MOUSE_GRAVITY) / 2);
  Mouse.Wind       := 3  + Round(Self.GetBehavior(EBioBehavior.MOUSE_WIND) / 2);
  Mouse.MissChance := 11 + Self.GetBehavior(EBioBehavior.MOUSE_MISS);

  if WLSettings.Antiban.Enabled then
    Self.SetupTasks();

  if WLSettings.Breaks then
    Self.SetupBreaks();

  if WLSettings.Sleep.Enabled then
    Self.SetupSleep();

  if not InRange(MM2MS.GetZoomLevel(), Self.MinZoom, Self.MaxZoom) then
    Self.AdjustZoom();

  //override me to add stuff!
end;

function TAntiban.DoAntiban(checkBreaks: Boolean = True; checkSleeps: Boolean = True): Boolean; override;
begin
  WL.Activity.Pause();
  APIClient.Timer.Pause();

  Result := inherited();

  WL.Activity.Resume();
  APIClient.TimeStamp += (GetTickCount() - APIClient.Timer.Paused);
  APIClient.Timer.Resume();
end;
